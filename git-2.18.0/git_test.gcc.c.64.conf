######################################################################
# Configuration file for GNU C compiler
######################################################################
EDG_FRONTEND_OPTIONS_PREPEND += --hard_define_macro __builtin_object_size(t,i)=__builtin_object_size(0,0)

EDG_FRONTEND_OPTIONS_PREPEND += --hard_define_macro __transaction_atomic=
EDG_FRONTEND_OPTIONS_PREPEND += --hard_define_macro __transaction_relaxed=
EDG_FRONTEND_OPTIONS_PREPEND += --hard_define_macro __transaction_cancel=

# On windows, ^Z is normally treated as EOF. But gcc on cygwin would
# keep reading the file.
EDG_FRONTEND_OPTIONS_PREPEND += --cs_control_z_is_not_eof

# EDG_FRONTEND_OPTIONS_PREPEND += --set_flag emulate_gnu_abi_bugs
# EDG_FRONTEND_OPTIONS_PREPEND += --set_flag emulate_unsafe_gnu_abi_bugs

EDG_FRONTEND_OPTIONS_PREPEND += --hard_define_macro _GLIBCXX14_CONSTEXPR=


######################################################################
####################       Target Settings        ####################
######################################################################

# Parameter SIGNED_CHARS
#
# Purpose
#  Specifies whether or not the \tt char type is signed on the target
#  platform.  
#
# Type
#  {Yes, No}
#
SIGNED_CHARS = Yes


# Parameter CS_TARG_PLAIN_INT_BIT_FIELD_IS_UNSIGNED
#
# Purpose
#  Specifies whether or not a 'plain' int bit field is to be treated
#  as unsigned.
#
# Type
#  {Yes, No}
#
CS_TARG_PLAIN_INT_BIT_FIELD_IS_UNSIGNED = No


# Parameter CS_TARG_WCHAR_T_INT_KIND
#
# Purpose
#  Specifies the integer kind associated with wchar_t.  
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_WCHAR_T_INT_KIND = int


# Parameter CS_TARG_WINT_T_INT_KIND
#
# Purpose
#  Specifies the integer kind associated with wint_t.  
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_WINT_T_INT_KIND = unsigned_int


# Parameter CS_TARG_CHAR16_T_INT_KIND
#
# Purpose
#  Specifies the integer kind associated with char16_t.  
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_CHAR16_T_INT_KIND = unsigned_short


# Parameter CS_TARG_CHAR32_T_INT_KIND
#
# Purpose
#  Specifies the integer kind associated with char32_t.  
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_CHAR32_T_INT_KIND = unsigned_int


# Parameter CS_TARG_BOOL_INT_KIND
#
# Purpose
#  Specifies the integer kind associated with bool.
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_BOOL_INT_KIND = unsigned_char


# Parameter CS_TARG_PTRDIFF_T_INT_KIND
#
# Purpose
#  Specifies the representation for ptrdiff_t: the result type of
#  the pointer subtraction operator.
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_PTRDIFF_T_INT_KIND = long


# Parameter CS_TARG_SIZE_T_INT_KIND
#
# Purpose
#  Specifies the representation for size_t: the result type of the
#  sizeof() function.
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_SIZE_T_INT_KIND = unsigned_long


# Parameter CS_TARG_INTMAX_KIND
#
# Purpose 
#  Specifies the integer kind associated with the largest signed
#  integer type.  In C99, this is intmax_t.
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_INTMAX_KIND = long_long


# Parameter CS_TARG_UINTMAX_KIND
#
# Purpose 
#  Specifies the integer kind associated with the largest unsigned
#  integer type.  In C99, this is uintmax_t.
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long}
#
CS_TARG_UINTMAX_KIND = unsigned_long_long


# Parameter CS_TARG_CHAR_BIT
#
# Purpose 
#  Specifies the size of a char, in bits.
#
# Type
#  integer
#
CS_TARG_CHAR_BIT = 8


# Parameter CS_TARG_SIZEOF_WCHAR_T
#
# Purpose 
#  Spscifies the size of a wchar_t entity, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_WCHAR_T = 4


# Parameter CS_TARG_SIZEOF_CHAR16_T
#
# Purpose 
#  Specifies the size of a char16_t entity, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_CHAR16_T = 2


# Parameter CS_TARG_SIZEOF_CHAR32_T
#
# Purpose 
#  Specifies the size of a  char32_t entity, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_CHAR32_T = 4


# Parameter CS_TARG_SIZEOF_SHORT
#
# Purpose 
#  Specifies the size of a short int, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_SHORT = 2


# Parameter CS_TARG_SIZEOF_INT
#
# Purpose 
#  Specifies the size of an int, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_INT = 4


# Parameter CS_TARG_SIZEOF_LONG
#
# Purpose 
#  Specifies the size of a long int, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_LONG = 8


# Parameter CS_TARG_SIZEOF_LONG_LONG
#
# Purpose 
#  Specifies the size of a long long int, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_LONG_LONG = 8


# Parameter CS_TARG_SIZEOF_POINTER
#
# Purpose 
#  Specifies the size of a pointer, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_POINTER = 8


# Parameter CS_TARG_SIZEOF_FLOAT
#
# Purpose 
#  Specifies the size of a float, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_FLOAT = 4


# Parameter CS_TARG_SIZEOF_DOUBLE
#
# Purpose 
#  Specifies the size of a double, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_DOUBLE = 8


# Parameter CS_TARG_SIZEOF_LONG_DOUBLE
#
# Purpose 
#  Specifies the size of a long double, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_LONG_DOUBLE = 16


# Parameter CS_TARG_SIZEOF_PTR_TO_DATA_MEMBER
#
# Purpose 
#  Specifies the size of a C++ pointer-to-data-member, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_PTR_TO_DATA_MEMBER = 8


# Parameter CS_TARG_SIZEOF_PTR_TO_MEMBER_FUNCTION
#
# Purpose 
#  Specifies the size of a C++ pointer-to-member-function, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_PTR_TO_MEMBER_FUNCTION = 16


# Parameter CS_TARG_SIZEOF_VIRTUAL_FUNCTION_INFO
#
# Purpose 
#  Specifies the size of a pointer to a C++ virtual function table, in
#  bytes.
#
# Type
#  integer
#
# Note
#  Every object of class <C> has a pointer to the virtual function
#  table for <C>.
#
CS_TARG_SIZEOF_VIRTUAL_FUNCTION_INFO = 8


# Parameter CS_TARG_SIZEOF_PTR_TO_VIRTUAL_BASE_CLASS
#
# Purpose 
#  Specifies the size of a C++ pointer-to-virtual-base-class, in bytes.
#
# Type
#  integer
#
CS_TARG_SIZEOF_PTR_TO_VIRTUAL_BASE_CLASS = 8


# Parameter CS_TARG_ALIGNOF_SHORT
#
# Purpose 
#  Specifies the alignment of a short int, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_SHORT = 2


# Parameter CS_TARG_ALIGNOF_INT
#
# Purpose 
#  Specifies the alignment of an int, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_INT = 4


# Parameter CS_TARG_ALIGNOF_LONG
#
# Purpose 
#  Specifies the alignment of a long int, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_LONG = 8


# Parameter CS_TARG_ALIGNOF_LONG_LONG
#
# Purpose 
#  Specifies the alignment of a long long int, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_LONG_LONG = 8


# Parameter CS_TARG_ALIGNOF_POINTER
#
# Purpose 
#  Specifies the alignment of a pointer, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_POINTER = 8


# Parameter CS_TARG_ALIGNOF_FLOAT
#
# Purpose 
#  Specifies the alignment of a float, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_FLOAT = 4


# Parameter CS_TARG_ALIGNOF_DOUBLE
#
# Purpose 
#  Specifies the alignment of a double, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_DOUBLE = 8


# Parameter CS_TARG_ALIGNOF_LONG_DOUBLE
#
# Purpose 
#  Specifies the alignment of a long double, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_LONG_DOUBLE = 16


# Parameter CS_TARG_ALIGNOF_PTR_TO_DATA_MEMBER
#
# Purpose 
#  Specifies the alignment of a C++ pointer-to-data-member, in bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_PTR_TO_DATA_MEMBER = 8


# Parameter CS_TARG_ALIGNOF_PTR_TO_MEMBER_FUNCTION
#
# Purpose 
#  Specifies the alignment of a C++ pointer-to-member-function, in
#  bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_PTR_TO_MEMBER_FUNCTION = 8


# Parameter CS_TARG_ALIGNOF_VIRTUAL_FUNCTION_INFO
#
# Purpose 
#  Specifies the alignment of a virtual-function-info entity, in
#  bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_VIRTUAL_FUNCTION_INFO = 8


# Parameter CS_TARG_ALIGNOF_PTR_TO_VIRTUAL_BASE_CLASS
#
# Purpose 
#  Specifies the alignment of a C++ pointer-to-virtual-base-class, in
#  bytes.
#
# Type
#  integer
#
CS_TARG_ALIGNOF_PTR_TO_VIRTUAL_BASE_CLASS = 8


# Parameter CS_TARG_MINIMUM_STRUCT_ALIGNMENT
#
# Purpose 
#  Specifies the minimum alignment (in bytes) for objects of class,
#  struct, and union type.
#
# Type
#  integer
#
CS_TARG_MINIMUM_STRUCT_ALIGNMENT = 1


# Parameter CS_TARG_MINIMUM_PACK_ALIGNMENT
#
# Purpose 
#  Specifies the minimum value permitted for a 'pack alignment'.
#
# Type
#  integer
#
CS_TARG_MINIMUM_PACK_ALIGNMENT = 1


# Parameter 
#
# Purpose 
#  Specifies the maximum value permitted for a 'pack alignment'.
#
# Type
#  integer
#
CS_TARG_MAXIMUM_PACK_ALIGNMENT = 128


# Parameter CS_TARG_MAXIMUM_INTRINSIC_ALIGNMENT
#
# Purpose 
#  The maximum value permitted for an alignment.
#
# Type
#  integer
#
CS_TARG_MAXIMUM_INTRINSIC_ALIGNMENT = 16


# Parameter CS_TARG_SHORT_FIELD_ALIGNMENT 
#
# Purpose 
#  Specifies the default alignment for fields of type short. This
#  could be different from the intrinsic alignment of short.
#
# Type
#  integer
#
CS_TARG_SHORT_FIELD_ALIGNMENT = 2


# Parameter CS_TARG_INT_FIELD_ALIGNMENT
#
# Purpose 
#  Specifies the default alignment for fields of type int. This could
#  be different from the intrinsic alignment of int.
#
# Type
#  integer
#
CS_TARG_INT_FIELD_ALIGNMENT = 4


# Parameter CS_TARG_LONG_FIELD_ALIGNMENT
#
# Purpose 
#  Specifies the default alignment for fields of type long. This could
#  be different from the intrinsic alignment of long.
#
# Type
#  integer
#
CS_TARG_LONG_FIELD_ALIGNMENT = 8


# Parameter CS_TARG_LONG_LONG_FIELD_ALIGNMENT
#
# Purpose 
#  Specifies the default alignment for fields of type long long. This
#  could be different from the intrinsic alignment of long long.
#
# Type
#  integer
#
CS_TARG_LONG_LONG_FIELD_ALIGNMENT = 8


# Parameter CS_TARG_FLOAT_FIELD_ALIGNMENT
#
# Purpose 
#  Specifies the default alignment for fields of type float. This
#  could be different from the intrinsic alignment of float.
#
# Type
#  integer
#
CS_TARG_FLOAT_FIELD_ALIGNMENT = 4


# Parameter CS_TARG_DOUBLE_FIELD_ALIGNMENT
#
# Purpose 
#  Specifies the default alignment for fields of type double. This
#  could be different from the intrinsic alignment of double.
#
# Type
#  integer
#
CS_TARG_DOUBLE_FIELD_ALIGNMENT = 8


# Parameter CS_TARG_LONG_DOUBLE_FIELD_ALIGNMENT
#
# Purpose 
#  Specifies the default alignment for fields of type long
#  double. This could be different from the intrinsic alignment of
#  long double.
#
# Type
#  integer
#
CS_TARG_LONG_DOUBLE_FIELD_ALIGNMENT = 16


# Parameter CS_TARG_BIT_FIELD_CONTAINER_SIZE
#
# Purpose 
#  Specifies the container size to be used for bit-fields.  
#
# Type 
#  integer 
# 
# Behavior
#  If > 0, indicates the size in bytes of one of the integral types.
#
#  0 means 'use the smallest integral type into which the field will
#  fit'.  
#
#  < 0 means 'use the base type given in the declaration.  
# 
CS_TARG_BIT_FIELD_CONTAINER_SIZE = -1


# Parameter CS_TARG_MICROSOFT_BIT_FIELD_ALLOCATION
#
# Purpose
#  Specifies whether or not bit-field allocation follows the conventions
#  of Microsoft C/C++.  
#
# Type
#  {Yes, No}
#
# Behavior
#  When "Yes", bit-field allocation follows the conventions of
#  Microsoft C/C++.
#
# Notes
#  The value of \param CS_TARG_BIT_FIELD_CONTAINER_SIZE must be -1 and
#  there is a two-stage allocation: first a bit-field container based
#  on the bit-field type is allocated (as though it were a field in
#  its own right), then bit fields are allocated within it.  When the
#  bit-field type changes or the container fills up, a new container
#  is allocated.
#
CS_TARG_MICROSOFT_BIT_FIELD_ALLOCATION = No


# Parameter CS_TARG_FORCE_ONE_BIT_BIT_FIELD_TO_BE_UNSIGNED
#
# Purpose 
#  Specifies how to treat a 'plain' int bit field of length 1.
#
# Type
#  {Yes, No}
#
# Behavior
#  If "Yes", treat a 'plain' int bit field of length 1 as unsigned
#  regardless of the setting of \param
#  CS_TARG_PLAIN_INT_BIT_FIELD_IS_UNSIGNED (because a bit field
#  consisting of only a sign is not very useful).
#
CS_TARG_FORCE_ONE_BIT_BIT_FIELD_TO_BE_UNSIGNED = No


# Parameter CS_TARG_ENUM_BIT_FIELDS_ARE_ALWAYS_UNSIGNED
#
# Purpose
#  Specifies signedness for enum bit fields (an extension in C).
#
# Type
#  {Yes, No}
#
# Behavior
#  If "Yes", enum bit fields are always unsigned.  
#
#  If "No", signedness depends on the signedness and size of the
#  values of the enum and defaults to the signedness indicated by
#  \param CS_TARG_NONNEGATIVE_ENUM_BIT_FIELD_IS_UNSIGNED.  
#
# Notes
#  This parameter must be set to "No" to allow fully-standard C++.
#
CS_TARG_ENUM_BIT_FIELDS_ARE_ALWAYS_UNSIGNED = No


# Parameter CS_TARG_NONNEGATIVE_ENUM_BIT_FIELD_IS_UNSIGNED
#
# Purpose
#  Specifies signedness for enum bit fields whose enum types have
#  enumerators that could all fit in the nonnegative range of the bit
#  field if it were signed.
#
# Type
#  {Yes, No}
#
# Behavior
#  If "Yes", enum bit fields are unsigned in the case where their enum
#  types have enumerators that could all fit in the nonnegative range
#  of the bit field if it were signed.
#
#  If "No", these enum bit fields are signed.
#
# Notes
#  This setting is ignored if \param
#  CS_TARG_ENUM_BIT_FIELDS_ARE_ALWAYS_UNSIGNED is set to "Yes".
#
CS_TARG_NONNEGATIVE_ENUM_BIT_FIELD_IS_UNSIGNED = Yes


# Parameter CS_TARG_ZERO_WIDTH_BIT_FIELD_ALIGNMENT
#
# Purpose
#  Specifies the alignment adjustment to be made when a zero-width
#  (unnamed) bit field is declared.
#
# Type
#  integer
#
# Behavior
#  If > 0 it is the alignment to be used (typically the alignment of
#  one of the integral types, in which case the value should be cast
#  to a_targ_alignment).
#
#  If zero, means 'use the minimal alignment', which is single-byte
#  alignment.
# 
#  If < 0, means 'use the alignment of the base type given in the
#  declaration'.
#
CS_TARG_ZERO_WIDTH_BIT_FIELD_ALIGNMENT = -1


# Parameter CS_TARG_ZERO_WIDTH_BIT_FIELD_AFFECTS_STRUCT_ALIGNMENT
#
# Purpose
#  Specifies whether or not the alignment adjustment when a zero-width
#  (unnamed) bit-field is declared affects the overall alignment of
#  the struct as well as the alignment of the next field.
#
# Type
#  {Yes, No}
#
CS_TARG_ZERO_WIDTH_BIT_FIELD_AFFECTS_STRUCT_ALIGNMENT = No


# Parameter CS_TARG_UNNAMED_BIT_FIELD_AFFECTS_STRUCT_ALIGNMENT
#
# Purpose
#  Specifies whether or not the alignment adjustment when an unnamed
#  bit-field is declared affects the overall alignment of the struct
#  as well as the alignment of the next field.  
#
# Type
#  {Yes, No}
#
CS_TARG_UNNAMED_BIT_FIELD_AFFECTS_STRUCT_ALIGNMENT = No


# Parameter CS_TARG_USER_CONTROL_OF_STRUCT_PACKING_AFFECTS_BIT_FIELDS
#
# Purpose 
#  Specifies whether or not '#pragma pack(n)' and the command-line
#  option '--pack_alignment=n' affect the alignment of bit field
#  containers (when bit fields straddle container alignment
#  boundaries).  
# 
# Type 
#  {Yes, No} 
#
CS_TARG_USER_CONTROL_OF_STRUCT_PACKING_AFFECTS_BIT_FIELDS = Yes


# Parameter CS_TARG_PAD_BIT_FIELDS_LARGER_THAN_BASE_TYPE
#
# Purpose 
#  Specifies whether or not fields longer than their base types are
#  padded out to the full declared length.
#
# Type 
#  {Yes, No} 
#
# Behavior
#  If "Yes", bit fields longer than their base types are padded out to
#  the full declared length.  
#
#  If "No", only as many bits are allocated as are in the base type.  
#
#  In either case, the bit field itself has the same number of bits;
#  the extra bits are padding bits.
#
CS_TARG_PAD_BIT_FIELDS_LARGER_THAN_BASE_TYPE = Yes


# Parameter CS_TARG_SIZE_T_MAX
#
# Purpose 
#  Specifies the limit of the representation of size_t constants; the
#  range it defines can be equal to or smaller than the integer size
#  implied by size_t_int_kind.
#
# Type
#  integer or "default"
#
# Behavior
#  When "default", the value used will be computed based on the range
#  covered by \param CS_TARG_SIZE_T_INT_KIND
#
CS_TARG_SIZE_T_MAX = default


# Parameter CS_TARG_ENUM_TYPES_CAN_BE_SMALLER_THAN_INT
#
# Purpose
#  Specifies whether or not enum types can be allocated in integral
#  types smaller than int.
#
# Type
#  {Yes, No}
#
# Behavior
#  If "Yes", enum types will be allocated in the smallest integral
#  type in which they will fit. 
#
#  If "No", enum types will be allocated in ints.
#
CS_TARG_ENUM_TYPES_CAN_BE_SMALLER_THAN_INT = No


# Parameter CS_TARG_ENUM_TYPES_CAN_BE_LARGER_THAN_INT
#
# Purpose
#  Specifies whether or not enum types can be allocated in integral
#  types larger than int.
#
# Type
#  {Yes, No}
#
# Behavior
#  If "Yes", an enumerator type can be based on an integer type that is
#  larger than an int.
#
#  If "No", an enumerator type can not be based on an integer type that is
#  larger than an int.
#
CS_TARG_ENUM_TYPES_CAN_BE_LARGER_THAN_INT = Yes


# Parameter CS_TARG_RIGHT_SHIFT_IS_ARITHMETIC
#
# Purpose
#  Specifies whether or not a right shift on a signed quantity does
#  sign extension. 
#
# Type
#  {Yes, No}
#
CS_TARG_RIGHT_SHIFT_IS_ARITHMETIC = Yes


# Parameter CS_TARG_TOO_LARGE_SHIFT_COUNT_IS_TAKEN_MODULO_SIZE
#
# Purpose
#  Specifies whether or not a shift with a too-large shift count is
#  treated as if the shift count is reduced modulo the bit size of
#  the object.
#
# Type
#  {Yes, No} 
#
CS_TARG_TOO_LARGE_SHIFT_COUNT_IS_TAKEN_MODULO_SIZE = No


# Parameter CS_TARG_VTABLE_ENTRY_INT_KIND
#
# Purpose
#  Integer kind used for the size of a vtable entry in the IA-64 ABI.
#
# Type
#  {char, signed_char, unsigned_char, short,
#  unsigned_short, int, unsigned_int, long,
#  unsigned_long, long_long, unsigned_long_long, default}
#
CS_TARG_VTABLE_ENTRY_INT_KIND = default
