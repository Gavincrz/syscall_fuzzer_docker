#  For emacs: -*- Shell-script -*-
#
######################################################################
#  CodeSonar 5.0p0 Configuration File
######################################################################
#
#  CodeSonar will use preferences defined in this file when running
#  the analysis.
#
#  The file must be placed at <prjname>.conf, where <prjname> is the
#  project name. The general configuration file template is located
#  at $CSONAR/codesonar/template.conf, where $CSONAR is the
#  CodeSonar installation directory.
#
#
#  The file format is a sequence of lines of the form:
#    PREFERENCE = VALUE
#  or
#    PREFERENCE += VALUE
#
#  - Backslash can be used at the end of a line to continue a line.
#  - A comment is a line where the first non-whitespace character is
#    a hash mark.
#  - Empty lines have no effect.
#  - Variable names and boolean values (Yes/No) are case
#    insensitive.
#
#  The tool will issue warnings if there are syntax errors in this
#  file, but continue running.
#
#  A template configuration with default values for all preferences
#  is located at $CSONAR/codesonar/template.conf.
#
#  Preferences that come later in this file take precedence over
#  preferences that come earlier. The += operator will treat its
#  right-hand-side as a string, and append to the existing string
#  value. If the first occurrence of a preference uses the +=
#  operator, then it is treated as an = operator.
#
#  If a command line flag contradicts a configuration file setting
#  (even in the template configuration file), then behavior is
#  undefined. GrammaTech strongly encourages users to use
#  configuration files to encode settings rather than command line
#  flags, and is in the process of deprecating use of command line
#  flags in some contexts.
#
#  CodeSonar reads both the template preference file and the project
#  preference file. To modify default preferences in a system-wide
#  fashion, a user should modify the template preference file. The
#  project preference file is treated as if it is concatenated onto
#  the end of the template preference file. Any options occurring in
#  the project preference file will take precedence over options
#  specified in the template preference file.
#

# Parameter CFLAGS_PREPEND
#
# Purpose
#  Modify the CFLAGs being passed to the parser.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of CFLAGS
#
# Behavior
#  The parser will be passed the same CFLAGs as the real compiler,
#  with these additional CFLAGs prepended.
#
# Notes
#  CFLAGS_PREPEND is only suitable for use in the general template
#  [doc/html/Preferences/PreferencesIndex.html#general_template]
#  configuration file and general project
#  [doc/html/Preferences/PreferencesIndex.html#general_project]
#  configuration files. It is not suitable for use in compiler
#  template
#  [doc/html/Preferences/PreferencesIndex.html#compiler_template] or
#  project-compiler
#  [doc/html/Preferences/PreferencesIndex.html#project_compiler]
#  configuration files.
#
#  Most compilers will implicitly define various preprocessor
#  symbols and include directories. Unless you are using gcc (which
#  can be queried for its definitions), specify those implicit
#  definitions here to avoid parse errors.
#
#  Typically, the implicit definitions specify the CPU architecture,
#  the operating system, and the compiler's include directory.
#
#  The += operator will actually prepend to this preference (in all
#  cases except for other parameters with names of the form
#  *_PREPEND, the += operator appends). This means that if you have
#  two CFLAGS_PREPEND += statements in this file, the CFLAGS in the
#  second statement will be prepended to the CFLAGS in the first
#  statement. CFLAGS_PREPEND +=


# Parameter CFLAGS_APPEND
#
# Purpose
#  Modify the CFLAGs being passed to the parser.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of CFLAGS
#
# Behavior
#  The parser will be passed the same CFLAGs as the real compiler,
#  with these additional CFLAGs appended.
#
# Notes
#  CFLAGS_APPEND is only suitable for use in the general template
#  [doc/html/Preferences/PreferencesIndex.html#general_template]
#  configuration file and general project
#  [doc/html/Preferences/PreferencesIndex.html#general_project]
#  configuration files. It is not suitable for use in compiler
#  template
#  [doc/html/Preferences/PreferencesIndex.html#compiler_template] or
#  project-compiler
#  [doc/html/Preferences/PreferencesIndex.html#project_compiler]
#  configuration files.
#
#  Most compilers will implicitly define various preprocessor
#  symbols and include directories. If the real compiler cannot be
#  automatically queried for its implicit definitions (this only
#  works for gcc), then the user must specify them here to avoid
#  parse errors. Typically, these flags specify the CPU
#  architecture, the operating system, and the compiler's include
#  directory.
#
#CFLAGS_APPEND += 


# Parameter COMPILER_MODELS
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Purpose
#  Defines a map from compiler executable basenames to compiler
#  models. If your compiler executable basename is not listed below
#  as a 'default', then you should add an entry mapping it to the
#  compiler model it is most similar to.
#
# Type
#  Whitespace-separated list of rules of the form
#    [path/to/]executable -> model[:ABIkey]
#
#  On Windows systems, include .exe suffix on the executable name.
#
# Behavior
#  Invocations of executable will be modeled using model.
#
#  If [path/to/] is provided, the mapping only applies to
#  executables with matching paths or subpaths. For example,
#    COMPILER_MODELS += bin\mycc.exe -> cl
#  will match invocations of c:\bin\mycc.exe and
#  c:\very\long\path\to\bin\mycc.exe, but not c:\mybin\mycc.exe or
#  c:\usr\lib\mycc.exe.
#
#  [Windows only] Absolute paths referring to files on network file
#  systems do not currently work, unless they are specified using
#  the \Device\Mup\... syntax used by the kernel. You may wish to
#  use a path suffix omitting the machine and share name instead.
#  This will change in future releases if we can determine a
#  sanctioned and portable way to normalize paths to the
#  \Device\Mup\... syntax (please contact us if you are aware of
#  such a mechanism).
#
#  If [:ABIkey] is provided, CodeSonar will associate the specified
#  ABI key
#  [doc/html/C_Module/CompilerModels/CompilerModels.html#abi_keys]
#  with all compilation units compiled by the specified executable.
#  - The project-compiler configuration file
#    [doc/html/Preferences/PreferencesIndex.html#project_compiler]
#    loaded during the parse phase will include the ABI key in its
#    name. This allows users to specify different configuration
#    settings for different ABIs.
#  - CodeSonar will prefer to link compilation units with the same
#    ABI key when constructing the CodeSonar project.
#  - When a single source file is compiled multiple times with
#    different ABI keys, one instance will be kept for each key.
#  - Keys are only used within CodeSonar.
#  - Keys can be arbitrary, user-selected strings; some compiler
#    models also provide special model-specific formats that can be
#    used to convey additional information to the compiler model
#    (see individual compiler model documentation pages for
#    details). If you specify arbitrary ABI keys, we recommend that
#    you select them so that they don't conflict with compiler model
#    names
#    [doc/html/C_Module/CompilerModels/CompilerModels.html#preinstalled]
#    or with the special model-specific formats.
#
#  Later COMPILER_MODELS rules can supersede earlier ones. For
#  example, if the configuration file contains the following rule
#  sequence:
#    COMPILER_MODELS += a/b/mycc -> cl:AB
#    COMPILER_MODELS += c/d/mycc -> cl:CD
#    COMPILER_MODELS += mycc -> cl:EF
#  then all compilations with mycc, including compilations with
#  a/b/mycc and c/d/mycc, will be associated with compiler model cl
#  and ABI key EF.
#
# Notes
#  On Windows, the file extension (which should be .exe or .com) for
#  the executable is not optional. Some examples are given below.
#  The range of the map is the list of 'model used' entries in the
#  appropriate Compilers Recognized
#  [doc/html/C_Module/CompilerModels/CompilersRecognized.html]
#  table. Users can also author new compiler models in C++, thereby
#  expanding the range.
#
#  Windows default models:
#    COMPILER_MODELS += bcc32.exe -> borland
#    COMPILER_MODELS += cl.exe -> cl
#    COMPILER_MODELS += cl30.exe -> cl30
#    COMPILER_MODELS += cl6x.exe -> cl6x
#    COMPILER_MODELS += armcl.exe -> cl6x
#    COMPILER_MODELS += cl430.exe -> cl6x
#    COMPILER_MODELS += cl470.exe -> cl6x
#    COMPILER_MODELS += cl55.exe -> cl6x
#    COMPILER_MODELS += cl2000.exe -> cl6x
#    COMPILER_MODELS += clang.exe -> cc
#    COMPILER_MODELS += clarm.exe -> cl
#    COMPILER_MODELS += clmips.exe -> cl
#    COMPILER_MODELS += clsh.exe -> cl
#    COMPILER_MODELS += clthumb.exe -> cl
#    COMPILER_MODELS += gcc.exe -> gcc
#    COMPILER_MODELS += g++.exe -> gpp
#    COMPILER_MODELS += gcc-3.exe -> gcc
#    COMPILER_MODELS += g++-3.exe -> gpp
#    COMPILER_MODELS += gcc-4.exe -> gcc
#    COMPILER_MODELS += g++-4.exe -> gpp
#    COMPILER_MODELS += gpp.exe -> gpp
#    COMPILER_MODELS += gxx.exe -> gpp
#    COMPILER_MODELS += i686-pc-mingw32-gcc.exe -> gcc
#    COMPILER_MODELS += i686-pc-mingw32-g++.exe -> gpp
#    COMPILER_MODELS += x86_64-pc-mingw32-gcc.exe -> gcc
#    COMPILER_MODELS += x86_64-pc-mingw32-g++.exe -> gpp
#    COMPILER_MODELS += ecomppc.exe -> ecomppc
#    COMPILER_MODELS += ecomx86.exe -> ecomppc
#    COMPILER_MODELS += ecomarm.exe -> ecomppc
#    COMPILER_MODELS += ecom86.exe -> ecomppc
#    COMPILER_MODELS += ecom68.exe -> ecomppc
#    COMPILER_MODELS += ecom800.exe -> ecomppc
#    COMPILER_MODELS += ecommip.exe -> ecomppc
#    COMPILER_MODELS += armcc.exe -> armcc
#    COMPILER_MODELS += armcpp.exe -> armcpp
#    COMPILER_MODELS += tcc.exe -> armcc
#    COMPILER_MODELS += tcpp.exe -> armcpp
#    COMPILER_MODELS += iccarm.exe -> iar
#    COMPILER_MODELS += icc430.exe -> iar
#    COMPILER_MODELS += iccm32c.exe -> iar
#    COMPILER_MODELS += cp166.exe -> tasking
#    COMPILER_MODELS += cpcp.exe -> tasking
#    COMPILER_MODELS += ctc.exe -> tasking
#    COMPILER_MODELS += cptc.exe -> tasking
#    COMPILER_MODELS += mcpcom.exe -> mcpcom
#    COMPILER_MODELS += cw-cc.exe -> xcc
#    COMPILER_MODELS += picc.exe -> picc
#    COMPILER_MODELS += shc.exe -> shc
#    COMPILER_MODELS += shcpp.exe -> shcpp
#    COMPILER_MODELS += ccrx.exe -> ccrx
#    COMPILER_MODELS += ch38.exe -> ch38
#    COMPILER_MODELS += dcc.exe -> dcc
#    COMPILER_MODELS += dplus.exe -> dcc
#    COMPILER_MODELS += null-cc.exe -> xcc
#    COMPILER_MODELS += qcc.exe -> qcc
#    COMPILER_MODELS += cc21k.exe -> visualdsp
#    COMPILER_MODELS += ccts.exe -> visualdsp
#    COMPILER_MODELS += ccblkfn.exe -> visualdsp
#    COMPILER_MODELS += cvavr-null.exe -> cvavr
#    COMPILER_MODELS += arm-none-eabi-gcc.exe -> gcc
#    COMPILER_MODELS += arm-none-eabi-g++.exe -> gpp
#
#  POSIX default models:
#    COMPILER_MODELS += gcc -> gcc
#    COMPILER_MODELS += gxx -> gpp
#    COMPILER_MODELS += g++ -> gpp
#    COMPILER_MODELS += gpp -> gpp
#    COMPILER_MODELS += c++ -> gpp
#    COMPILER_MODELS += cc -> cc
#    COMPILER_MODELS += clang -> cc
#    COMPILER_MODELS += null-cc -> xcc
#    COMPILER_MODELS += dcc -> dcc
#    COMPILER_MODELS += dplus -> dcc
#    COMPILER_MODELS += ecomppc -> ecomppc
#    COMPILER_MODELS += ecomx86 -> ecomppc
#    COMPILER_MODELS += ecom86 -> ecomppc
#    COMPILER_MODELS += ecom68 -> ecomppc
#    COMPILER_MODELS += ecomarm -> ecomppc
#    COMPILER_MODELS += ecom800 -> ecomppc
#    COMPILER_MODELS += ecommip -> ecomppc
#    COMPILER_MODELS += mcpcom -> mcpcom
#    COMPILER_MODELS += shc -> shc
#    COMPILER_MODELS += shcpp -> shcpp
#    COMPILER_MODELS += ch38 -> ch38
#    COMPILER_MODELS += armcc -> armcc
#    COMPILER_MODELS += armcpp -> armcpp
#    COMPILER_MODELS += tcc -> armcc
#    COMPILER_MODELS += tcpp -> armcpp
#    COMPILER_MODELS += qcc -> qcc
#    COMPILER_MODELS += QCC -> qcc
#    COMPILER_MODELS += arm-none-eabi-gcc -> gcc
#    COMPILER_MODELS += arm-none-eabi-g++ -> gpp
#
#  On Solaris, in addition to POSIX default models:
#    COMPILER_MODELS += CC -> acpp
#
#  To activate the Hi-Tech compiler model for Linux, Solaris, and OS
#  X:
#    COMPILER_MODELS += picc -> picc
#
#  To activate the IAR compiler models for Linux, Solaris, and OS X:
#    COMPILER_MODELS += iccarm -> iar
#    COMPILER_MODELS += iccm32c -> iar
#    COMPILER_MODELS += icc430 -> iar
#
#  To use the IAR compiler model for other IAR compilers, specify a
#  similar COMPILER_MODELS rule for your compiler executable name.
#  For example, if you are using icc8051 on Linux, Solaris, or OS X:
#    COMPILER_MODELS += icc8051 -> iar
#
#  To activate the TI CodeComposer compiler models for non-Windows
#  systems:
#    COMPILER_MODELS += cl6x -> cl6x
#    COMPILER_MODELS += cl30 -> cl30x
#    COMPILER_MODELS += armcl -> cl6x
#    COMPILER_MODELS += cl430 -> cl6x
#    COMPILER_MODELS += cl470 -> cl6x
#    COMPILER_MODELS += cl55 -> cl6x
#    COMPILER_MODELS += cl2000 -> cl6x
#
#  To activate the MPLab C18 C Compiler model (mcc18):
#    COMPILER_MODELS += mcc18.exe -> mcc18
#
#  To activate the Freescale CodeWarrior for HC12 compiler model for
#  Linux, Solaris, and OS X:
#    COMPILER_MODELS += chc12 -> chc12
#
#  To activate the Freescale CodeWarrior for HC12 compiler model for
#  Windows:
#    COMPILER_MODELS += chc12.exe -> chc12
#
#  To activate Wind River compiler models, use the following. This
#  will disable recognition of some Green Hills compilers because of
#  an executable name conflict.
#
#    (Windows)
#    COMPILER_MODELS += ccppc.exe -> ccppc
#    COMPILER_MODELS += c++ppc.exe -> c++ppc
#    (other systems)
#    COMPILER_MODELS += ccppc -> ccppc
#    COMPILER_MODELS += c++ppc -> c++ppc
#
#  [Windows only] To activate the Cosmic compiler models, use the
#  following.
#
#    COMPILER_MODELS += cpcorm0.exe -> cosmic
#    COMPILER_MODELS += cpppc.exe -> cosmic
#    COMPILER_MODELS += cpstm8.exe -> cosmic
#    COMPILER_MODELS += cpst7.exe -> cosmic
#
#  Custom Usage Examples
#
#  [Windows] Treat anything named mycc.exe like cl.
#    COMPILER_MODELS += mycc.exe -> cl
#
#  [Windows] Treat c:\compilers\mycc.exe (but not, eg,
#  c:\usr\local\mycc.exe) like cl.
#    COMPILER_MODELS += c:\compilers\mycc.exe -> cl
#
#  [Windows] Treat C:\Program Files (x86)\My IDE v8\bin\mycc.exe
#  like cl. Note that the path must be quoted because it contains
#  spaces.
#    COMPILER_MODELS += "C:\Program Files (x86)\My IDE v8\bin\mycc.exe" -> cl
#
#  [Windows] Treat any executable with path suffix bin\mycc.exe like
#  cl. Note that this will match the path in the previous example,
#  but not (for example) C:\mybin\mycc.exe.
#    COMPILER_MODELS +=  bin\mycc.exe -> cl
#
#  [Windows] Treat anything named mycc.exe like cl. Associate ABI
#  key ABC with any translation units compiled by this compiler.
#    COMPILER_MODELS +=  mycc.exe -> cl:ABC
#
#  [Windows] Handle all compilations with any cl.exe executable
#  using the cl compiler model, using ABI keys to distinguish
#  compilations from certain cl.exe installations.
#    COMPILER_MODELS +=  cl.exe -> cl:default
#    COMPILER_MODELS +=  C:\bin\a\b\cl.exe -> cl:AB
#    COMPILER_MODELS +=  C:\bin\c\d\cl.exe -> cl:CD
#
#  [Posix] Treat anything named mycc like gcc.
#    COMPILER_MODELS +=  mycc -> gcc
#
#  [Posix] Treat /tmp/mycc (an absolute path) like gcc.
#    COMPILER_MODELS += /tmp/mycc -> gcc
#
#  [Posix] Treat any executable with path suffix tmp/mycc like gcc.
#  Note that this will match the path in the previous example, but
#  not (for example) /u/mytmp/mycc.
#    COMPILER_MODELS += tmp/mycc -> gcc
#
#  [Posix] Handle all compilations with any gcc executable using the
#  gcc compiler model, using ABI keys to distinguish compilations
#  from certain gcc installations.
#    COMPILER_MODELS +=  gcc -> gcc:default
#    COMPILER_MODELS += /a/b/gcc -> gcc:AB
#    COMPILER_MODELS += /c/d/gcc -> gcc:CD
#
#  [ANCHOR random_filename] If your build system generates randomly-
#  named files each time it runs, you may be able to use a
#  combination of COMPILER_MODELS and DISABLED_COMPILERS to model
#  compilation without incurring a separate license cost for each
#  randomly-named file.
#
#  For example, suppose your regular software built uses a tool
#  called mybuild, whose behavior is such that
#    mybuild gcc [options] -c A.c
#  creates a randomly-named copy <rname>.c of A.c and then invokes
#    gcc [options] -c <rname>.c
#  Then you can model the compilation as taking place on A.c rather
#  than a succession of <rname>.c using the following pair of rules.
#
#    [Posix]
#    COMPILER_MODELS += mybuild -> gcc
#    DISABLED_COMPILERS += gcc
#    [Windows]
#    COMPILER_MODELS += mybuild.exe -> gcc
#    DISABLED_COMPILERS += gcc.exe


# Parameter DISABLED_COMPILERS
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Purpose
#  Forces the project builder to ignore certain compilers that it
#  would, by default, notice.
#
# Type
#  Whitespace separated list of compiler names (basenames, path
#  prefixes, or full paths).
#
# Behavior
#  Invocations of compilers listed here will be ignored by the
#  project builder.
#
#  Behavior is undefined if the same compiler executable appears in
#  both the COMPILER_MODELS domain and the DISABLED_COMPILERS set.
#
# Notes
#  On Windows, always include the file extension of the executable
#  (which should be .exe or .com).
#
#  A superset of the default compilers appears below.
#
#  Windows:
#    DISABLED_COMPILERS += armcc.exe
#    DISABLED_COMPILERS += armcpp.exe
#    DISABLED_COMPILERS += ch38.exe
#    DISABLED_COMPILERS += cl.exe
#    DISABLED_COMPILERS += cl30.exe
#    DISABLED_COMPILERS += cl6x.exe
#    DISABLED_COMPILERS += clarm.exe
#    DISABLED_COMPILERS += clmips.exe
#    DISABLED_COMPILERS += clsh.exe
#    DISABLED_COMPILERS += clthumb.exe
#    DISABLED_COMPILERS += cw-cc.exe
#    DISABLED_COMPILERS += dcc.exe
#    DISABLED_COMPILERS += dplus.exe
#    DISABLED_COMPILERS += ecom68.exe
#    DISABLED_COMPILERS += ecom86.exe
#    DISABLED_COMPILERS += ecomarm.exe
#    DISABLED_COMPILERS += ecomppc.exe
#    DISABLED_COMPILERS += ecomx86.exe
#    DISABLED_COMPILERS += g++.exe
#    DISABLED_COMPILERS += g++-3.exe
#    DISABLED_COMPILERS += g++-4.exe
#    DISABLED_COMPILERS += gcc.exe
#    DISABLED_COMPILERS += gcc-3.exe
#    DISABLED_COMPILERS += gcc-4.exe
#    DISABLED_COMPILERS += gpp.exe
#    DISABLED_COMPILERS += gxx.exe
#    DISABLED_COMPILERS += iccarm.exe
#    DISABLED_COMPILERS += icc430.exe
#    DISABLED_COMPILERS += iccm32c.exe
#    DISABLED_COMPILERS += mcpcom.exe
#    DISABLED_COMPILERS += null-cc.exe
#    DISABLED_COMPILERS += picc.exe
#    DISABLED_COMPILERS += shc.exe
#    DISABLED_COMPILERS += shcpp.exe
#    DISABLED_COMPILERS += tcc.exe
#    DISABLED_COMPILERS += tcpp.exe
#
#  POSIX:
#    DISABLED_COMPILERS += armcc
#    DISABLED_COMPILERS += armcpp
#    DISABLED_COMPILERS += c++
#    DISABLED_COMPILERS += cc
#    DISABLED_COMPILERS += ccppc
#    DISABLED_COMPILERS += ch38
#    DISABLED_COMPILERS += c++ppc
#    DISABLED_COMPILERS += dcc
#    DISABLED_COMPILERS += dplus
#    DISABLED_COMPILERS += ecomarm
#    DISABLED_COMPILERS += ecom68
#    DISABLED_COMPILERS += ecom86
#    DISABLED_COMPILERS += ecomppc
#    DISABLED_COMPILERS += ecomx86
#    DISABLED_COMPILERS += g++
#    DISABLED_COMPILERS += gcc
#    DISABLED_COMPILERS += gpp
#    DISABLED_COMPILERS += gxx
#    DISABLED_COMPILERS += mcpcom
#    DISABLED_COMPILERS += null-cc
#    DISABLED_COMPILERS += shc
#    DISABLED_COMPILERS += shcpp
#    DISABLED_COMPILERS += armcc
#    DISABLED_COMPILERS += tcc
#    DISABLED_COMPILERS += tcpp
#    


# Parameter HOOK_BLACKLIST
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Purpose
#  Instructs CodeSonar not to monitor certain executables or their
#  subprocesses.
#
# Type
#  Whitespace separated list of program names (basenames, path
#  prefixes, or full paths).
#
# Behavior
#  Some programs contain security measures that cause them to fail
#  if they detect they are being monitored. It is beneficial to add
#  such programs to this list.
#
# Notes
#  This parameter has no effect on Windows systems.
#
#  If programs listed here transitively invoke compilers, CodeSonar
#  will not notice those invocations.

#HOOK_BLACKLIST += ibtoold
#HOOK_BLACKLIST += momc
#HOOK_BLACKLIST += mapc
#HOOK_BLACKLIST += ssh
#HOOK_BLACKLIST += rpm
#HOOK_BLACKLIST += chroot

## Some yocto projects (which uses the bitbake build system) fail a
## build if the output log contains the string ERR. It is observed that
## for some do_rootfs step which invokes QEMU
## (https://www.linux-mips.org/wiki/QEMU)
##   ERROR: ld.so: object 'libhookcs.so' from LD_PRELOAD cannot be preloaded
## can show up in the log. This causes the build to fail.
#HOOK_BLACKLIST += qemu-aarch64
#HOOK_BLACKLIST += qemu-arm
## The QEMU Guest Agent is a daemon intended to be run within virtual machines.
## HOOK_BLACKLIST += qemu-ga
#HOOK_BLACKLIST += qemu-i386
## qemu-img allows you to create, convert and modify images offline
## HOOK_BLACKLIST += qemu-img
## QEMU Disk exerciser
## HOOK_BLACKLIST += qemu-io
#HOOK_BLACKLIST += qemu-mips
#HOOK_BLACKLIST += qemu-mips64
#HOOK_BLACKLIST += qemu-mipsel
#HOOK_BLACKLIST += qemu-mips.real
## Export a QEMU disk image using the NBD protocol.
## HOOK_BLACKLIST += qemu-nbd
#HOOK_BLACKLIST += qemu-ppc
#HOOK_BLACKLIST += qemu-system-aarch64
#HOOK_BLACKLIST += qemu-system-arm
#HOOK_BLACKLIST += qemu-system-i386
#HOOK_BLACKLIST += qemu-system-mips
#HOOK_BLACKLIST += qemu-system-mips64
#HOOK_BLACKLIST += qemu-system-mipsel
#HOOK_BLACKLIST += qemu-system-ppc
#HOOK_BLACKLIST += qemu-system-x86_64
#HOOK_BLACKLIST += qemu-x86_64

# Parameter FORCE_ENVIRONMENT
#
# Purpose
#  Specifies whether or not to prevent the software build system
#  (for example, make) from writing over environment variables
#  necessary for proper process hooking on POSIX systems.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  Every time a process calls exec, if any important environment
#  variables (such as LD_PRELOAD, LD_LIBRARY_PATH) have been written
#  over, they will be repaired in the environment used to create the
#  new process.
#
# Notes
#  This parameter has no effect on Windows systems.
#
#  Most build systems do not need this to be set. The most common
#  cause for setting this to "Yes" is a build system that wipes the
#  environment, such as SCons.
#
#  Setting this to "Yes" can prevent build systems from causing
#  compiler invocations to be missed. If you believe source files
#  (compilation units) are missing from your project,
#  COMPILER_MODELS is set correctly, and the compiler is actually
#  getting executed by the build system, then setting this to "Yes"
#  may help. It is slightly invasive and could conceivably cause
#  problems, although none have been observed.
#
#FORCE_ENVIRONMENT = Yes


# Parameter UNIX_TEXT_MODE
#
# Purpose
#  Specifies whether or not to perform crlf -> lf translations on
#  stdout and stderr and do the inverse on stdin.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Notes
#  This parameter is ignored by the Windows build wizard and on non-
#  Windows systems.
#
#  Setting this to "Yes" can be useful if running an interactive
#  Cygwin shell inside a hook command.
#
## UNIX_TEXT_MODE = No


# Parameter INVOKE_COMPILER_FIRST
#
# Purpose
#  Specifies whether or not to invoke the real compiler before
#  invoking the CodeSonar parser.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Notes
#  This parameter is ignored on non-Windows systems. Its only known
#  use is to make sure the parser has access to output files
#  produced by the compiler when using Microsoft's #import
#  directive.
#
## INVOKE_COMPILER_FIRST = Yes


# Parameter ALLOW_INCOMPATIBLE_SYMANTEC
#
# Purpose
#  Specifies whether CodeSonar should be willing to run beside
#  known-incompatible versions of Symantec Endpoint Protection.
#  Certain versions of Symantec Endpoint Protection can trigger
#  Windows kernel deadlock in the presence of CodeSonar.
#
# Type
#  { Yes, No }
#
# Behavior
#  - No : CodeSonar will check for the existence of the Symantec
#    Endpoint Protection's Application and Device Control component
#    (sysplant.sys). If a version between 12.1.3001.165 -
#    12.1.4xxx.xxx is installed, then CodeSonar will refuse to run.
#  - Yes : CodeSonar will not perform this check. We do not
#    recommend this setting, since it may result in kernel deadlock.
#    Either upgrade to SEP 12 RU5 or later, or uninstall the
#    Application and Device Control component to safely work around
#    the issue. Disabling SEP has no effect.

#ALLOW_INCOMPATIBLE_SYMANTEC = No


# Parameter HOLD_STDIO
#
# Purpose
#  Specifies whether or not to hold the stdout, stderr, and stdin
#  streams open.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  When this is set to "Yes", the stdout, stderr, and stdin streams
#  will be kept open even after the real compiler closes them or
#  exits.
#
# Notes
#  This setting has no effect on non-Windows operating systems.
#
#  Setting this to "Yes" can cause deadlock if closing one of these
#  streams signals something to another process.
#
#  Setting this to "Yes" can reduce the probability of exercising
#  race conditions in the IAR Embedded Workbench IDE. If that IDE is
#  producing the spurious and harmless error message "Error while
#  running C/C++ Compiler" then setting this to "Yes" may prevent
#  the message. It has also been observed that setting
#  INVOKE_COMPILER_FIRST to "No" while running an expensive program
#  in the background can prevent the error message.
#
## HOLD_STDIO = No


# Parameter CREATE_CONSOLE
#
# Purpose
#  Specifies whether or not to always create a hidden conhost.exe
#  process when one does not already exist when launching compiler
#  processes.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  By default, when creating a new compiler process after
#  intercepting a compiler invocation, CodeSonar will use the
#  DETACHED_PROCESS Windows API flag if it detects that the current
#  process has no associated console. This prevents CodeSonar from
#  creating many unecessary conhost.exe processes in most cases.
#  However, in some cases this can cause compilers that launch their
#  own subprocesses to unintentionally create new console processes
#  of their own.
#
#  If you observe console windows popping up when running CodeSonar
#  that do not normally show up during the build, then setting this
#  option to Yes can help.
#
# Notes
#  This setting has no effect on non-Windows operating systems.
#
## CREATE_CONSOLE = No


# Parameter CODEWARRIOR_INSTALLS
#
# Purpose
#  For use with CodeWarrior installations that use DLLs (see
#  CodeSonar with CodeWarrior: DLL Approach
#  [doc/html/C_Module/CompilerModels/CompilerModelsCodeWarriorPlugin.html]):
#  specifies CodeWarrior install directories so that compiler IDE
#  plug-ins can be identified for interception.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  Whitespace-separated list of directories
#
# Behavior
#  Invocations of all compiler IDE plug-ins of CodeWarrior install
#  directories in this list will be intercepted.
#
# Notes
#  Read about using CodeSonar with CodeWarrior
#  [doc/html/C_Module/CompilerModels/CompilerModelsCodeWarrior.html]
#  before basing a project on a CodeWarrior build.
#
#  This parameter is ignored by the Windows project builder GUI and
#  on non-Windows systems.
#
#  To configure interception of some subset of the compiler plug-
#  ins, use CODEWARRIOR_PLUGINS instead. If you are running from the
#  command line and neither CODEWARRIOR_INSTALLS nor
#  CODEWARRIOR_PLUGINS is specified in the template or project
#  configuration file, then the settings specified at install time
#  will be used.
#
#  For example:
#    CODEWARRIOR_INSTALLS += "C:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.0"


# Parameter CODEWARRIOR_PLUGINS
#
# Purpose
#  For use with CodeWarrior installations that use DLLs (see
#  CodeSonar with CodeWarrior: DLL Approach
#  [doc/html/C_Module/CompilerModels/CompilerModelsCodeWarriorPlugin.html]):
#  specifies individual CodeWarrior compiler IDE plug-ins for
#  interception.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  Whitespace-separated list of directories
#
# Behavior
#  Invocations of CodeWarrior compiler IDE plug-ins in this
#  parameter will be intercepted.
#
# Notes
#  Read about using CodeSonar with CodeWarrior
#  [doc/html/C_Module/CompilerModels/CompilerModelsCodeWarrior.html]
#  before basing a project on a CodeWarrior build.
#
#  This parameter is ignored by the Windows project builder GUI and
#  on non-Windows systems.
#
#  To configure interception of all CodeWarrior IDE compiler plug-
#  ins, use the CODEWARRIOR_INSTALLS parameter instead. If you are
#  running from the command line and neither CODEWARRIOR_INSTALLS
#  nor CODEWARRIOR_PLUGINS is specified in the template or project
#  configuration file, then the settings specified at install time
#  will be used.
#
#  For example:
#    CODEWARRIOR_PLUGINS += "C:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.0\bin\plugins\compiler\MCFCCompiler.dll"


# Parameter IGNORED_COMPILATIONS
#
# Purpose
#  Specifies files whose compilations should be ignored.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  If a file in a compilation command has a path that matches the
#  regular expression, that compilation will be ignored.
#
# Notes
#  This option cannot be used to ignore header files. Only top level
#  files (e.g., .c and .cpp) can be ignored. CodeSonar users looking
#  to discard warnings in certain include files might be interested
#  in the WARNING_FILTER "ignore dir" examples, or the
#  SYSTEM_INCLUDE_PATHS setting.
#
#  For example,
#    IGNORED_COMPILATIONS += ^.*foo\.c$
#  specifies that compilations of files whose paths end in "foo.c"
#  should be ignored. This includes compilations of "foo.c",
#  "/usr/local/foo.c", and "mydir/myfoo.c", but not "foo.cpp".
#
#  You can specify as many IGNORED_COMPILATIONS entries as you want.
#
#  Note that backslashes used as directory separators need to be
#  escaped, so a rule containing a Windows path will look
#  (something) like the following:
#    IGNORED_COMPILATIONS += bar\\foo\.c
#
#  The forward slashes used as directory separators on other systems
#  do not require escaping:
#    IGNORED_COMPILATIONS += bar/foo\.c
#


# Parameter IGNORED_COMPILATION_COMMANDS
#
# Purpose
#  Specifies compilation commands that should be ignored.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string
#
# Behavior
#  Ignore compilation command lines matching the specified string.
#
# Notes
#  This can be significantly faster than using IGNORED_COMPILATIONS,
#  but is not as precise. IGNORED_COMPILATIONS could ignore foo.c
#  and not bar.c in the command "gcc -c foo.c bar.c", but
#  IGNORED_COMPILATION_COMMANDS must either accept the entire
#  command or none of it.
#
#  For example:
#    IGNORED_COMPILATION_COMMANDS += gcc -c foo.c


# Parameter ERROR_LIMIT_PER_COMPILATION
#
# Purpose
#  Specifies the maximum number of parse errors allowed in a
#  compilation before the compilation is excluded from the analysis.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  If the percentage of project compilation units exceeding this
#  limit is greater than MINIMUM_GOOD_COMPILATIONS, no analysis will
#  take place.
#
#ERROR_LIMIT_PER_COMPILATION = 30


# Parameter MINIMUM_GOOD_COMPILATIONS
#
# Purpose
#  At least this percentage of the project compilation units must be
#  "good compilations", meaning that they have no more parse errors
#  than the limit specified by ERROR_LIMIT_PER_COMPILATION.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer between 0 and 100, inclusive
#
# Behavior
#  If the percentage of good compilations in the project is below
#  this value, the analysis will not proceed.
#
#MINIMUM_GOOD_COMPILATIONS = 80


# Parameter MALLOC_FAILURE_BEHAVIOR
#
# Purpose
#  Specifies the treatment of allocators such as
#  malloc/calloc/alloca/realloc/new/new[] on failure.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  { RETURN_NULL, DOESNT_FAIL }
#
# Behavior
#  - RETURN_NULL : allocators are modeled as returning NULL on
#    failure
#  - DOESNT_FAIL : allocators are assumed never to fail.This setting
#    is mainly useful for users who don't care what their software
#    does when it runs out of memory.
#
# Notes
#  We do not recommend changing the MALLOC_FAILURE_BEHAVIOR setting
#  between incremental analyses because the different handling of
#  allocators in the parent and child analyses is likely to confuse
#  users: re-analyzed (and newly-analyzed) allocators will be
#  handled as specified by the updated setting, but handling for any
#  other allocators in the project will reflect the previous
#  setting.

#MALLOC_FAILURE_BEHAVIOR = RETURN_NULL
## MALLOC_FAILURE_BEHAVIOR = DOESNT_FAIL


# Parameter NEW_FAILURE_BEHAVIOR
#
# Purpose
#  Specifies the treatment of new/new[] on failure.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  { EXCEPTION, RETURN_NULL, DOESNT_FAIL }
#
# Behavior
#  - EXCEPTION : new/new[] are modeled as throwing an exception on
#    failure
#  - RETURN_NULL : new/new[] are modeled as returning NULL on
#    failure
#  - DOESNT_FAIL : new/new[] are assumed never to fail
#
# Notes
#  MALLOC_FAILURE_BEHAVIOR = DOESNT_FAIL takes precedence over this
#  parameter.
#
#  Different C++ runtimes have different behaviors. We recommend
#  that you write a small test program to see what your compiler
#  does.
#
#  We do not recommend changing the NEW_FAILURE_BEHAVIOR setting
#  between incremental analyses because the different handling of
#  allocators in the parent and child analyses is likely to confuse
#  users. Any new/new[] operators (or allocators modeled in terms of
#  those operators) that are re-analyzed or newly-analyzed will be
#  handled as specified by the updated setting, but the remainder
#  will reflect the previous setting.

#NEW_FAILURE_BEHAVIOR = EXCEPTION
## NEW_FAILURE_BEHAVIOR = RETURN_NULL
## NEW_FAILURE_BEHAVIOR = DOESNT_FAIL


# Parameter MUTEX_FAILURE_BEHAVIOR
#
# Purpose
#  Specifies the treatment of lock acquisition and release functions
#  such as pthread_mutex_lock on failure.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  { RETURN_ERR, DOESNT_FAIL }
#
# Behavior
#  - RETURN_ERR : lock acquire/release functions are modeled as
#    returning an error code on failure
#  - DOESNT_FAIL : lock acquire/release functions are assumed never
#    to fail
#
# Notes
#  It is dangerous to choose DOESNT_FAIL when using an API (such as
#  POSIX threads) that allows lock acquire/release functions to fail
#  spuriously.
#
#  We do not recommend changing the MUTEX_FAILURE_BEHAVIOR setting
#  between incremental analyses because the different handling of
#  lock operations in the parent and child analyses is likely to
#  confuse users: any lock acquisition or release functions that are
#  re-analyzed or newly-analyzed will be handled as specified by the
#  updated setting, but the remainder will reflect the previous
#  setting.
  
#MUTEX_FAILURE_BEHAVIOR = RETURN_ERR
## MUTEX_FAILURE_BEHAVIOR = DOESNT_FAIL


# Parameter INITIALIZER_LIMIT
#
# Purpose
#  Specifies an upper bound on the number of elements in an
#  initializer.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  Initializers containing more elements than this limit will be
#  ignored by the analysis.
#
#  A value of -1 means that there is no limit on initializer size
#
# Notes
#  Very large initializers can significantly affect analysis time.
#
#INITIALIZER_LIMIT = 512


# Parameter AST_DEPTH_LIMIT
#
# Purpose
#  Specifies an upper bound on the depth of expression ASTs
#  [doc/html/API/Descriptions/API_AST.html].
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  For every expression AST, the analysis will only consider those
#  parts of the AST that lie within this limit.
#
#  A value of -1 means that there is no limit.
#
# Notes
#  This is for preventing the front end or the analyzer from
#  exhausting the stack when processing deeply nested expressions.
#  For example, var + var2 + ... with 4000 additions.
#
#  Using "ulimit -s unlimited" in the shell from which the analysis
#  runs will make it possible to use higher values.

#AST_DEPTH_LIMIT = 256


# Parameter NO_IMPLICIT_DEFAULT_FOR_ENUM_SWITCH
#
# Purpose
#  States that an implicit default clause should not be generated
#  when a switch statement is being parsed.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : When a switch statement is being parsed, and there is no
#    default clause in that statement, the switch expression is an
#    enum type, and all of the values of all of the enumerants of
#    that enum type are arguments of cases inside that switch
#    statement, then no implicit default clause is to be generated
#    for that switch statement.
#  - No : When a switch statement is being parsed, and there is no
#    default clause in that statement, then an implicit default
#    clause is to be generated for that switch statement.
#
# Notes
#  This is to prevent the generation of false positives for a
#  missing default clause when it has been demonstrated that the
#  default situation can never occur.
#
#  This code only works for enum types whose values of enumerants
#  are valid signed 64-bit integers.

#NO_IMPLICIT_DEFAULT_FOR_ENUM_SWITCH = No


# Parameter MAX_CFG_NODES
#
# Purpose
#  Specifies an approximate upper bound on the number of CFG nodes a
#  procedure can have.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  - -1 : There is no limit.
#  - N (for N>=0) : The analysis will ignore procedures containing
#    more than N CFG nodes.
#
# Notes
#  Very large procedures can cause CodeSonar to run out of memory.

#MAX_CFG_NODES = 100000


# Parameter MAX_CFG_EDGES
#
# Purpose
#  Specifies an approximate upper bound on the number of CFG edges a
#  procedure can have.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  - -1 : There is no limit.
#  - N (for N>=0) : The analysis will ignore procedures containing
#    more than N CFG edges.
#
#  A value of -1 means that there is no limit.
#
# Notes
#  Very large procedures can cause CodeSonar to run out of memory.

#MAX_CFG_EDGES = 3000000


# Parameter VERBOSITY
#
# Purpose
#  Specifies status message verbosity
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { 0, 1, 2, 3, ..., 10 }
#
# Behavior
#  The higher the VERBOSITY value, the more status messages are
#  issued. If the value is 0 or 1, messages will only be issued for
#  fatal and near-fatal errors.
#
#  When the value is 6 or higher the Native Compilation Details Log
#  will include some trace output for source patching (from
#  directories specified with SOURCE_PATCH_DIRECTORIES) and source
#  replacement (as specified with SOURCE_REPLACE_COMMAND and
#  SOURCE_PATTERN_REPLACEMENT rules).
#
# Notes
#  In general, higher VERBOSITY values will result in longer running
#  time; this effect is particularly marked in the analysis phase.
#  If you are using higher settings to debug source patching or
#  source replacement, we recommend doing the build and analysis in
#  separate phases:
#  - Set VERBOSITY to 6 and build the project with codesonar build
#    [doc/html/Building/HookCommands.html#build].
#  - Use the trace information in the Native Compilation Details Log
#    to perform any necessary debugging, repeating the project build
#    as necessary.
#  - Once you are satisfied that the project has built correctly,
#    set VERBOSITY to a lower value and analyze the project with
#    codesonar analyze
#    [doc/html/Building/HookCommands.html#analyze].

#VERBOSITY = 2


# Parameter BUILD_OPTIONS
#
# Purpose
#  Specifies builder options.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of build options
#
# Behavior
#  See the Options [doc/html/CsurfOptions.html] section for a list
#  of the available options.
#
# Notes
#  CodeSonar users should usually not need to change this.
#
#  To cause the builder to emit more status messages:
#    BUILD_OPTIONS += -verbose 10
#
#BUILD_OPTIONS +=



# Parameter EDG_FRONTEND_OPTIONS_PREPEND
#
# Purpose
#  Specifies front end options to prepend to the front end command
#  line, in front of any CodeSurfer build options specified.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of front-end options
#
# Behavior
#  See section Front-End Options
#  [doc/html/C_Module/CompilerModels/CsurfFrontEndOptions.html] for
#  descriptions of the available options.
#
# Notes
#  The += operator will actually prepend to this preference (in all
#  cases except for other parameters with names of the form
#  *_PREPEND, the += operator appends). This means that if you have
#  two EDG_FRONTEND_OPTIONS_PREPEND += statements in this file, the
#  options in the second statement will be prepended to the options
#  in the first statement.
#
#  If you are using this parameter to define a preprocessor macro
#  whose definition contains spaces, double-quote the definition.
#  For example:
#
#    EDG_FRONTEND_OPTIONS_PREPEND += -DM_INT_TYPE=int
#    EDG_FRONTEND_OPTIONS_PREPEND += -DM_ULONG_TYPE="unsigned long int"

#EDG_FRONTEND_OPTIONS_PREPEND += 


# Parameter EDG_FRONTEND_OPTIONS_APPEND
#
# Purpose
#  Specifies front end options to append to the front end command
#  line.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of front-end options
#
# Behavior
#  See section Front-End Options
#  [doc/html/C_Module/CompilerModels/CsurfFrontEndOptions.html] for
#  descriptions of the available options.
#
# Notes
#  To add mydir to the list of directories searched for include
#  files:
#    EDG_FRONTEND_OPTIONS_APPEND += -Imydir
#
#  To set macro MYMACRO to the empty string (useful if you are
#  getting a parser error complaining that MYMACRO is undefined):
#    EDG_FRONTEND_OPTIONS_APPEND += -DMYMACRO=
#
#  If you are using this parameter to define a preprocessor macro
#  whose definition contains spaces, double-quote the definition.
#  For example:
#
#    EDG_FRONTEND_OPTIONS_APPEND += -DM_CHAR_P_TYPE=char*
#    EDG_FRONTEND_OPTIONS_APPEND += -DM_UINT_TYPE="unsigned int"

#EDG_FRONTEND_OPTIONS_APPEND += 


# Parameter MANAGED_OBJECTS_RESIDENT_LIMIT
#
# Purpose
#  Specifies the amount of memory (in Megabytes) to allocate for
#  managed IR objects.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  When the intermediate representation (IR) of the program being
#  analyzed occupies approximately this much virtual address space,
#  a portion of the IR will be paged out.
#
#  A low value may cause thrashing. A high value may cause the tool
#  to exhaust virtual address space.
#
# Notes
#  Only a subset of the objects in memory are managed under this
#  limit. CodeSonar has been observed to peak at approximately a
#  gigabyte of additional address space on large programs, for
#  default preferences.
#
#MANAGED_OBJECTS_RESIDENT_LIMIT = 256


# Parameter MANAGED_OBJECTS_IO_BUFFER_CAPACITY
#
# Purpose
#  Specifies the amount of memory (in Megabytes) to allocate for IO
#  buffering.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Notes
#  A low value may cause thrashing. A high value may cause the tool
#  to exhaust virtual address space.
#
#MANAGED_OBJECTS_IO_BUFFER_CAPACITY = 128


# Parameter MANAGED_OBJECTS_IO_KERNEL_BUFFERING
#
# Purpose
#  Specifies whether kernel page bufferring should be enabled for
#  files that are buffered in userland (according to
#  MANAGED_OBJECTS_IO_BUFFER_CAPACITY).
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Notes
#  In order to avoid the cost of context switches and OS overhead,
#  I/O buffers for managed objects are stored in userland. Having
#  the OS kernel ALSO buffer the data can be wasteful if the file in
#  question is only being used by one long-running process, since
#  the userland buffer will obviate the need for the kernel buffer.
#  Therefore, it can be desirable to simply disable kernel
#  bufferring in order that the OS's file system buffers can be used
#  for other purposes.
#
#  With short lived processes, parallel analysis, or machines with
#  large amounts of physical memory, kernel bufferring is often
#  beneficial. Kernel bufferring is always enabled for front end
#  processes since they are short lived.
#
#  Disabling kernel bufferring can make other processes on the same
#  computer seem more responsive.
#
#MANAGED_OBJECTS_IO_KERNEL_BUFFERING = Yes


# Parameter MANAGED_OBJECTS_IO_CHECKSUMS
#
# Purpose
#  Specifies whether checksums should be computed/checked when
#  performing I/O. Generally only necessary if the hardware or
#  network is unreliable.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
#MANAGED_OBJECTS_IO_CHECKSUMS = No


# Parameter MANAGED_OBJECTS_PROTECT_PAGES
#
# Purpose
#  Specifies whether in-memory pages of managed objects should be
#  protected when not in immediate use.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Notes
#  This is a debugging feature that typically causes a minor
#  performance hit.
#
#MANAGED_OBJECTS_PROTECT_PAGES = No


# Parameter ZFRAG_POOL_MINIMUM_CAPACITY
#
# Purpose
#  Specifies the amount of memory (in Megabytes) to eagerly reserve
#  for defragmentable allocations.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Notes
#  It is not recommended that users alter this unless advised to do
#  so by GrammaTech.
#
#  Setting this to a large value can help avoid problems where large
#  allocations are eventually unsatisfiable in long-running
#  processes because of memory fragmentation. It interacts with
#  other memory limits in the configuration file.
#
#ZFRAG_POOL_MINIMUM_CAPACITY = 256


# Parameter ZFRAG_POOL_SMALL_THRESHOLD
#
# Purpose
#  Specifies a lower bound on allocation size (in bytes) below which
#  degramentable memory will not be used.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  Defragmentable memory will be used only for allocations greater
#  than or equal to this many bytes.
#
# Notes
#  It is not recommended that users alter this unless advised to do
#  so by GrammaTech.
#
#  Defragmentable allocations have a space overhead of 32 bytes and
#  time overhead linear in the amount of space allocated.
#
#ZFRAG_POOL_SMALL_THRESHOLD = 4096

 
# Parameter MAX_MATCH_LENGTH
#
# Purpose
#  When performing source replacement with
#  SOURCE_PATTERN_REPLACEMENT, this is the size (in bytes) of the
#  buffer used to hold the part of the source file currently
#  undergoing matching.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#  - PRE_PREPROC: Operations on Un-Preprocessed Files
#
# Type
#  integer
#
# Notes
#  File substrings whose length exceeds this value will never be
#  matched, but too high a value can cause performance problems.
#
#MAX_MATCH_LENGTH = 4095


# Parameter SOURCE_PATTERN_REPLACEMENT
#
# Purpose
#  Specifies a regular expression based replacement to be carried
#  out over the source code being analyzed (before preprocessing
#  occurs).
#
# Tags
#  - PRE_PREPROC: Operations on Un-Preprocessed Files
#
# Type
#  A string of the form
#    s/<pattern>/<replacement>/<flag>+
#
#  where:
#
#  - The delimiter '/' can be replaced by any character (except
#    null).
#  - <pattern> is a Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#    describing a pattern that could occur in the source code. The
#    pattern can match multiple-line substrings in the source file.
#    Double-quote <pattern> if you want it to include leading or
#    trailing spaces.
#  - <replacement> is the string that should replace source code
#    substrings that match <pattern>. This can be a multiple-line
#    string. Double-quote <replacement> if you want it to include
#    leading or trailing spaces.
#  - <flag> is a process modifier, corresponding to a Boost regular
#    expression syntax option or flag as shown below.
#
#  Boost regular expression syntax_option_type
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/ref/syntax_option_type.html]
#  correspondences:
#
#    -M    no_mod_m
#    -S    no_mod_s
#    A     awk
#    B     basic
#    C     no_char_classes
#    D     sed
#    E     extended
#    G     grep
#    H     egrep
#    I     icase
#    L     literal
#    N     normal
#    O     collate
#    P     perl
#    Q     bk_plus_qm
#    S     mod_s
#    T     no_intervals
#    X     mod_x
#
#  Boost regular expression match_flag_type
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/ref/match_flag_type.html]
#  correspondences:
#
#    a     match_not_bob
#    c     match_continuous
#    d     match_default
#    e     match_extra
#    fa    format_all
#    fc    format_no_copy
#    fd    format_default
#    ff    format_first_only
#    fl    format_literal
#    fp    format_perl
#    fs    format_sed
#    m     match_single_line
#    n     match_not_null
#    z     match_not_eob
#    $     match_not_eol
#    *     match_any
#    .     match_not_dot_newline
#    <     match_not_bow
#    >     match_not_eow
#    ^     match_not_bol
#
# Notes
#  SOURCE_PATTERN_REPLACEMENT rules are typically used to improve
#  analysis result quality by
#  - removing code that CodeSonar has difficulty understanding, or
#  - adding code that clarifies program behavior, or
#  - both.
#
#  Matching and replacement is carried out within each source file,
#  before preprocessing occurs.
#
#  The updated text is saved in the store: the analysis back end
#  never sees the original code. Note that this means that any error
#  reporting will involve line numbers and text from the updated
#  files.
#
#  If no <pattern> is specified for a SOURCE_PATTERN_REPLACEMENT
#  entry, the entry will be ignored with a warning.
#
#  The '/' character is the standard delimiter, but you can use a
#  different delimiter if necessary. Occurrences of the delimiter
#  inside <replacement> and <flag> must be escaped.
#
#  If you don't wish to use the delimited expression form at all,
#  you can use the combination of SOURCE_PATTERN,
#  SOURCE_REPLACEMENT, and SOURCE_MODIFIERS to specify a regular
#  expression based replacement as described below.
#
#  For example,
#    SOURCE_PATTERN_REPLACEMENT+=s/foo//I
#  specifies that all occurrences of "foo" in the source code,
#  regardless of case, should be deleted. This is exactly equivalent
#  to
#    SOURCE_PATTERN_REPLACEMENT+=s*foo**I
#  (the same expression with a different delimiter), and to
#    SOURCE_PATTERN=foo
#    SOURCE_REPLACEMENT=
#    SOURCE_MODIFIERS=I
#
#  You can specify as many SOURCE_PATTERN_REPLACEMENT entries as you
#  want: replacements will be carried out in the same order that the
#  entries are specified. All SOURCE_PATTERN_REPLACEMENTs will be
#  carried out after all SOURCE_REPLACE_COMMANDs.
#


# Parameter SOURCE_PATTERN
# Parameter SOURCE_REPLACEMENT
# Parameter SOURCE_MODIFIERS
#
# Purpose
#  An alternative to SOURCE_PATTERN_REPLACEMENT for specifying
#  regular expression based replacements in the source code.
#
# Tags
#  - PRE_PREPROC: Operations on Un-Preprocessed Files
#
# Type
#  SOURCE_PATTERN : Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
#  SOURCE_REPLACEMENT : string
#
#  SOURCE_MODIFIERS : one or modifiers as described in the entry for
#  SOURCE_PATTERN_REPLACEMENT
#
# Behavior
#  - SOURCE_PATTERN corresponds to the <pattern> part of a
#    SOURCE_PATTERN_REPLACEMENT expression
#  - SOURCE_REPLACEMENT corresponds to the <replacement> part of a
#    SOURCE_PATTERN_REPLACEMENT expression
#  - SOURCE_MODIFIERS corresponds to the <flag>+ part of a
#    SOURCE_PATTERN_REPLACEMENT expression
#
# Notes
#  For the sake of execution order determination, a
#  SOURCE_PATTERN/SOURCE_REPLACEMENT/SOURCE_MODIFIERS triple is
#  treated as if it is a SOURCE_PATTERN_REPLACEMENT rule whose
#  location is that of the next SOURCE_PATTERN rule, or at the end
#  of the file if there is no such rule.
#
#  A SOURCE_REPLACEMENT entry is associated with the most-recently-
#  seen SOURCE_PATTERN not already associated with a
#  SOURCE_REPLACEMENT.
#
#  A SOURCE_REPLACEMENT or SOURCE_MODIFIERS entry with which no
#  SOURCE_PATTERN can be associated is ignored with a warning.
#
#  A SOURCE_PATTERN with which no SOURCE_REPLACEMENT can be
#  associated will associated with the empty string as its source
#  replacement
#
#  A SOURCE_PATTERN with which no SOURCE_MODIFIERS can be associated
#  will assumed to have no modifiers.
#
#  See the entry for SOURCE_PATTERN_REPLACEMENT for more
#  information, including an example.


# Parameter SOURCE_REPLACE_COMMAND
#
# Purpose
#  Specify a text-replacement command to be executed on each source
#  file being analyzed (before preprocessing occurs).
#
# Tags
#  - PRE_PREPROC: Operations on Un-Preprocessed Files
#
# Type
#  A string corresponding to a command that reads from stdin and
#  writes to stdout.
#
# Notes
#  Use this parameter to specify a substring replacement command to
#  execute on the source files before preprocessing occurs.
#
#  For example,
#    SOURCE_REPLACE_COMMAND+=sed -e 's#@ *0x[0-9a-fA-F][0-9a-fA-F]*#/* CSURF: At removed */#'
#  specifies that all strings consisting of "@" followed by zero or
#  more spaces followed by a hexadecimal number should be replaced
#  by a comment reading "/* CSURF: At removed */"
#
#  You can specify as many SOURCE_REPLACE_COMMAND entries as you
#  want: replacements will be carried out in the same order that the
#  entries are specified.
#
#  All replacements specified with SOURCE_REPLACE_COMMAND will be
#  carried out before any replacements specified with
#  SOURCE_PATTERN_REPLACEMENT (or SOURCE_PATTERN,
#  SOURCE_REPLACEMENT, SOURCE_MODIFIERS).
#
#  Here is an example of how to convert from a popular shift JIS
#  variant to UTF8:
#    SOURCE_REPLACE_COMMAND += $GTHOME/third-party/apr-iconv/inst/bin/apriconv -f cp932 -t utf-8


# Parameter PREPROCESS_IF_FAIL
#
# Purpose
#  Specifies whether or not preprocessed versions of compilation
#  units containing parse errors will be saved.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Notes
#  If environment variable CS_PREPROCESS_IF_FAIL is set, its value
#  will override the setting of this parameter.
#
#PREPROCESS_IF_FAIL = Yes


# Parameter PREPROCESS_ALWAYS
#
# Purpose
#  Specifies whether or not preprocessed versions of all compilation
#  units will be saved.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Notes
#  If environment variable CS_PREPROCESS_ALWAYS is set, its value
#  will override the setting of this parameter.
#
#PREPROCESS_ALWAYS = No


# Parameter HOOK_LOG
#
# Purpose
#  Specifies a log file for hook* sub-commands.
#
# Tags
#  - BUILD_OUTPUT: Additional Outputs from the Build/Analysis
#
# Type
#  file path
#
# Behavior
#  All process invocations inside a build, analyze, hook, hook-
#  build, hook-html, or hook-start sub-command will be logged to the
#  specified file.
#
# Notes
#  For example:
#    HOOK_LOG = /PATH/TO/log_file
#
#  This parameter has no effect on Windows systems.
#
#  If environment variable CS_HOOK_LOG is set, its value will
#  override the setting of this parameter.
#


# Parameter BADFS_NOSLEEP
#
# Purpose
#  Specifies whether or not to give users a chance to stop the build
#  when we detect that the file system the project is being put on
#  could cause reliability or performance problems.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Notes
#  If environment variable GT_BADFS_NOSLEEP is set, its value will
#  override the setting of this parameter.
#BADFS_NOSLEEP = No


# Parameter FATSTATS_DUMP_FILE
#
# Purpose
#  Specifies an output file for certain diagnostic information.
#
# Tags
#  - BUILD_OUTPUT: Additional Outputs from the Build/Analysis
#
# Type
#  file path
#
# Notes
#  If environment variable FATSTATS_DUMP_FILE is set, its value will
#  override the setting of this parameter.
#
#  For example:
#    FATSTATS_DUMP_FILE = /PATH/TO/dump_file


# Parameter MAX_CONCURRENT_PARSE_PROCESSES
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Purpose
#  Limits the number of concurrent parse processes. Note that
#  concurrent parsing only occurs insofar as your normal build
#  system invokes the compiler concurrently.
#
# Type
#  integer
#
# Notes
#  This limit is necessary because each concurrent compilation
#  contributes to 5 files, and eventually the analysis needs to open
#  all files simultaneously (estimated at 50 + 5 *
#  NUMBER_OF_CONCURRENT_PARSES). Most systems have various limits on
#  the number of files a process can open. Typical file descriptor
#  limits for this platform are:
#  - getrlimit(RLIMIT_NOFILE) = 1024
#  - GrammaTech-Internal Limit = 4096
#
#  Increasing this value may cause the product to exhaust available
#  file descriptors. Environments with low ulimits may need to
#  decrease this value.
#
#MAX_CONCURRENT_PARSE_PROCESSES = 582


# Parameter PROCEDURE_METRIC_TIMEOUT
#
# Purpose
#  Seconds spent computing a metric for a single procedure before
#  the operation is aborted.
#
# Type
#  integer
#
# Behavior
#  A value of -1 disables the timeout. Values of 0 or greater
#  specify the maximum number of seconds (elapsed time) to spend
#  computing a single procedure metric value. If the timeout occurs
#  for a given procedure and metric, no metric value will be
#  reported for that procedure and metric.
#
# Notes
#  Only applies to the following metrics:
#  - Module Design Complexity (ivG)
#  - Essential Complexity (evG)
#
#PROCEDURE_METRIC_TIMEOUT = 60


# Parameter COMPILER_MODEL_PLUGINS
#
# Purpose
#  Provide paths to additional compiler model plugins.
#
# Type
#  string (representing a file path)
#
# Notes
#  CodeSonar will search in csurf/lib directory for user compiler
#  models, then examine each compiler model specified in
#  COMPILER_MODEL_PLUGINS. Compiler model plug-in names are prefixed
#  with "lib". User compiler models override builtin compiler models
#  that ship with CodeSonar.
#
#  For example:
#    COMPILER_MODEL_PLUGINS += /PATH/TO/libsamplecm.so
#  Will add the compiler model samplecm.

# Parameter SEND_HOOK_LOG_TO_HUB
#
# Purpose
#  Specifies whether or not native compilation log information will
#  be sent to the hub.
#
# Tags
#  - BUILD_OUTPUT: Additional Outputs from the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : Native compilation log information will be sent to the
#    hub. Parse Logs/Parse Error Log
#    [doc/html/GUI/GUI_Log_Parse.html] pages will show compilation
#    counts, and provide links to Native Compilation Details Logs
#    [doc/html/GUI/GUI_Log_Native_Compilation_Details.html]. If
#    SEND_PARSE_LOG_TO_HUB=Yes, they will also provide links to
#    Parse Details Logs [doc/html/GUI/GUI_Log_Parse_Details.html].
#  - No : Native compilation log information will not be sent to the
#    hub. The parse phase summary in Parse Logs/Parse Error Log
#    [doc/html/GUI/GUI_Log_Parse.html] pages will show zero counts
#    for all result types, regardless of the actual number of
#    compilations and their outcomes, and will contain no logging
#    information or links to Native Compilation Details Logs
#    [doc/html/GUI/GUI_Log_Native_Compilation_Details.html] or Parse
#    Details Logs [doc/html/GUI/GUI_Log_Parse_Details.html].
#
# Notes
#  Setting this to No will speed up the parse phase.
#
#  If set to No, SEND_PARSE_LOG_TO_HUB will be disabled, too.

#SEND_HOOK_LOG_TO_HUB = Yes


# Parameter SEND_PARSE_LOG_TO_HUB
#
# Purpose
#  Specifies whether or not Parse Details Logs
#  [doc/html/GUI/GUI_Log_Parse_Details.html] will be sent to the
#  hub.
#
# Tags
#  - BUILD_OUTPUT: Additional Outputs from the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : (provided SEND_HOOK_LOG_TO_HUB=Yes) Parse Details Logs
#    [doc/html/GUI/GUI_Log_Parse_Details.html] will be sent to the
#    hub and linked from the corresponding Parse Logs/Parse Error
#    Logs [doc/html/GUI/GUI_Log_Parse.html].
#  - No : Parse details logs will not be sent to the hub. Parse
#    Logs/Parse Error Logs [doc/html/GUI/GUI_Log_Parse.html] will
#    not provide links to Parse Details Logs
#    [doc/html/GUI/GUI_Log_Parse_Details.html]; they will still
#    provide links to Native Compilation Details Logs
#    [doc/html/GUI/GUI_Log_Native_Compilation_Details.html] if
#    SEND_HOOK_LOG_TO_HUB=Yes.
#
# Notes
#  Setting this to No will speed up the parse phase.
#
#  If SEND_HOOK_LOG_TO_HUB=No, CodeSonar behaves as if
#  SEND_PARSE_LOG_TO_HUB=No (regardless of its actual setting).

#SEND_PARSE_LOG_TO_HUB = Yes


# Parameter SOURCE_PATCH_DIRECTORIES
#
# Purpose
#  Specifies directories under which patches to source are located.
#
# Tags
#  - PRE_PREPROC: Operations on Un-Preprocessed Files
#
# Type
#  string
#
# Behavior
#  For every directory D specified with SOURCE_PATCH_DIRECTORIES,
#  patch files in subdirectory D/fname.x/ are applied to the source
#  file named fname.x, where fname.x is the source file name as
#  specified in the build command or #include statements, before any
#  redirection (such as symbolic link resolution).
#  - fname.x/ must be a direct subdirectory of D - it cannot be more
#    deeply nested.
#  - All patches in any such D/fname.x/ are applied to fname.x.
#    There could be several such patches for a given file, whether
#    because there are multiple SOURCE_PATCH_DIRECTORIES rules,
#    because a single fname.x/ directory contains multiple patches,
#    or both. The success or failure of any individual application
#    does not affect the application of other patches.
#  - If any part of a patch file fails, no part of that file is
#    applied.
#  - If there are multiple SOURCE_PATCH_DIRECTORIES rules, the
#    directories are processed in reverse order: patches from the
#    directory specified by the last SOURCE_PATCH_DIRECTORIES rule
#    are applied first.
#
#  The successful application of one patch does not preclude
#  attempts to subsequently apply additional patches: Every matching
#  patch is attempted.
#
#  CodeSonar will instantiate variable $GTHOME with the path to the
#  CodeSonar installation.
#
# Notes
#  This process is independent of the names of the patch files
#  themselves - only the subdirectory name matters. Similarly, any
#  from-file and to-file filenames specified in a patch file are
#  ignored.
#

#SOURCE_PATCH_DIRECTORIES += $GTHOME/codesonar/libmodels/header_patches


# Parameter INCREMENTAL_BUILD
#
# Purpose
#  Specifies whether or not the build/analysis will be incremental.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  Let P be the name of the project. Then behavior is as follows.
#  - Yes : Incrementality will be enabled for this build/analysis of
#    P and all its descendant builds/analyses. If the project
#    directory already contains a P.prj_files/ subdirectory, the
#    current build/analysis will be an incremental child of the
#    corresponding analysis, otherwise it will be a new base
#    analysis.
#  - No : Incrementality will not be enabled for this build/analysis
#    - it will not have a parent, and cannot have any descendants.
#    If the underlying software project is not being fully rebuilt,
#    the CodeSonar project (and therefore any analysis of the
#    project) will reflect only those parts that are being built.

#INCREMENTAL_BUILD = Yes


# Parameter DRY_RUN
#
# Purpose
#  Dry runs are useful for counting lines and locating parse errors
#  without running the CodeSonar analysis, and therefore without
#  consuming licensed lines.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#  - INCREMENTAL_NOCHANGE: Do Not Change Between Incremental
#    Analyses
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will perform a "dry run" - it will count lines
#    and report parse errors, but not perform the CodeSonar
#    analysis. Because the analysis is not performed, no warnings
#    are issued.
#  - No : CodeSonar will perform the full build/analysis based on
#    the specified build command.
#
# Notes
#  It can be useful to perform a dry run on a project before
#  analyzing it to see whether it will exhaust your license (without
#  actually exhausting your license).
#
#  Dry run results are presented in an Analysis page in the Web GUI.
#  See Analysis: Dry Runs [doc/html/GUI/GUI_Analysis.html#dry_runs]
#  for more information.
#
#  CodeSonar does not require a license to perform a dry run.
#
#  Mixing dry runs and analysis runs for the same .prj_files
#  directory (that is, the same project name) is not supported.
#
#  Do not use DRY_RUN if the hub is running version 3.5p1 or
#  earlier: older hubs do not understand this parameter and will
#  consume licensed lines regardless of its setting.

#DRY_RUN = No


# Parameter HUB_ADDRESS
#
# Purpose
#  Specifies the hub address CodeSonar should use.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  String of the form <host>:<port>
#
# Behavior
#  CodeSonar will use the specified hub address.
#  - If an address is specified on the command line, then it takes
#    precedence.
#  - The HUB_ADDRESS setting takes precedence over the CODESONAR_HUB
#    environment variable.
#  - Setting HUB_ADDRESS in template.conf affects the following
#    codesonar commands [doc/html/Workings/codesonar_Command.html]:
#    analyze, build, generate-hub-cert, hub-info, hub-start, hub-
#    stop, relocate.
#  - Setting HUB_ADDRESS in any other configuration file
#    [doc/html/Preferences/PreferencesIndex.html#overview] affects
#    only the following commands, and only if they are using that
#    file: analyze, build, relocate.
#
# Notes
#  For example:
#    HUB_ADDRESS = 127.0.0.1:7340
#    HUB_ADDRESS = 0.0.0.0:7340
#    HUB_ADDRESS = [::1]:7340
#    HUB_ADDRESS = [::]:7340
#
#  This parameter is ignored by the CodeSonar Windows build wizard.
#

## HUB_ADDRESS = 127.0.0.1:7340


# Parameter ANALYSIS_NAME
#
# Purpose
#  Specifies a name for the analysis.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  string
#
# Behavior
#  CodeSonar will label the analysis with the specified name. If a
#  name is specified on the command line, then it takes precedence.
#  Different analyses of the same project may have different names
#  (e.g., to distinguish different versions).
#
# Notes
#  For example:
#    ANALYSIS_NAME = Bob's Project Revision 472
#
#  CodeSonar will generate a name for the analysis if none is
#  specified.
#


# Parameter USE_SERVICES
#
# Purpose
#  [Windows only] Specifies whether or not the CodeSonar launch
#  daemon process will be created as a Windows service.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : any launch daemon started by "codesonar analyze" will be
#    created as a Windows service, unless the -no-services option is
#    specified.
#
#  - No : launch daemons started by "codesonar analyze" will not be
#    created as Windows services. This means that Windows will kill
#    launch daemon processes when the user logs out, unless those
#    processes were started from the Scheduled Tasks panel or by
#    another Windows service.
#
# Notes
#  This parameter is ignored by the CodeSonar Windows build wizard
#  and by the "codesonar install-launchd" command.
#
#  This parameter has no effect on non-Windows systems.
#
#  For example:
#    USE_SERVICES = Yes

## USE_SERVICES = Yes


# Parameter FOREGROUND
#
# Purpose
#  Specifies whether or not a "codesonar analyze" command will run
#  the analysis in the codesonar analyze process itself.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : the "codesonar analyze" command runs the analysis itself.
#  - No : a separate background process runs the analysis after
#    control returns to the shell.
#
# Notes
#  This parameter is ignored by the CodeSonar Windows build wizard.
#
#  The "CodeSonar Analysis Log" in the web GUI will not be populated
#  when this is set to "Yes". Instead, the log will show up on the
#  analyze command's stdout and stderr. With factory settings,
#  analysis processes run in the background and can continue running
#  after the user has logged out.

## FOREGROUND = No


# Parameter ANALYSIS_SLAVES
#
# Purpose
#  Specifies whether or not the CodeSonar analysis will run in
#  parallel mode. For local-requesting analyses
#  (REQUEST_REMOTE_ANALYSIS_SLAVES=No), additionally specifies a
#  bound below which the analysis master may automatically start new
#  slaves as needed.
#
# Type
#  { Auto, Serial } or integer
#
# Behavior
#  - Serial with REQUEST_REMOTE_ANALYSIS_SLAVES=No: the analysis
#    will take place in a single process. This will use the minimum
#    amount of memory, but provides no parallelism or fault
#    tolerance during analysis. It is useful on single-core systems
#    and when resources are scarce.
#  - Auto with REQUEST_REMOTE_ANALYSIS_SLAVES=No : CodeSonar will
#    determine the appropriate maximum number of analysis slaves
#    based on the total number of logical cores (Cores) on the
#    machine and the amount of free physical memory (Mem) using the
#    following formula: min(Cores, max(0, floor(Mem /
#    MEMORY_PER_ANALYSIS_PROCESS ) - 1)). If the result is less than
#    or equal to 1, a serial analysis is performed.
#  - integer with REQUEST_REMOTE_ANALYSIS_SLAVES=No : if fewer than
#    this many analysis slaves are running, CodeSonar will
#    automatically start new analysis slaves as needed. Empirically,
#    each process might use up to about 512MB of memory.
#  - any setting (including Serial) with
#    REQUEST_REMOTE_ANALYSIS_SLAVES=Yes : the analysis will be
#    parallel and distributed
#    [doc/html/Workings/DistributedAnalysis.html]. The precise
#    setting of this parameter will not be used (except as described
#    for MAX_ANALYSIS_SLAVES): the analysis master will request new
#    slaves from the hub as it wants them, the hub in turn will
#    request slaves from those analysis daemons that have not
#    reached their analysis cloud process limits
#    [doc/html/Workings/DistributedAnalysis.html#process_limit], and
#    the master will accept the newly-started slaves up to the limit
#    imposed by MAX_ANALYSIS_SLAVES.
#
# Notes
#  The optimal number of slave processes depends on available system
#  resources; each slave process uses CPU cycles and memory.
#
#  Use ANALYSIS_MASTER_LISTEN_INTERFACE to specify the address on
#  which the master process will listen.
#
#  Use DAEMON_SLAVES to specify how many slave processes CodeSonar
#  may start to service web requests.
#
#  For more information, see the manual section on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html].

#ANALYSIS_SLAVES = Auto


# Parameter REQUEST_REMOTE_ANALYSIS_SLAVES
#
# Purpose
#  Specifies whether or not automatically-started analysis slaves
#  can be distributed through the hub's analysis cloud.
#
# Type
#  {Yes, No}
#
# Behavior
#  Determines how the analysis master will obtain additional slaves
#  while it is running in analysis mode (to analyze the project).
#  - Yes : if the analysis master determines that it requires
#    additional analysis slaves, it will send a request to the hub.
#    The hub determines which cslaunchd processes in its analysis
#    cloud register have available capacity, then instructs each of
#    these to start a new analysis slave.
#  - No : if the analysis master determines that it requires
#    additional analysis slaves, it will directly start one local
#    slave at a time.
#
# Notes
#  Setting this to No is not sufficient to guarantee that an
#  analysis will run entirely locally. If the master process is
#  listening on an address to which other machines have access, it
#  can accept manually-started slaves from those other machines. To
#  eliminate this possibility, use a restrictive
#  ANALYSIS_MASTER_LISTEN_INTERFACE setting.
#
#  For more information, see the manual sections on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html] and Distributed
#  Analysis [doc/html/Workings/DistributedAnalysis.html].

#REQUEST_REMOTE_ANALYSIS_SLAVES = No


# Parameter REQUEST_REMOTE_DAEMON_SLAVES
#
# Purpose
#  Specifies whether or not automatically-started analysis slaves
#  can be distributed through the hub's analysis cloud while the
#  analysis is running in daemon mode.
#
# Type
#  {Yes, No}
#
# Behavior
#  Determines how the analysis master will obtain additional slaves
#  while it is running in daemon mode (to service requests from the
#  hub, after the project has been built and analyzed).
#  - Yes : if the analysis master determines that it requires
#    additional analysis slaves, it will send a request to the hub.
#    The hub determines which cslaunchd processes in its analysis
#    cloud register have available capacity, then instructs each of
#    these to start a new analysis slave.
#  - No : if the analysis master determines that it requires
#    additional analysis slaves, it will directly start one local
#    slave at a time.
#
# Notes
#  Setting this to No is not sufficient to guarantee that an
#  analysis will run entirely locally. If the master process is
#  listening on an address to which other machines have access, it
#  can accept manually-started slaves from those other machines. To
#  eliminate this possibility, use a restrictive
#  DAEMON_MASTER_LISTEN_INTERFACE setting.
#
#  For more information, see the manual sections on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html] and Distributed
#  Analysis [doc/html/Workings/DistributedAnalysis.html].

#REQUEST_REMOTE_DAEMON_SLAVES = No


# Parameter REMOTE_ANALYSIS_SLAVES_LAUNCHDS
#
# Purpose
#  Specifies the launch daemon or daemons from which analysis slaves
#  may be requested.
#
# Type
#  string or integer
#
# Behavior
#  Analysis slaves for remote-requesting analyses will only be
#  requested from launch daemons that match the specified value,
#  which can take any of the following forms.
#  - Positive Integer N : Matches all launch daemons that are
#    transitive descendants of the launchd group whose LDGroup ID
#    [doc/html/Elements/PROPERTIES_Launchd_Group.html#ldgroup_id] is
#    N.
#  - Negative Integer -M : Matches the single launch daemon whose
#    Launch Daemon ID
#    [doc/html/Workings/LaunchDaemon.html#launchd_id] is M.
#  - (Integer 0 is not a valid setting.)
#  - /Foo/Bar/* : Matches all launch daemons that are transitive
#    descendants of the launch daemon group(s) whose LDGroup Path
#    [doc/html/Elements/PROPERTIES_Launchd_Group.html#ldgroup_path]
#    is /Foo/Bar. Case sensitive.
#  - /Foo/Bar/user@machine : Matches all launch laemon(s) whose
#    Parent LDGroup
#    [doc/html/Workings/LaunchDaemon.html#parent_ldgroup] is
#    /Foo/Bar, System User
#    [doc/html/Workings/LaunchDaemon.html#pretty_username] is user,
#    and Machine [doc/html/Workings/LaunchDaemon.html#machine] is
#    machine. Case sensitive.
#
# Notes
#  If security is a concern, then it is safer to use the positive
#  integer and negative integer forms, since IDs are never reused,
#  whereas multiple launch daemon groups can have the same path, and
#  the truthfulness of the human readable launch daemon names
#  (user@machine) cannot be verified by the hub.
#
#  It is advisable to only use trusted launch daemons. For best
#  performance, it is advisable to only use launch daemons with
#  reasonable performance and an ethernet quality network connection
#  to the analysis master.
#
#  By default, all launch daemons on the hub will be used.
#
#  This setting has no effect if REQUEST_REMOTE_ANALYSIS_SLAVES=No.
#
#  Examples:
#    REMOTE_ANALYSIS_SLAVES_LAUNCHDS += /siteA/*
#    REMOTE_ANALYSIS_SLAVES_LAUNCHDS += /siteA/alex@sparky
#    REMOTE_ANALYSIS_SLAVES_LAUNCHDS += 123
#    REMOTE_ANALYSIS_SLAVES_LAUNCHDS += -123
#
#  For more information, see the manual section on Distributed
#  Analysis [doc/html/Workings/DistributedAnalysis.html].


# Parameter REMOTE_DAEMON_SLAVES_LAUNCHDS
#
# Purpose
#  Specifies the launch daemon or daemons from which analysis slaves
#  may be requested while the analysis is running in daemon mode.
#
# Type
#  string or integer
#
# Behavior
#  Analysis slaves for remote-requesting analyses will only be
#  requested from launch daemons that match the specified value,
#  which can take any of the following forms.
#  - Positive Integer N : Matches all launch daemons that are
#    transitive descendants of the launchd group whose LDGroup ID
#    [doc/html/Elements/PROPERTIES_Launchd_Group.html#ldgroup_id] is
#    N.
#  - Negative Integer -M : Matches the single launch daemon whose
#    Launch Daemon ID
#    [doc/html/Workings/LaunchDaemon.html#launchd_id] is M.
#  - (Integer 0 is not a valid setting.)
#  - /Foo/Bar/* : Matches all launch daemons that are transitive
#    descendants of the launch daemon group(s) whose LDGroup Path
#    [doc/html/Elements/PROPERTIES_Launchd_Group.html#ldgroup_path]
#    is /Foo/Bar. Case sensitive.
#  - /Foo/Bar/user@machine : Matches all launch laemon(s) whose
#    Parent LDGroup
#    [doc/html/Workings/LaunchDaemon.html#parent_ldgroup] is
#    /Foo/Bar, System User
#    [doc/html/Workings/LaunchDaemon.html#pretty_username] is user,
#    and Machine [doc/html/Workings/LaunchDaemon.html#machine] is
#    machine. Case sensitive.
#
# Notes
#  If security is a concern, then it is safer to use the positive
#  integer and negative integer forms, since IDs are never reused,
#  whereas multiple launch daemon groups can have the same path, and
#  the truthfulness of the human readable launch daemon names
#  (user@machine) cannot be verified by the hub.
#
#  It is advisable to only use trusted launch daemons. For best
#  performance, it is advisable to only use launch daemons with
#  reasonable performance and an ethernet quality network connection
#  to the analysis master.
#
#  By default, all launch daemons on the hub will be used.
#
#  This setting has no effect if REQUEST_REMOTE_DAEMON_SLAVES=No.
#
#  Examples:
#    REMOTE_DAEMON_SLAVES_LAUNCHDS += /siteA/*
#    REMOTE_DAEMON_SLAVES_LAUNCHDS += /siteA/alex@sparky
#    REMOTE_DAEMON_SLAVES_LAUNCHDS += 123
#    REMOTE_DAEMON_SLAVES_LAUNCHDS += -123
#
#  For more information, see the manual section on Distributed
#  Analysis [doc/html/Workings/DistributedAnalysis.html].


# Parameter LAUNCHD_GROUP
#
# Purpose
#  Specifies the parent launchd group for new CodeSonar launch
#  daemons [doc/html/Workings/LaunchDaemon.html].
#
# Type
#  string or integer
#
# Behavior
#  If a parent launchd group
#  [doc/html/Workings/LaunchDaemon.html#parent_ldgroup] is not
#  specified in a command that creates a launch daemon, this value
#  will be used. If neither is specified, the root launchd group
#  [doc/html/Elements/PROPERTIES_Launchd_Group.html#root_ldgroup]
#  will be used. (In all cases, the command will fail if the
#  authorizing user does not have LAUNCHDGROUP_ADD_CHILD
#  [doc/html/Elements/PROPERTIES_RBAC_Permissions.html#LAUNCHDGROUP_ADD_CHILD]
#  permission for the launchd group in question.)
#
#  The parent launchd group G can be specified as either an integer
#  or a string.
#  - integer: the LDGroup ID
#    [doc/html/Elements/PROPERTIES_Launchd_Group.html#ldgroup_id]
#    for G
#  - string: the LDGroup path
#    [doc/html/Elements/PROPERTIES_Launchd_Group.html#ldgroup_path]
#    for G, as a /-separated sequence of LDGroup Name
#    [doc/html/Elements/PROPERTIES_Launchd_Group.html#ldgroup_name]
#    with leading / corresponding to the root launchd group.
#
# Notes
#  This parameter is only used in creating new launch daemons: those
#  whose identifying property tuples
#  [doc/html/Workings/LaunchDaemon.html#tuple] are not already
#  present in the analysis cloud register
#  [doc/html/Workings/DistributedAnalysis.html#analysis_cloud_register]).
#  You can change the parent launchd group for an existing launch
#  daemon from the corresponding Launchd Group
#  [doc/html/GUI/GUI_Analysis_Cloud.html] page.


# Parameter LAUNCHD_KEY
#
# Purpose
#  Specifies extra key data for CodeSonar launch daemon
#  [doc/html/Workings/LaunchDaemon.html] identification.
#
# Type
#  string
#
# Behavior
#  If a launch daemon key [doc/html/Workings/LaunchDaemon.html#key]
#  is not specified in a command that creates or specifies a launch
#  daemon, this value will be used. If neither are specified, the
#  empty string will be used.
#
# Notes
#  Usually, specifying a launchd key is unnecessary and CodeSonar
#  can distinguish launch daemons by the other members of the launch
#  daemon's identifying property tuple
#  [doc/html/Workings/LaunchDaemon.html#tuple] [Machine, System
#  User, Hub User, Installation, Key].
#
#  However, in some circumstances, the other elements of the
#  identifying tuple may not be sufficient to distinguish two launch
#  daemons that should be handled separately.
#  - If two machines A and B have the same name and CodeSonar
#    installation location, a user who is running analyses on both A
#    and B should specify distinct launch daemon keys for each so
#    that the hub can distinguish the launch daemons.
#  - If CodeSonar is being used from multiple chroot environments on
#    the same machine, each chroot should specify a distinct launchd
#    key to identify itself.
#  - The situation is similar for tools like clearcase. If the
#    .prj_files directory is being stored inside a view (not
#    recommended for performance reasons), then each view should
#    identify itself using a distinct launchd key.


# Parameter MAX_ANALYSIS_SLAVES
#
# Purpose
#  Specifies an upper bound on the total number of CodeSonar
#  analysis slaves.
#
# Type
#  integer
#
# Behavior
#  The upper bound on the number of CodeSonar analysis slaves is set
#  to the higher of this value and the value of ANALYSIS_SLAVES
#  (either the explicit value given by the user or the value
#  computed for Auto).
#
#  If the current number of analysis slaves matches this upper
#  bound, any attempt to attach a new slave to the analysis will
#  fail.
#
#  For local-requesting analyses
#  (REQUEST_REMOTE_ANALYSIS_SLAVES=No), this limit only affects
#  manually-started analysis slaves: the upper bound is always
#  greater than or equal to the value of ANALYSIS_SLAVES, so the
#  analysis master will never automatically start any new slaves
#  under these conditions.
#
#  For remote-requesting analyses
#  (REQUEST_REMOTE_ANALYSIS_SLAVES=Yes), this limit affects both
#  manually-started analysis slaves and slaves started due to a
#  remote request
#  [doc/html/Workings/DistributedAnalysis.html#adding_slaves].
#
# Notes
#  If the analysis is running serially (either because
#  ANALYSIS_SLAVES=Serial, or because ANALYSIS_SLAVES=Auto and
#  REQUEST_REMOTE_ANALYSIS_SLAVES=No and CodeSonar determined that
#  it should run serially), MAX_ANALYSIS_SLAVES has no effect.

#MAX_ANALYSIS_SLAVES = 256


# Parameter DAEMON_SLAVES
#
# Purpose
#  Specifies whether or not CodeSonar will service web requests in
#  parallel mode. For local-requesting analyses
#  (REQUEST_REMOTE_DAEMON_SLAVES=No), additionally specifies a bound
#  below which the daemon master may automatically start new slaves
#  as needed.
#
# Type
#  { Auto, Serial } or integer
#
# Behavior
#  - Serial with REQUEST_REMOTE_DAEMON_SLAVES=No : web requests are
#    serviced by a single process.
#  - Auto with REQUEST_REMOTE_DAEMON_SLAVES=No : CodeSonar will
#    determine the appropriate maximum number of slaves based on the
#    total number of logical cores (Cores) on the machine and the
#    amount of free physical memory (Mem) using the following
#    formula: min(Cores, max(0, floor(Mem /
#    MEMORY_PER_ANALYSIS_PROCESS) - 1)). If the result is less than
#    or equal to 1, web requests are serviced by a single process.
#  - integer with REQUEST_REMOTE_DAEMON_SLAVES=No : if fewer than
#    this many slaves are running to service web requests, the
#    analysis master will automatically start/request new slaves as
#    needed.
#  - any setting (including Serial) with
#    REQUEST_REMOTE_DAEMON_SLAVES=Yes : the daemon will be parallel
#    and distributed [doc/html/Workings/DistributedAnalysis.html].
#    The precise setting of this parameter will not be used (except
#    as described for MAX_DAEMON_SLAVES): the daemon master will
#    request new slaves from the hub as it wants them, the hub in
#    turn will request slaves from those analysis daemons that have
#    not reached their analysis cloud process limits
#    [doc/html/Workings/DistributedAnalysis.html#process_limit], and
#    the master will accept the newly-started slaves up to the limit
#    imposed by MAX_DAEMON_SLAVES.
#
# Notes
#  Multiple daemon slaves will only be required if multiple web
#  requests are pending concurrently.
#
#  The optimal number of slave processes depends on available system
#  resources; each slave process uses CPU cycles and memory.
#
#  This parameter is analogous to ANALYSIS_SLAVES, but determines
#  the degree of parallelism for CodeSonar in daemon mode while
#  ANALYSIS_SLAVES determines the degree of parallelism for the
#  analysis.
#
#  Use DAEMON_MASTER_LISTEN_INTERFACE to specify the address on
#  which the master process will listen.
#
#  For more information, see the manual sections on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html] and Distributed
#  Analysis [doc/html/Workings/DistributedAnalysis.html].

#DAEMON_SLAVES = Auto


# Parameter MAX_DAEMON_SLAVES
#
# Purpose
#  Specifies an upper bound on the total number of CodeSonar daemon
#  slaves.
#
# Type
#  integer
#
# Behavior
#  The upper bound on the number of CodeSonar daemon slaves is set
#  to the higher of this value and the value of DAEMON_SLAVES
#  (either the explicit value given by the user or the value
#  computed for Auto).
#
#  If the current number of daemon slaves matches this upper bound,
#  any attempt to attach a new slave to the daemon master will fail.
#
#  For local-requesting analyses (REQUEST_REMOTE_DAEMON_SLAVES=No),
#  this limit only affects manually-started daemon slaves: the upper
#  bound is always greater than or equal to the value of
#  DAEMON_SLAVES, so the daemon master will never automatically
#  start any new slaves under these conditions.
#
#  For remote-requesting analyses
#  (REQUEST_REMOTE_DAEMON_SLAVES=Yes), this limit affects both
#  manually-started daemon slaves and slaves started due to a remote
#  request
#  [doc/html/Workings/DistributedAnalysis.html#adding_slaves].
#
# Notes
#  If the analysis is running serially in daemon mode (either
#  because DAEMON_SLAVES=Serial, or because DAEMON_SLAVES=Auto and
#  REQUEST_REMOTE_DAEMON_SLAVES=No and CodeSonar determined that it
#  should run serially), MAX_DAEMON_SLAVES has no effect.


#MAX_DAEMON_SLAVES = 256


# Parameter MEMORY_PER_ANALYSIS_PROCESS
#
# Purpose
#  Used to compute analysis slave and daemon slave limits when other
#  settings specify that these computations should be made
#  automatically.
#
# Type
#  integer
#
# Behavior
#  When set to integer N, on a system with R megabytes (MB)
#  available memory and C logical cores, CodeSonar will set the
#  maximum number of slaves to min(C, max(0, floor(R/N) - 1)) in
#  cases where an automatically-computed analysis slave or daemon
#  slave limit is required.
#
#  For analysis slaves
#  [doc/html/Workings/Parallelism.html#analysis_slave], an
#  automatically-computed limit is required if:
#  - REQUEST_REMOTE_ANALYSIS_SLAVES=No and ANALYSIS_SLAVES=Auto, or
#  - REQUEST_REMOTE_ANALYSIS_SLAVES=Yes and the analysis cloud
#    register indicates the process count should be automatically
#    computed.
#
#  For daemon slaves
#  [doc/html/Workings/Parallelism.html#daemon_slave], an
#  automatically-computed limit is required if:
#  - REQUEST_REMOTE_DAEMON_SLAVES=No and DAEMON_SLAVES=Auto, or
#  - REQUEST_REMOTE_DAEMON_SLAVES=Yes and the analysis cloud
#    register indicates the process count should be automatically
#    computed.
#
#  In all other cases, this parameter has no effect.
#
# Notes
#  This parameter is used for automatically computing limits on the
#  number of analysis and daemon slaves. It does not affect the
#  memory consumption of individual CodeSonar processes. Rather, it
#  represents an estimate of that consumption.
#
#  As the setting of this parameter decreases, the slave limit
#  increases in a stepped manner up to the upper bound provided by
#  the C (number of logical cores) term in the computation formula.
#  Note that the stepping imposed by the rounding down of the R/N
#  term means that small adjustments in this setting may not result
#  in a change to the computed limit.
#
#  Depending on the relationship between R and C, too low a setting
#  - and thus too high a slave limit - may result in the system
#  runing out of memory.
#
#  Conversely, too high a setting will result in a slave limit that
#  is lower than necessary, which could cause the analysis to run
#  more slowly than it would with more slaves.

#MEMORY_PER_ANALYSIS_PROCESS = 512


# Parameter MAX_FAILED_UNITS_OF_WORK
#
# Purpose
#  Specifies how many units of work may be failed before the master
#  should terminate the analysis.
#
# Type
#  integer
#
# Behavior
#  - negative N: keep going no matter how many units of work fail.
#    UNIT_OF_WORK_RETRIES will still limit the number of times any
#    individual unit of work is retried
#  - non-negative N: Fail after N units of work fail.
#

#MAX_FAILED_UNITS_OF_WORK = -1


# Parameter UNIT_OF_WORK_RETRIES
#
# Purpose
#  Specifies how many times the analysis master should retry a
#  failing unit of work before giving up on it and moving on.
#
# Type
#  integer
#
# Behavior
#  - negative N: keep retrying the unit of work forever.
#  - zero: do not retry; move on after the first failure.
#  - positive N: retry the unit of work N times before moving on.
#
# Notes
#  When CodeSonar is running in parallel, slaves may experience
#  various modes of failure, such as network socket disconnection or
#  the slave process being killed by the user. Some of these modes
#  of failure are intermittent and indepent of the particular unit
#  of work being analyzed. Therefore, retrying a failed unit of work
#  might be fruitful. On the other hand, if the slave is crashing
#  due to the content of a particular unit of work, then repeated
#  attempts on that unit of work will likely result in repeating
#  crashes.
#
#  With factory settings, CodeSonar retries a failing unit of work
#  up to three times before giving up on that unit of work and
#  moving on. This strikes a balance between retrying forever and
#  giving up immediately.
#
#  For more information, see the manual sections on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html] and the CodeSonar
#  Plug-In API [doc/html/API/CodeSonarPlugins/PluginAPI.html].

#UNIT_OF_WORK_RETRIES = 3


# Parameter ANALYSIS_MASTER_LISTEN_INTERFACE
#
# Purpose
#  Specifies the address on which the analysis master process will
#  listen while it is in analysis mode (to analyze the project).
#
# Type
#  String of the form <host> or <host>:<port>
#
# Behavior
#  - If <port> is specified and available, the analysis master will
#    listen on <host>:<port>.
#  - If <port> is specified but unavailable, the master will not run
#    and the analysis will crash. There will be an error message in
#    the Analysis Log [doc/html/GUI/GUI_Log_Analysis.html].
#  - If <port> is not specified, the analysis master will listen on
#    the interface specified by <host>, on a port allocated by the
#    operating system. Inspect the analysis log to identify the port
#    that is being used.
#
# Notes
#  Examples:
#    ANALYSIS_MASTER_LISTEN_INTERFACE=0.0.0.0
#    ANALYSIS_MASTER_LISTEN_INTERFACE=0.0.0.0:1234
#    ANALYSIS_MASTER_LISTEN_INTERFACE=127.0.0.1
#    ANALYSIS_MASTER_LISTEN_INTERFACE=127.0.0.1:1234
#    ANALYSIS_MASTER_LISTEN_INTERFACE=[::]
#    ANALYSIS_MASTER_LISTEN_INTERFACE=[::]:1234
#    ANALYSIS_MASTER_LISTEN_INTERFACE=[::1]
#    ANALYSIS_MASTER_LISTEN_INTERFACE=[::1]:1234
#    ANALYSIS_MASTER_LISTEN_INTERFACE=mymachine
#    ANALYSIS_MASTER_LISTEN_INTERFACE=mymachine:1234
#
#  For distributed analysis, ensure that <host> specifies an
#  interface that other machines in the analysis cloud will be able
#  to communicate with.
#
#  With factory settings, ANALYSIS_MASTER_LISTEN_INTERFACE is not
#  specified. In this case, it is determined based on the value of
#  REQUEST_REMOTE_ANALYSIS_SLAVES.
#  - 0.0.0.0 or [::] if REQUEST_REMOTE_ANALYSIS_SLAVES=Yes
#  - 127.0.0.1 or [::1] if REQUEST_REMOTE_ANALYSIS_SLAVES=No


# Parameter ANALYSIS_MASTER_USE_TLS
#
# Purpose
#  Specifies whether analysis master<->slave sockets should use TLS.
#
# Type
#  {Yes, No}
#
# Behavior
#  - Yes : TLS sockets will be used for communications between
#    analysis masters and slaves. This imposes some additional
#    computational cost.
#  - No : Plain TCP sockets will be used for communications between
#    analysis masters and slaves.
#  - unspecified : TLS sockets will be used if and only if HTTPS is
#    enabled on the hub and ANALYSIS_MASTER_LISTEN_INTERFACE is not
#    127.0.0.1 ([::1] for IPv6). (Visit the hub's Configure HTTPS
#    [doc/html/GUI/GUI_Configure_HTTPS.html] page to view or modify
#    its HTTPS enabling status.)
#
# Notes
#  Set this to Yes if secrecy is desired.
#
#  Two way authentication takes place regardless of the
#  ANALYSIS_MASTER_USE_TLS setting, but is vulnerable to snooping
#  when TLS is not used.
#
#  The master will generate a fresh 2048 bit RSA private key for
#  each master analysis process. The corresponding certificate is
#  provided to all slaves on startup.


# Parameter ANALYSIS_SLAVE_TIMEOUT
#
# Purpose
#  The number of seconds a slave will wait for network operations
#  with the master to time out.
#
# Type
#  integer
#
# Behavior
#  - 0 : There is no timeout.
#  - N (for N>0) : A slave will exit if a network operation does not
#    make progress for N seconds.
#
# Notes
#  There are several reasons why timeouts can occur.
#  - The network link is not functioning.
#  - The master has lost power, blue screened, panicked, etc.
#  - The master has disconnected the slave, but the slave never
#    became aware of it.
#  - The master has not given the slave any new work in the last N
#    seconds (the slave is idle for a long time).
#  - The master process is busy and isn't responding in a timely
#    fashion.
#  - The slave has asked the master to do work that takes longer
#    than the timeout.
#
#  The latter two situations are unlikely to occur with the factory
#  setting.
#
#  Timing out slaves that have been idle for a long time allows
#  wasted system resources to be relinquished and put to better use.
#  New slaves will be started if more slaves are desired.
#
#  When certain types of network errors occur, this setting can be
#  important for preventing orphaned slaves from waiting
#  indefinitely on a master that no longer exists.
#
#  Slaves obtain this timeout setting from the analysis master.
#  However, slaves use the very connection that the timeout affects
#  to download the timeout setting from the master. Before the
#  timeout setting has been downloaded from the master, the
#  effective timeout is the one in the template.conf file in the
#  slave's installation. The startup window that uses the slave's
#  template.conf setting is typically short.
#
#  For more information, see the manual section on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html].

#ANALYSIS_SLAVE_TIMEOUT = 1800


# Parameter ANALYSIS_MASTER_KEEPALIVE_PERIOD
#
# Purpose
#  Specifies how often the master will broadcast keepalive requests
#  to all slaves.
#
# Type
#  integer
#
# Behavior
#  - 0 : Keepalive requests are disabled.
#  - N (for N>0) : A keepalive will be broadcast every N seconds. If
#    it is time to broadcast another request, but nothing has been
#    received from a slave since the previous request, then the
#    slave is disconnected for being non-responsive.
#
# Notes
#  There are several reasons why keepalives can fail.
#  - The network link is not functioning.
#  - The slave has lost power, blue screened, panicked, etc.
#  - The slave has disconnected the master, but the master never
#    became aware of it.
#  - The slave process got busy doing something for longer than this
#    period.
#
#  The latter two situations are unlikely to occur with the factory
#  setting.
#
#  This setting can be important to prevent the master from starving
#  because it is waiting on slaves that no longer exist.
#
#  For more information, see the manual section on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html].

#ANALYSIS_MASTER_KEEPALIVE_PERIOD = 3000


# Parameter DAEMON_MASTER_LISTEN_INTERFACE
#
# Purpose
#  Specifies the address on which the daemon master process will
#  listen.
#
# Type
#  String of the form <host> or <host>:<port>
#
# Behavior
#  - If <port> is specified and available, the daemon master will
#    listen on <host>:<port>.
#  - If <port> is specified but unavailable, the daemon master will
#    not run: the daemon will not start and requests will not be
#    serviced. There will be an error message in the Analysis Log
#    [doc/html/GUI/GUI_Log_Analysis.html].
#  - If <port> is not specified, the daemon master will listen on
#    the interface specified by <host>, on a port allocated by the
#    operating system. Inspect the analysis log to identify the port
#    that is being used.
#
# Notes
#  Examples:
#    DAEMON_MASTER_LISTEN_INTERFACE=0.0.0.0
#    DAEMON_MASTER_LISTEN_INTERFACE=0.0.0.0:1234
#    DAEMON_MASTER_LISTEN_INTERFACE=127.0.0.1
#    DAEMON_MASTER_LISTEN_INTERFACE=127.0.0.1:1234
#    DAEMON_MASTER_LISTEN_INTERFACE=[::]
#    DAEMON_MASTER_LISTEN_INTERFACE=[::]:1234
#    DAEMON_MASTER_LISTEN_INTERFACE=[::1]
#    DAEMON_MASTER_LISTEN_INTERFACE=[::1]:1234
#    DAEMON_MASTER_LISTEN_INTERFACE=mymachine
#    DAEMON_MASTER_LISTEN_INTERFACE=mymachine:1234
#
#  For distributed analysis, ensure that <host> specifies an
#  interface that other machines in the analysis cloud will be able
#  to communicate with.
#
#  With factory settings, DAEMON_MASTER_LISTEN_INTERFACE is not
#  specified. In this case, it is determined based on the value of
#  REQUEST_REMOTE_DAEMON_SLAVES.
#  - 0.0.0.0 or [::] if REQUEST_REMOTE_DAEMON_SLAVES=Yes
#  - 127.0.0.1 or [::] if REQUEST_REMOTE_DAEMON_SLAVES=No


# Parameter DAEMON_MASTER_USE_TLS
#
# Purpose
#  Specifies whether daemon master<->slave sockets should use TLS.
#
# Type
#  {Yes, No}
#
# Behavior
#  - Yes : TLS sockets will be used for communications between
#    analysis masters and slaves. This imposes some additional
#    computational cost.
#  - No : Plain TCP sockets will be used for communications between
#    analysis masters and slaves.
#  - unspecified : TLS sockets will be used if and only if HTTPS is
#    enabled on the hub and DAEMON_MASTER_LISTEN_INTERFACE is not
#    127.0.0.1 ([::1] for IPv6). (Visit the hub's Configure HTTPS
#    [doc/html/GUI/GUI_Configure_HTTPS.html] page to view or modify
#    its HTTPS enabling status.)
#
# Notes
#  Set this to Yes if secrecy is desired.
#
#  Two way authentication takes place regardless of the
#  DAEMON_MASTER_USE_TLS setting, but is vulnerable to snooping when
#  TLS is not used.
#
#  The master will generate a fresh 2048 bit RSA private key for
#  each master analysis process. The corresponding certificate is
#  provided to all slaves on startup.


# Parameter DAEMON_SLAVE_TIMEOUT
#
# Purpose
#  The number of seconds a slave will wait for network operations
#  with the master to time out.
#
# Type
#  integer
#
# Behavior
#  - 0 : There is no timeout.
#  - N (for N>0) : A slave will exit if a network operation does not
#    make progress for N seconds.
#
# Notes
#  There are several reasons why timeouts can occur.
#  - The network link is not functioning.
#  - The master has lost power, blue screened, panicked, etc.
#  - The master has disconnected the slave, but the slave never
#    became aware of it.
#  - The master has not given the slave any new work in the last N
#    seconds (the slave is idle for a long time).
#  - The master process is busy and isn't responding in a timely
#    fashion.
#  - The slave has asked the master to do work that takes longer
#    than the timeout.
#
#  The latter two situations are unlikely to occur with the factory
#  setting.
#
#  Timing out slaves that have been idle for a long time allows
#  wasted system resources to be relinquished and put to better use.
#  New slaves will be started if more slaves are desired.
#
#  When certain types of network errors occur, this setting can be
#  important for preventing orphaned slaves from waiting
#  indefinitely on a master that no longer exists.
#
#  Slaves obtain this timeout setting from the analysis master.
#  However, slaves use the very connection that the timeout affects
#  to download the timeout setting from the master. Before the
#  timeout setting has been downloaded from the master, the
#  effective timeout is the one in the template.conf file in the
#  slave's installation. The startup window that uses the slave's
#  template.conf setting is typically short.
#
#  For more information, see the manual section on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html].

#DAEMON_SLAVE_TIMEOUT = 1800


# Parameter DAEMON_MASTER_KEEPALIVE_PERIOD
#
# Purpose
#  Specifies how often the master will broadcast keepalive requests
#  to all slaves.
#
# Type
#  integer
#
# Behavior
#  - 0 : Keepalive requests are disabled.
#  - N (for N>0) : A keepalive will be broadcast every N seconds. If
#    it is time to broadcast another request, but nothing has been
#    received from a slave since the previous request, then the
#    slave is disconnected for being non-responsive.
#
# Notes
#  There are several reasons why keepalives can fail.
#  - The network link is not functioning.
#  - The slave has lost power, blue screened, panicked, etc.
#  - The slave has disconnected the master, but the master never
#    became aware of it.
#  - The slave process got busy doing something for longer than this
#    period.
#
#  The latter two situations are unlikely to occur with the factory
#  setting.
#
#  This setting can be important to prevent the master from starving
#  because it is waiting on slaves that no longer exist.
#
#  For more information, see the manual section on Parallelism in
#  CodeSonar [doc/html/Workings/Parallelism.html].

#DAEMON_MASTER_KEEPALIVE_PERIOD = 3000


# Parameter WARNING_FILTER
#
# Purpose
#  Allows warnings to be modified before they are submitted to the
#  hub, or discarded entirely without being submitted.
#
# Tags
#  - ANALYSIS_FILTER: Analysis-Side Filtering
#
# Type
#  Zero or more patterns, each consisting of an <action> followed by
#  one or more <rule>s.
#
#  <action> is one of:
#  - discard
#  - allow
#  - priority:=<priority>
#  - owner:=<owner>
#
#  <rule> is one of:
#  - categories <matcher> <string>
#  - class <matcher> <string>
#  - compilation_unit <matcher> <string>
#  - file <matcher> <string>
#  - is_sysinclude
#  - language <matcher> <string>
#  - line= <int>
#  - line_contents <matcher> <string>
#  - listing_xml <matcher> <string>
#  - path_start_procedure <matcher> <string>
#  - path <matcher> <string>
#  - procedure <matcher> <string>
#  - procedure_typed <matcher> <string>
#  - reachable= <int>
#  - starts_in_source_libraries= <int>
#
#  and <matcher> is one of:
#  - : (substring match, case-insensitive)
#  - = (exact match, case-insensitive)
#  - =~ (regular expression match against a Boost 'POSIX Extended
#    Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html])
#
# Behavior
#  Depends on the <action> and the <rule>s.
#
#  <action> is interpreted as follows.
#  - discard : warnings matching the rules will be discarded instead
#    of being submitted to the hub.
#  - allow : warnings matching the rules will be submitted to the
#    hub, even if they matched a previous "discard"
#  - priority:=<priority> : warnings matching the rules will have
#    their Priority set to <priority> before being submitted to the
#    hub. If <priority> is not a legal priority value on the hub,
#    the hub will be updated to add <priority> to the list of
#    priority values.
#  - owner:=<owner> : warnings matching the rules will have their
#    Owner set to <owner> before being submitted to the hub. If
#    <owner> is not an active user on the hub, the pattern has no
#    effect.
#
#  Each <rule> specifies a condition that a warning must satisfy in
#  order to match the rule. The different <rule> types represent
#  constraints on various warning properties
#  [doc/html/Elements/PROPERTIES_Warning.html].
#
#  - categories : Categories
#  - class : Class
#  - compilation_unit : Compilation Unit
#  - file : the basename of Warning File
#  - is_sysinclude matches warnings for which Listing XML lies
#    entirely within system include files (as designated by
#    SYSTEM_INCLUDE_PATHS), with no user code involved.
#  - language : Language
#  - line : Line
#  - line_contents : the contents of the source line on which the
#    warning was issued (that is, the Line'th line of Warning File)
#  - listing_xml : Listing XML
#  - path : the full path name of Warning File. Use system-
#    appropriate path separators; escape special characters
#    (including backslashes) if enclosing the path in quotes "".
#  - path_start_procedure : the first procedure in Listing
#  - procedure : Procedure (cs_pdg_friendly_name()
#    [doc/html/API/CAPI/cs__pdg_8h.html#func_cs_pdg_friendly_name])
#  - procedure_typed : The cs_pdg_procedure_name()
#    [doc/html/API/CAPI/cs__pdg_8h.html#func_cs_pdg_procedure_name].
#    This depends on the warning Language. If C++, rules specify
#    constraints on the fully typed rendering of the warning
#    Procedure (including template instantiations, name
#    qualification, and argument types; the rendering is also
#    whitespace-sensitive). If C, specifies a constraint on the
#    warning Procedure (so has the same behavior as a procedure
#    rule).
#  - reachable : whether or not the first function in Listing XML
#    belongs to set REACHABLE_FROM_ROOTS_EXTENDED
#    [#reachable_from_roots_extended]. Set to non-zero to specify
#    that the rule applies only to warnings for which the first
#    function is in this set; zero to specify that the rule only
#    applies to warnings for which the first function is NOT in this
#    set. CodeSonar will issue an alert
#    [doc/html/GUI/GUI_Alerts.html] if there are one or more
#    WARNING_FILTER reachable rules but set REACHABLE_FROM_ROOTS
#    [#reachable_from_roots] is empty.
#  - starts_in_source_libraries : whether or not the first function
#    in Listing XML belongs to set
#    CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES
#    [#conservatively_reachable_from_source_libraries]. Set to non-
#    zero to specify that the rule applies only to warnings for
#    which the first function is in this set; zero to specify that
#    it applies only to warnings for which the first function is not
#    in this set.
#
# Notes
#  If there are two or more <rule>s in a pattern, the pattern
#  <action> will be applied to warnings that match ALL of the rules.
#
#  If WARNING_FILTER settings specify that all warnings of a
#  specific class should be discarded (with no exceptions from
#  subsequent "allow" patterns), CodeSonar will not even carry out
#  checks for that class. This will generally lead to time savings.
#
#  Most configuration presets [doc/html/Preferences/Presets.html]
#  are composed primarily of WARNING_FILTER "allow" rules, plus the
#  supporting configuration settings required by the allowed warning
#  classes.
#
#  String guidelines:
#  - Strings that contains spaces must be quoted.
#  - Characters in quoted strings that must be backslash-escaped: "
#    and \
#  - Newlines and tabs are represented as \n and \t, respectively.
#
#  Example 1: Discard all warnings belonging to any class with a
#  LANG.MEM.* mnemonic
#  [doc/html/WarningClasses/MnemonicHierarchy.html#LANG_MEM].
#    WARNING_FILTER += discard categories:LANG.MEM
#
#  Example 2: Discard all warnings whose class is Buffer Underrun,
#  Type Underrun, or any user-defined class with "underrun" in its
#  name.
#    WARNING_FILTER += discard class:underrun
#
#  Example 3: Discard all warnings in the compilation unit
#  [doc/html/Elements/PROPERTIES_File.html#compilation_unit_def]
#  associated with mylib.cpp
#    WARNING_FILTER += discard compilation_unit=mylib.cpp
#
#  Example 4: Assign all warnings in file mylib.h to alex. If the
#  hub has no user called alex, this rule has no effect.
#    WARNING_FILTER += owner:=alex file=mylib.h
#
#  Example 5: Assign all warnings in system include files to sandy.
#  If the hub has no user called sandy, this rule has no effect.
#    WARNING_FILTER += owner:=sandy is_sysinclude
#
#  Example 6: Discard all warnings in C compilation units.
#    WARNING_FILTER += discard language=c
#
#  Example 7: Discard all warnings issued at line 47 (of any file).
#    WARNING_FILTER += discard line=47
#
#  Example 8: Discard all warnings whose associated Listing XML
#  contains substring 'callPrinter'.
#    WARNING_FILTER += discard listing_xml:callPrinter
#
#  Example 9: For all warnings issued in procedure writeThis(), set
#  Priority to "Incredible". For all warnings issued in any other
#  procedure whose name contains substring 'write', set priority to
#  "P0: High"
#  - procedure writeThis() will match both rules, so the rule order
#    is important.
#  - if "Incredible" was not already a candidate Priority value on
#    the hub, it will be added to the list of candidates once a
#    warning with "Incredible" Priority is submitted.
#    WARNING_FILTER += priority:="P0: High" procedure:write
#    WARNING_FILTER += priority:="Incredible" procedure=writeThis
#
#  Example 10: In C compilation units, discard all warnings issued
#  in a procedure whose name contains substring 'gridproc'. In C++
#  compilation units, discard all warnings issued in a procedure
#  such that the fully-qualified procedure name contains substring
#  'gridproc', or one of the argument type names contains substring
#  gridproc.
#    WARNING_FILTER += discard procedure_typed:gridproc
#
#  Example 11: In C++ compilation units, discard all warnings issued
#  in a procedure with exactly one, unsigned int, argument.
#  Procedures with more complex types may also have "(unsigned int)"
#  as a substring of their fully-typed name (for example, because of
#  templating): warnings issued in those procedures will also be
#  discarded. In C compilation units, this rule will not match
#  anything.
#    WARNING_FILTER += discard procedure_typed:"(unsigned int)"
#
#  Example 12: In C++ compilation units, discard all warnings issued
#  inside the procedures with the specified (fully-qualified) names.
#  If you are specifying a complicated procedure_typed argument
#  (like these ones), it can be useful to check the exact rendering
#  of the procedure name with cs_pdg_procedure_name()
#  [doc/html/API/CAPI/cs__pdg_8h.html#func_cs_pdg_procedure_name]
#  before creating the WARNING_FILTER rule.
#    WARNING_FILTER += discard procedure_typed:"std::vector<int, std::allocator<int>>::operator [](unsigned long)"
#    WARNING_FILTER += discard procedure_typed:"only_param::return_S(int *)"
#
#  Example 13: Discard all warnings in procedures that are not
#  reachable from main() (this REACHABILITY_ROOTS rule matches any
#  function called main occurring in any file in the project).
#    REACHABILITY_ROOTS = :main
#    WARNING_FILTER += discard reachable=0
#
#  Example 14: Discard all warnings whose Listing begins with a
#  procedure whose name is "ignoreme" followed by one or more digits
#  (eg ignoreme1(), ignoreme275(), ...).
#    WARNING_FILTER += discard path_start_procedure=~ignoreme\d+
#
#  Example 15: Discard all warnings in files whose path includes
#  directory ignoredir. Using two rules with different path
#  separators provides (some) portability.
#    WARNING_FILTER += discard path:/ignoredir/
#    WARNING_FILTER += discard path:\ignoredir\
#
#  Example 16: Discard all warnings in files whose path includes
#  directory "ignore dir" (note the space). Using two rules with
#  different path separators provides (some) portability. Patterns
#  containing spaces must be quoted, and backslashes must be escaped
#  in quoted strings.
#    WARNING_FILTER += discard path:"/ignore dir/"
#    WARNING_FILTER += discard path:"\\ignore dir\\"
#
#  Example 17: Discard all warnings occurring on a source line that
#  contains the text "do not issue a warning here" (presumably in a
#  comment).
#    WARNING_FILTER += discard line_contents:"do not issue a warning here"
#
#  Example 18: Discard all warnings for which the first function in
#  Listing XML is a library model or is called (directly or
#  transitively) by a library model.
#    WARNING_FILTER += discard starts_in_source_libraries=1
#
#  The following checks are enabled by default. To discard warnings
#  of a particular class, use the corresponding "discard" rule.
#    (C and C++ warning classes)
#    WARNING_FILTER += discard class="Arctangent Domain Error"
#    WARNING_FILTER += discard class="Argument Too High"
#    WARNING_FILTER += discard class="Argument Too Low"
#    WARNING_FILTER += discard class="Blocking in Critical Section"
#    WARNING_FILTER += discard class="Buffer Overrun"
#    WARNING_FILTER += discard class="Buffer Underrun"
#    WARNING_FILTER += discard class="Cast Alters Value"
#    WARNING_FILTER += discard class="Coercion Alters Value"
#    WARNING_FILTER += discard class="Command Injection"
#    WARNING_FILTER += discard class="Dangerous Function Cast"
#    WARNING_FILTER += discard class="Deadlock"
#    WARNING_FILTER += discard class="Division By Zero"
#    WARNING_FILTER += discard class="Double Close"
#    WARNING_FILTER += discard class="Double Free"
#    WARNING_FILTER += discard class="Double Initialization"
#    WARNING_FILTER += discard class="Double Lock"
#    WARNING_FILTER += discard class="Double Unlock"
#    WARNING_FILTER += discard class="Empty Branch Statement"
#    WARNING_FILTER += discard class="Empty for Statement"
#    WARNING_FILTER += discard class="Empty if Statement"
#    WARNING_FILTER += discard class="Empty switch Statement"
#    WARNING_FILTER += discard class="Empty while Statement"
#    WARNING_FILTER += discard class="Encryption without Padding"
#    WARNING_FILTER += discard class="File System Race Condition"
#    WARNING_FILTER += discard class="Float Division By Zero"
#    WARNING_FILTER += discard class="Floating Point Domain Error"
#    WARNING_FILTER += discard class="Floating Point Range Error"
#    WARNING_FILTER += discard class="Format String Injection"
#    WARNING_FILTER += discard class="Format String"
#    WARNING_FILTER += discard class="Free Non-Heap Variable"
#    WARNING_FILTER += discard class="Free Null Pointer"
#    WARNING_FILTER += discard class="Function Call Has No Effect"
#    WARNING_FILTER += discard class="Gamma on Zero"
#    WARNING_FILTER += discard class="GlobalHandle on GMEM_FIXED Memory"
#    WARNING_FILTER += discard class="GlobalLock on GMEM_FIXED Memory"
#    WARNING_FILTER += discard class="GlobalUnlock on GMEM_FIXED Memory"
#    WARNING_FILTER += discard class="Hardcoded Authentication"
#    WARNING_FILTER += discard class="Hardcoded Crypto Key"
#    WARNING_FILTER += discard class="Hardcoded Crypto Salt"
#    WARNING_FILTER += discard class="Ignored Return Value"
#    WARNING_FILTER += discard class="Integer Overflow of Allocation Size"
#    WARNING_FILTER += discard class="LDAP Injection"
#    WARNING_FILTER += discard class="Leak"
#    WARNING_FILTER += discard class="Library Injection"
#    WARNING_FILTER += discard class="LocalHandle on LMEM_FIXED Memory"
#    WARNING_FILTER += discard class="LocalLock on LMEM_FIXED Memory"
#    WARNING_FILTER += discard class="LocalUnlock on LMEM_FIXED Memory"
#    WARNING_FILTER += discard class="Logarithm on Negative Value"
#    WARNING_FILTER += discard class="Logarithm on Zero"
#    WARNING_FILTER += discard class="MAX_PATH Exceeded"
#    WARNING_FILTER += discard class="Misaligned Object"
#    WARNING_FILTER += discard class="Missing Return Statement"
#    WARNING_FILTER += discard class="Missing Return Value"
#    WARNING_FILTER += discard class="Negative Character Value"
#    WARNING_FILTER += discard class="Negative Shift Amount"
#    WARNING_FILTER += discard class="Negative file descriptor"
#    WARNING_FILTER += discard class="No Space For Null Terminator"
#    WARNING_FILTER += discard class="Null Pointer Dereference"
#    WARNING_FILTER += discard class="Null Security Descriptor"
#    WARNING_FILTER += discard class="Null Test After Dereference"
#    WARNING_FILTER += discard class="Overlapping Memory Regions"
#    WARNING_FILTER += discard class="Plaintext Storage of Password"
#    WARNING_FILTER += discard class="Pool Mismatch"
#    WARNING_FILTER += discard class="Raises FE_INVALID"
#    WARNING_FILTER += discard class="Redundant Condition"
#    WARNING_FILTER += discard class="Return Pointer to Freed"
#    WARNING_FILTER += discard class="Return Pointer to Local"
#    WARNING_FILTER += discard class="SQL Injection"
#    WARNING_FILTER += discard class="Shift Amount Exceeds Bit Width"
#    WARNING_FILTER += discard class="Tainted Buffer Access"
#    WARNING_FILTER += discard class="Try-lock that will never succeed"
#    WARNING_FILTER += discard class="Type Mismatch"
#    WARNING_FILTER += discard class="Type Overrun"
#    WARNING_FILTER += discard class="Type Underrun"
#    WARNING_FILTER += discard class="Undefined Power of Zero"
#    WARNING_FILTER += discard class="Uninitialized Variable"
#    WARNING_FILTER += discard class="Unreachable Call"
#    WARNING_FILTER += discard class="Unreachable Computation"
#    WARNING_FILTER += discard class="Unreachable Conditional"
#    WARNING_FILTER += discard class="Unreachable Data Flow"
#    WARNING_FILTER += discard class="Unreasonable Size Argument"
#    WARNING_FILTER += discard class="Unterminated C String"
#    WARNING_FILTER += discard class="Unused Value"
#    WARNING_FILTER += discard class="Use After Close"
#    WARNING_FILTER += discard class="Use After Free"
#    WARNING_FILTER += discard class="Use of GetTempFileName"
#    WARNING_FILTER += discard class="Use of SO_REUSEADDR"
#    WARNING_FILTER += discard class="Use of crypt"
#    WARNING_FILTER += discard class="Use of drem"
#    WARNING_FILTER += discard class="Use of gamma"
#    WARNING_FILTER += discard class="Use of gets"
#    WARNING_FILTER += discard class="Use of mktemp"
#    WARNING_FILTER += discard class="Use of tmpfile"
#    WARNING_FILTER += discard class="Use of tmpnam"
#    WARNING_FILTER += discard class="Useless Assignment"
#    WARNING_FILTER += discard class="Varargs Function Cast"
#    WARNING_FILTER += discard class="cosh on High Number"
#    WARNING_FILTER += discard class="cosh on Low Number"
#    WARNING_FILTER += discard class="sqrt on Negative Value"
#    
#    (Java warning classes)
#    WARNING_FILTER += discard class="32 bit int shifted by an amount not in the range -31..31"
#    WARNING_FILTER += discard class="A collection is added to itself"
#    WARNING_FILTER += discard class="A known null value is checked to see if it is an instance of a type"
#    WARNING_FILTER += discard class="A parameter is dead upon entry to a method but overwritten"
#    WARNING_FILTER += discard class="A prepared statement is generated from a nonconstant String"
#    WARNING_FILTER += discard class="A thread was created using the default empty run method"
#    WARNING_FILTER += discard class="A volatile reference to an array doesn't treat the array elements as volatile"
#    WARNING_FILTER += discard class="Absolute path traversal in servlet"
#    WARNING_FILTER += discard class="An apparent infinite loop"
#    WARNING_FILTER += discard class="An apparent infinite recursive loop"
#    WARNING_FILTER += discard class="An increment to a volatile field isn't atomic"
#    WARNING_FILTER += discard class="Apparent method/constructor confusion"
#    WARNING_FILTER += discard class="Array formatted in useless way using format string"
#    WARNING_FILTER += discard class="Array index is out of bounds"
#    WARNING_FILTER += discard class="Array length is out of bounds"
#    WARNING_FILTER += discard class="Array offset is out of bounds"
#    WARNING_FILTER += discard class="Avoid Decimal Literals In Big Decimal Constructor"
#    WARNING_FILTER += discard class="Avoid Thread Group"
#    WARNING_FILTER += discard class="Bad attempt to compute absolute value of signed 32-bit hashcode"
#    WARNING_FILTER += discard class="Bad attempt to compute absolute value of signed random integer"
#    WARNING_FILTER += discard class="Bad comparison of int value with long constant"
#    WARNING_FILTER += discard class="Bad comparison of nonnegative value with negative constant or zero"
#    WARNING_FILTER += discard class="Bad comparison of signed byte"
#    WARNING_FILTER += discard class="Bad constant value for month"
#    WARNING_FILTER += discard class="Big Integer Instantiation"
#    WARNING_FILTER += discard class="BigDecimal constructed from double that isn't represented precisely"
#    WARNING_FILTER += discard class="Bitwise OR of signed byte value"
#    WARNING_FILTER += discard class="Bitwise add of signed byte value"
#    WARNING_FILTER += discard class="Boolean Instantiation"
#    WARNING_FILTER += discard class="Broken Null Check"
#    WARNING_FILTER += discard class="Call Super First"
#    WARNING_FILTER += discard class="Call Super Last"
#    WARNING_FILTER += discard class="Call to equals() comparing different interface types"
#    WARNING_FILTER += discard class="Call to equals() comparing different types"
#    WARNING_FILTER += discard class="Call to equals() comparing unrelated class and interface"
#    WARNING_FILTER += discard class="Call to equals(null)"
#    WARNING_FILTER += discard class="Call to static Calendar"
#    WARNING_FILTER += discard class="Call to static DateFormat"
#    WARNING_FILTER += discard class="Can't use reflection to check for presence of annotation without runtime retention"
#    WARNING_FILTER += discard class="Check Result Set"
#    WARNING_FILTER += discard class="Check Skip Result"
#    WARNING_FILTER += discard class="Check for sign of bitwise operation (high bit)"
#    WARNING_FILTER += discard class="Check to see if ((...) & 0) == 0"
#    WARNING_FILTER += discard class="Class Cast Exception With To Array"
#    WARNING_FILTER += discard class="Class defines equal(Object), should it be equals(Object)?"
#    WARNING_FILTER += discard class="Class defines field that masks a superclass field"
#    WARNING_FILTER += discard class="Class defines hashcode(), should it be hashCode()?"
#    WARNING_FILTER += discard class="Class defines tostring(), should it be toString()?"
#    WARNING_FILTER += discard class="Class overrides a method implemented in super class Adapter wrongly"
#    WARNING_FILTER += discard class="Class's readObject() method is synchronized"
#    WARNING_FILTER += discard class="Class's writeObject() method is synchronized but nothing else is"
#    WARNING_FILTER += discard class="Classloaders should only be created inside doPrivileged block"
#    WARNING_FILTER += discard class="Clone Method Must Be Public"
#    WARNING_FILTER += discard class="Clone Method Must Implement Cloneable (Clone-Implementation)"
#    WARNING_FILTER += discard class="Clone Method Return Type Must Match Class Name"
#    WARNING_FILTER += discard class="Clone Throws Clone Not Supported Exception"
#    WARNING_FILTER += discard class="Code checks for specific values returned by compareTo"
#    WARNING_FILTER += discard class="Collections should not contain themselves"
#    WARNING_FILTER += discard class="Comparing values with incompatible type qualifiers"
#    WARNING_FILTER += discard class="Condition.await() not in loop"
#    WARNING_FILTER += discard class="Constructor invokes Thread.start()"
#    WARNING_FILTER += discard class="Covariant equals() method defined for enum"
#    WARNING_FILTER += discard class="Covariant equals() method defined, Object.equals(Object) inherited"
#    WARNING_FILTER += discard class="Creation of ScheduledThreadPoolExecutor with zero core threads"
#    WARNING_FILTER += discard class="D'oh! A nonsensical method invocation"
#    WARNING_FILTER += discard class="Dead store due to switch statement fall through to throw"
#    WARNING_FILTER += discard class="Dead store due to switch statement fall through"
#    WARNING_FILTER += discard class="Dead store of class literal"
#    WARNING_FILTER += discard class="Deadly embrace of non-static inner class and thread local"
#    WARNING_FILTER += discard class="Do Not Hard Code SD Card"
#    WARNING_FILTER += discard class="Don't Call Thread Run"
#    WARNING_FILTER += discard class="Don't Use Float Type For Loop Indices"
#    WARNING_FILTER += discard class="Doomed attempt to append to an object output stream"
#    WARNING_FILTER += discard class="Doomed test for equality to NaN"
#    WARNING_FILTER += discard class="Double Checked Locking"
#    WARNING_FILTER += discard class="Double.longBitsToDouble invoked on an int"
#    WARNING_FILTER += discard class="Empty database password"
#    WARNING_FILTER += discard class="Empty synchronized block"
#    WARNING_FILTER += discard class="Enum field is public and mutable"
#    WARNING_FILTER += discard class="Exception created and dropped rather than thrown"
#    WARNING_FILTER += discard class="Field is a mutable Hashtable"
#    WARNING_FILTER += discard class="Field is a mutable array"
#    WARNING_FILTER += discard class="Field is a mutable collection which should be package protected"
#    WARNING_FILTER += discard class="Field is a mutable collection"
#    WARNING_FILTER += discard class="Field isn't final and can't be protected from malicious code"
#    WARNING_FILTER += discard class="Field isn't final but should be refactored to be so"
#    WARNING_FILTER += discard class="Field isn't final but should be"
#    WARNING_FILTER += discard class="Field not guarded against concurrent access"
#    WARNING_FILTER += discard class="Field only ever set to null"
#    WARNING_FILTER += discard class="Field should be both final and package protected"
#    WARNING_FILTER += discard class="Field should be moved out of an interface and made package protected"
#    WARNING_FILTER += discard class="Field should be package protected"
#    WARNING_FILTER += discard class="File.separator used for regular expression"
#    WARNING_FILTER += discard class="Finalizer should be protected, not public"
#    WARNING_FILTER += discard class="Format string placeholder incompatible with passed argument"
#    WARNING_FILTER += discard class="Format string references missing argument"
#    WARNING_FILTER += discard class="Futile attempt to change max pool size of ScheduledThreadPoolExecutor"
#    WARNING_FILTER += discard class="HTTP Response splitting vulnerability"
#    WARNING_FILTER += discard class="HTTP cookie formed from untrusted input"
#    WARNING_FILTER += discard class="Hardcoded constant database password"
#    WARNING_FILTER += discard class="Illegal format string"
#    WARNING_FILTER += discard class="Impossible cast"
#    WARNING_FILTER += discard class="Impossible downcast of toArray() result"
#    WARNING_FILTER += discard class="Impossible downcast"
#    WARNING_FILTER += discard class="Incompatible bitwise-and masks"
#    WARNING_FILTER += discard class="Incompatible bitwise-or masks"
#    WARNING_FILTER += discard class="Inconsistent synchronization"
#    WARNING_FILTER += discard class="Incorrect combination of Math.max and Math.min"
#    WARNING_FILTER += discard class="Incorrect lazy initialization and update of static field"
#    WARNING_FILTER += discard class="Incorrect lazy initialization of static field"
#    WARNING_FILTER += discard class="Integer multiply of result of integer remainder"
#    WARNING_FILTER += discard class="Integral value cast to double and then passed to Math.ceil"
#    WARNING_FILTER += discard class="Invalid syntax for regular expression"
#    WARNING_FILTER += discard class="Invocation of equals() on an array, which is equivalent to =="
#    WARNING_FILTER += discard class="Invocation of hashCode on an array"
#    WARNING_FILTER += discard class="Invocation of toString on an array"
#    WARNING_FILTER += discard class="Invocation of toString on an unnamed array"
#    WARNING_FILTER += discard class="Invokes run on a thread (did you mean to start it instead?)"
#    WARNING_FILTER += discard class="JSP reflected cross site scripting vulnerability"
#    WARNING_FILTER += discard class="JUnit assertion in run method will not be noticed by JUnit"
#    WARNING_FILTER += discard class="Jumbled Incrementer"
#    WARNING_FILTER += discard class="May expose internal representation by incorporating reference to mutable object"
#    WARNING_FILTER += discard class="May expose internal representation by returning reference to mutable object"
#    WARNING_FILTER += discard class="May expose internal static state by storing a mutable object into a static field"
#    WARNING_FILTER += discard class="MessageFormat supplied where printf style format expected"
#    WARNING_FILTER += discard class="Method assigns boolean literal in boolean expression"
#    WARNING_FILTER += discard class="Method attempts to access a prepared statement parameter with index 0"
#    WARNING_FILTER += discard class="Method attempts to access a result set field with index 0"
#    WARNING_FILTER += discard class="Method call passes null for non-null parameter (deref all)"
#    WARNING_FILTER += discard class="Method call passes null for non-null parameter"
#    WARNING_FILTER += discard class="Method call passes null to a non-null parameter"
#    WARNING_FILTER += discard class="Method calls Thread.sleep() with a lock held"
#    WARNING_FILTER += discard class="Method defines a variable that obscures a field"
#    WARNING_FILTER += discard class="Method does not check for null argument"
#    WARNING_FILTER += discard class="Method does not release lock on all exception paths"
#    WARNING_FILTER += discard class="Method does not release lock on all paths"
#    WARNING_FILTER += discard class="Method doesn't override method in superclass due to wrong package for parameter"
#    WARNING_FILTER += discard class="Method ignores return value"
#    WARNING_FILTER += discard class="Method invoked that should be only be invoked inside a doPrivileged block"
#    WARNING_FILTER += discard class="Method may return null, but is declared @Nonnull"
#    WARNING_FILTER += discard class="Method must be private in order for serialization to work"
#    WARNING_FILTER += discard class="Method relaxes nullness annotation on return value"
#    WARNING_FILTER += discard class="Method spins on field"
#    WARNING_FILTER += discard class="Method synchronizes on an updated field"
#    WARNING_FILTER += discard class="Method tightens nullness annotation on parameter"
#    WARNING_FILTER += discard class="Method with Optional return type returns explicit null"
#    WARNING_FILTER += discard class="Mismatched notify()"
#    WARNING_FILTER += discard class="Mismatched wait()"
#    WARNING_FILTER += discard class="Misplaced Null Check"
#    WARNING_FILTER += discard class="Monitor wait() called on Condition"
#    WARNING_FILTER += discard class="More arguments are passed than are actually used in the format string"
#    WARNING_FILTER += discard class="Mutable servlet field"
#    WARNING_FILTER += discard class="Naked notify"
#    WARNING_FILTER += discard class="No previous argument for format string"
#    WARNING_FILTER += discard class="No relationship between generic parameter and method argument"
#    WARNING_FILTER += discard class="Non-null field is not initialized"
#    WARNING_FILTER += discard class="Non-virtual method call passes null for non-null parameter"
#    WARNING_FILTER += discard class="Nonconstant string passed to execute or addBatch method on an SQL statement"
#    WARNING_FILTER += discard class="Nonsensical self computation involving a field (e.g., x & x)"
#    WARNING_FILTER += discard class="Nonsensical self computation involving a variable (e.g., x & x)"
#    WARNING_FILTER += discard class="Null pointer dereference in method on exception path"
#    WARNING_FILTER += discard class="Null pointer dereference"
#    WARNING_FILTER += discard class="Null value is guaranteed to be dereferenced"
#    WARNING_FILTER += discard class="Nullcheck of value previously dereferenced"
#    WARNING_FILTER += discard class="Override Both Equals And Hashcode"
#    WARNING_FILTER += discard class="Overwritten increment"
#    WARNING_FILTER += discard class="Possible bad parsing of shift operation"
#    WARNING_FILTER += discard class="Possible double check of field"
#    WARNING_FILTER += discard class="Possible exposure of partially initialized object"
#    WARNING_FILTER += discard class="Possible null pointer dereference in method on exception path"
#    WARNING_FILTER += discard class="Possible null pointer dereference"
#    WARNING_FILTER += discard class="Possibly incompatible element is stored in covariant array"
#    WARNING_FILTER += discard class="Primitive array passed to function expecting a variable number of object arguments"
#    WARNING_FILTER += discard class="Proper Clone Implementation"
#    WARNING_FILTER += discard class="Public enum method unconditionally sets its field"
#    WARNING_FILTER += discard class="Public static method may expose internal representation by returning array"
#    WARNING_FILTER += discard class="Random value from 0 to 1 is coerced to the integer 0"
#    WARNING_FILTER += discard class="Read of unwritten field"
#    WARNING_FILTER += discard class="Relative path traversal in servlet"
#    WARNING_FILTER += discard class="Repeated conditional tests"
#    WARNING_FILTER += discard class="Return From Finally Block"
#    WARNING_FILTER += discard class="Return value of putIfAbsent ignored, value passed to putIfAbsent reused"
#    WARNING_FILTER += discard class="Reversed method arguments"
#    WARNING_FILTER += discard class="Self assignment of field"
#    WARNING_FILTER += discard class="Self assignment of local rather than assignment to field"
#    WARNING_FILTER += discard class="Self comparison of field with itself"
#    WARNING_FILTER += discard class="Self comparison of value with itself"
#    WARNING_FILTER += discard class="Sequence of calls to concurrent abstraction may not be atomic"
#    WARNING_FILTER += discard class="Servlet reflected cross site scripting vulnerability in error page"
#    WARNING_FILTER += discard class="Servlet reflected cross site scripting vulnerability"
#    WARNING_FILTER += discard class="Signature declares use of unhashable class in hashed construct"
#    WARNING_FILTER += discard class="Static Calendar field"
#    WARNING_FILTER += discard class="Static DateFormat"
#    WARNING_FILTER += discard class="Static Thread.interrupted() method invoked on thread instance"
#    WARNING_FILTER += discard class="Store of null value into field annotated @Nonnull"
#    WARNING_FILTER += discard class="String index is out of bounds"
#    WARNING_FILTER += discard class="Suspicious reference comparison"
#    WARNING_FILTER += discard class="Synchronization on Boolean"
#    WARNING_FILTER += discard class="Synchronization on boxed primitive values"
#    WARNING_FILTER += discard class="Synchronization on boxed primitive"
#    WARNING_FILTER += discard class="Synchronization on field in futile attempt to guard that field"
#    WARNING_FILTER += discard class="Synchronization on getClass rather than class literal"
#    WARNING_FILTER += discard class="Synchronization on interned String"
#    WARNING_FILTER += discard class="Synchronization performed on Lock"
#    WARNING_FILTER += discard class="Synchronization performed on util.concurrent instance"
#    WARNING_FILTER += discard class="Synchronize and null check on the same field."
#    WARNING_FILTER += discard class="TestCase declares a bad suite method"
#    WARNING_FILTER += discard class="TestCase defines setUp that doesn't call super.setUp()"
#    WARNING_FILTER += discard class="TestCase defines tearDown that doesn't call super.tearDown()"
#    WARNING_FILTER += discard class="TestCase has no tests"
#    WARNING_FILTER += discard class="TestCase implements a non-static suite method"
#    WARNING_FILTER += discard class="The readResolve method must not be declared as a static method."
#    WARNING_FILTER += discard class="The type of a supplied argument doesn't match format specifier"
#    WARNING_FILTER += discard class="Uncallable method defined in anonymous class"
#    WARNING_FILTER += discard class="Unconditional If Statement"
#    WARNING_FILTER += discard class="Unconditional wait"
#    WARNING_FILTER += discard class="Uninitialized read of field in constructor"
#    WARNING_FILTER += discard class="Uninitialized read of field method called from constructor of superclass"
#    WARNING_FILTER += discard class="Unnecessary type check done using instanceof operator"
#    WARNING_FILTER += discard class="Unneeded use of currentThread() call, to call interrupted()"
#    WARNING_FILTER += discard class="Unsynchronized get method, synchronized set method"
#    WARNING_FILTER += discard class="Unwritten field"
#    WARNING_FILTER += discard class="Use of class without a hashCode() method in a hashed data structure"
#    WARNING_FILTER += discard class="Useless increment in return statement"
#    WARNING_FILTER += discard class="Useless non-empty void method"
#    WARNING_FILTER += discard class="Useless object created on stack"
#    WARNING_FILTER += discard class="Useless object created"
#    WARNING_FILTER += discard class="Useless/vacuous call to EasyMock method"
#    WARNING_FILTER += discard class="Using monitor style wait methods on util.concurrent abstraction"
#    WARNING_FILTER += discard class="Using notify() rather than notifyAll()"
#    WARNING_FILTER += discard class="Using pointer equality to compare different types"
#    WARNING_FILTER += discard class="Vacuous call to collections"
#    WARNING_FILTER += discard class="Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required"
#    WARNING_FILTER += discard class="Value annotated as never carrying a type qualifier used where value carrying that qualifier is required"
#    WARNING_FILTER += discard class="Value is null and guaranteed to be dereferenced on exception path"
#    WARNING_FILTER += discard class="Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier"
#    WARNING_FILTER += discard class="Value that might not carry a type qualifier is always used in a way requires that type qualifier"
#    WARNING_FILTER += discard class="Value without a type qualifier used where a value is required to have that qualifier"
#    WARNING_FILTER += discard class="Very confusing method names"
#    WARNING_FILTER += discard class="Wait not in loop"
#    WARNING_FILTER += discard class="Wait with two locks held"
#    WARNING_FILTER += discard class="\".\" or \"|\" used for regular expression"
#    WARNING_FILTER += discard class="close() invoked on a value that is always null"
#    WARNING_FILTER += discard class="compareTo()/compare() incorrectly handles float or double value"
#    WARNING_FILTER += discard class="equals method always returns false"
#    WARNING_FILTER += discard class="equals method always returns true"
#    WARNING_FILTER += discard class="equals method compares class names rather than class objects"
#    WARNING_FILTER += discard class="equals method overrides equals in superclass and may not be symmetric"
#    WARNING_FILTER += discard class="equals() method defined that doesn't override Object.equals(Object)"
#    WARNING_FILTER += discard class="equals() method defined that doesn't override equals(Object)"
#    WARNING_FILTER += discard class="equals() used to compare array and nonarray"
#    WARNING_FILTER += discard class="equals(...) used to compare incompatible arrays"
#    WARNING_FILTER += discard class="hasNext method invokes next"
#    WARNING_FILTER += discard class="instanceof will always return false"
#    WARNING_FILTER += discard class="int value cast to float and then passed to Math.round"
#    WARNING_FILTER += discard class="int value converted to long and used as absolute time"
#
#  The following checks are disabled by default. To enable checks
#  for a particular class, use the corresponding "allow" rule.
#  (Checks for some classes may require additional settings in order
#  to work correctly. See the individual warning class documentation
#  in the manual for full information.)
#    (C and C++ warning classes)
#    WARNING_FILTER += allow class="## Follows # Operator"
#    WARNING_FILTER += allow class="/* in Comment"
#    WARNING_FILTER += allow class="// in Comment"
#    WARNING_FILTER += allow class="2$Buffer Overrun"
#    WARNING_FILTER += allow class="Addition Overflow of Allocation Size"
#    WARNING_FILTER += allow class="Addition Overflow of Size"
#    WARNING_FILTER += allow class="Array Parameter Mismatch"
#    WARNING_FILTER += allow class="Assignment Result in Expression"
#    WARNING_FILTER += allow class="Assignment in Conditional"
#    WARNING_FILTER += allow class="Backwards goto"
#    WARNING_FILTER += allow class="Basic Numerical Type Used"
#    WARNING_FILTER += allow class="Bit-field Signedness Not Explicit"
#    WARNING_FILTER += allow class="Bit-field Too Short"
#    WARNING_FILTER += allow class="Body Is Not Compound Statement"
#    WARNING_FILTER += allow class="Boolean switch Expression"
#    WARNING_FILTER += allow class="C++ Comment in C"
#    WARNING_FILTER += allow class="Cast Removes const Qualifier"
#    WARNING_FILTER += allow class="Cast Removes volatile Qualifier"
#    WARNING_FILTER += allow class="Cast: Arithmetic Type/Void Pointer"
#    WARNING_FILTER += allow class="Cast: Non-integer Arithmetic Type/Object Pointer"
#    WARNING_FILTER += allow class="Cast: Object Pointers"
#    WARNING_FILTER += allow class="Code Before #include"
#    WARNING_FILTER += allow class="Coercion: Integer Constant to Pointer"
#    WARNING_FILTER += allow class="Comment Suggests Code Unfinished"
#    WARNING_FILTER += allow class="Commented-out Code"
#    WARNING_FILTER += allow class="Condition Contains Side Effects"
#    WARNING_FILTER += allow class="Condition Is Not Boolean"
#    WARNING_FILTER += allow class="Conditional Compilation"
#    WARNING_FILTER += allow class="Conflicting Lock Order"
#    WARNING_FILTER += allow class="Confusing Literal Suffix"
#    WARNING_FILTER += allow class="Continue Statement"
#    WARNING_FILTER += allow class="Conversion from Function Pointer"
#    WARNING_FILTER += allow class="Conversion to Function Pointer"
#    WARNING_FILTER += allow class="Conversion: Pointer to Incomplete"
#    WARNING_FILTER += allow class="Conversion: Pointer/Integer"
#    WARNING_FILTER += allow class="Conversion: Void Pointer to Object Pointer"
#    WARNING_FILTER += allow class="Dangerous Include File Name"
#    WARNING_FILTER += allow class="Data Race"
#    WARNING_FILTER += allow class="Declaration of Flexible Array Member"
#    WARNING_FILTER += allow class="Declaration of Reserved Name"
#    WARNING_FILTER += allow class="Declaration of Variable Length Array"
#    WARNING_FILTER += allow class="Dynamic Allocation After Initialization"
#    WARNING_FILTER += allow class="Excessive Stack Depth"
#    WARNING_FILTER += allow class="Expression Value Widened by Assignment"
#    WARNING_FILTER += allow class="Expression Value Widened by Other Operand"
#    WARNING_FILTER += allow class="Extern Array Without Size"
#    WARNING_FILTER += allow class="FILE* Dereference"
#    WARNING_FILTER += allow class="Float-typed Loop Counter"
#    WARNING_FILTER += allow class="Function Defined in Header File"
#    WARNING_FILTER += allow class="Function Pointer Conversion"
#    WARNING_FILTER += allow class="Function Pointer"
#    WARNING_FILTER += allow class="Function Too Long"
#    WARNING_FILTER += allow class="GNU Extension"
#    WARNING_FILTER += allow class="GNU Typeof"
#    WARNING_FILTER += allow class="Global Variable Declared with Different Types"
#    WARNING_FILTER += allow class="Goto Statement"
#    WARNING_FILTER += allow class="Hardcoded DNS Name"
#    WARNING_FILTER += allow class="High Risk Loop"
#    WARNING_FILTER += allow class="Implicit Address of Function"
#    WARNING_FILTER += allow class="Implicit Function Declaration"
#    WARNING_FILTER += allow class="Inappropriate Assignment Type"
#    WARNING_FILTER += allow class="Inappropriate Bit-field Type"
#    WARNING_FILTER += allow class="Inappropriate Cast Type"
#    WARNING_FILTER += allow class="Inappropriate Cast Type: Expression"
#    WARNING_FILTER += allow class="Inappropriate Character Arithmetic"
#    WARNING_FILTER += allow class="Inappropriate Operand Type"
#    WARNING_FILTER += allow class="Incomplete Function Prototype"
#    WARNING_FILTER += allow class="Inconsistent Enumerator Initialization"
#    WARNING_FILTER += allow class="Inconsistent Function Declarations"
#    WARNING_FILTER += allow class="Inconsistent Object Declarations"
#    WARNING_FILTER += allow class="Inline Assembly Code"
#    WARNING_FILTER += allow class="Inline Function Not static"
#    WARNING_FILTER += allow class="Invalid Preprocessor Directive"
#    WARNING_FILTER += allow class="Label Not In Enclosing Block"
#    WARNING_FILTER += allow class="Leftover Debug Code"
#    WARNING_FILTER += allow class="Library Function Override"
#    WARNING_FILTER += allow class="Line Splicing in Comment"
#    WARNING_FILTER += allow class="Lock/Unlock Mismatch"
#    WARNING_FILTER += allow class="Locked Twice"
#    WARNING_FILTER += allow class="Macro Defined in Function Body"
#    WARNING_FILTER += allow class="Macro Definition of Reserved Name"
#    WARNING_FILTER += allow class="Macro Does Not End With } or )"
#    WARNING_FILTER += allow class="Macro Does Not Start With { or ("
#    WARNING_FILTER += allow class="Macro Name is C Keyword"
#    WARNING_FILTER += allow class="Macro Parameter Not Parenthesized"
#    WARNING_FILTER += allow class="Macro Undefined in Function Body"
#    WARNING_FILTER += allow class="Macro Undefinition of Reserved Name"
#    WARNING_FILTER += allow class="Macro Uses # Operator"
#    WARNING_FILTER += allow class="Macro Uses ## Operator"
#    WARNING_FILTER += allow class="Macro Uses -> Operator"
#    WARNING_FILTER += allow class="Macro Uses Unary * Operator"
#    WARNING_FILTER += allow class="Macro Uses [] Operator"
#    WARNING_FILTER += allow class="Malformed #include"
#    WARNING_FILTER += allow class="Malformed for-loop Condition"
#    WARNING_FILTER += allow class="Malformed for-loop Initialization"
#    WARNING_FILTER += allow class="Malformed for-loop Step"
#    WARNING_FILTER += allow class="Malformed switch Statement"
#    WARNING_FILTER += allow class="Memory Protection Removal"
#    WARNING_FILTER += allow class="Microsoft Extension"
#    WARNING_FILTER += allow class="Mismatched Operand Types"
#    WARNING_FILTER += allow class="Misplaced Return Statement"
#    WARNING_FILTER += allow class="Misplaced case"
#    WARNING_FILTER += allow class="Misplaced default"
#    WARNING_FILTER += allow class="Missing Braces in Initialization"
#    WARNING_FILTER += allow class="Missing External Declaration"
#    WARNING_FILTER += allow class="Missing External Definition"
#    WARNING_FILTER += allow class="Missing Final else"
#    WARNING_FILTER += allow class="Missing Literal Suffix"
#    WARNING_FILTER += allow class="Missing Lock Acquisition"
#    WARNING_FILTER += allow class="Missing Lock Release"
#    WARNING_FILTER += allow class="Missing Parentheses"
#    WARNING_FILTER += allow class="Missing break"
#    WARNING_FILTER += allow class="Missing default"
#    WARNING_FILTER += allow class="Missing for-loop Step"
#    WARNING_FILTER += allow class="Missing for-loop Termination"
#    WARNING_FILTER += allow class="Mixed Assembly and Code"
#    WARNING_FILTER += allow class="Modified Parameter"
#    WARNING_FILTER += allow class="Multiple Abnormal Loop Exits"
#    WARNING_FILTER += allow class="Multiple Declarations On Line"
#    WARNING_FILTER += allow class="Multiple Declarations of a Global"
#    WARNING_FILTER += allow class="Multiple External Declarations"
#    WARNING_FILTER += allow class="Multiple External Definitions"
#    WARNING_FILTER += allow class="Multiple Return Statements"
#    WARNING_FILTER += allow class="Multiple Statements On Line"
#    WARNING_FILTER += allow class="Multiplication Overflow of Allocation Size"
#    WARNING_FILTER += allow class="Multiplication Overflow of Size"
#    WARNING_FILTER += allow class="Nested Function Declaration"
#    WARNING_FILTER += allow class="Nested Locks"
#    WARNING_FILTER += allow class="No Matching #endif"
#    WARNING_FILTER += allow class="No Matching #if"
#    WARNING_FILTER += allow class="Non-Boolean Preprocessor Expression"
#    WARNING_FILTER += allow class="Non-const String Literal"
#    WARNING_FILTER += allow class="Non-distinct Identifiers: External Names"
#    WARNING_FILTER += allow class="Non-distinct Identifiers: Macro/Macro"
#    WARNING_FILTER += allow class="Non-distinct Identifiers: Macro/Other"
#    WARNING_FILTER += allow class="Non-distinct Identifiers: Nested Scope"
#    WARNING_FILTER += allow class="Non-distinct Identifiers: Same Scope"
#    WARNING_FILTER += allow class="Non-unique Identifiers: External Name"
#    WARNING_FILTER += allow class="Non-unique Identifiers: Internal Name"
#    WARNING_FILTER += allow class="Non-unique Identifiers: Tag"
#    WARNING_FILTER += allow class="Non-unique Identifiers: Typedef"
#    WARNING_FILTER += allow class="Not All Warnings Are Enabled"
#    WARNING_FILTER += allow class="Not Enough Assertions"
#    WARNING_FILTER += allow class="Object Defined in Header File"
#    WARNING_FILTER += allow class="Octal Constant"
#    WARNING_FILTER += allow class="Over-initialized Element"
#    WARNING_FILTER += allow class="Partially Uninitialized Aggregate"
#    WARNING_FILTER += allow class="Partially Uninitialized Array"
#    WARNING_FILTER += allow class="Pointer Arithmetic"
#    WARNING_FILTER += allow class="Pointer Before Beginning of Object"
#    WARNING_FILTER += allow class="Pointer Past End of Object"
#    WARNING_FILTER += allow class="Pointer Type Inside Typedef"
#    WARNING_FILTER += allow class="Possible Anti-Debugging"
#    WARNING_FILTER += allow class="Potential Timebomb"
#    WARNING_FILTER += allow class="Potential Unbounded Loop"
#    WARNING_FILTER += allow class="Preprocessing Directives in Macro Argument"
#    WARNING_FILTER += allow class="Recursion"
#    WARNING_FILTER += allow class="Recursive Macro"
#    WARNING_FILTER += allow class="Restrict Qualifier Used"
#    WARNING_FILTER += allow class="Risky Integer Promotion"
#    WARNING_FILTER += allow class="Scope Could Be File Static"
#    WARNING_FILTER += allow class="Scope Could Be Local Static"
#    WARNING_FILTER += allow class="Side Effects in Expression with Decrement"
#    WARNING_FILTER += allow class="Side Effects in Expression with Increment"
#    WARNING_FILTER += allow class="Side Effects in Initializer List"
#    WARNING_FILTER += allow class="Side Effects in Logical Operand"
#    WARNING_FILTER += allow class="Side Effects in sizeof"
#    WARNING_FILTER += allow class="Signal Handler Entry Point"
#    WARNING_FILTER += allow class="Socket In Wrong State"
#    WARNING_FILTER += allow class="Static Array Parameter"
#    WARNING_FILTER += allow class="Subtraction Underflow of Allocation Size"
#    WARNING_FILTER += allow class="Subtraction Underflow of Size"
#    WARNING_FILTER += allow class="Tainted Allocation Size"
#    WARNING_FILTER += allow class="Tainted Configuration Setting"
#    WARNING_FILTER += allow class="Tainted Filename"
#    WARNING_FILTER += allow class="Tainted Network Address"
#    WARNING_FILTER += allow class="Tainted Write"
#    WARNING_FILTER += allow class="Task Delay Function"
#    WARNING_FILTER += allow class="Thread Entry Point"
#    WARNING_FILTER += allow class="Too Few Cases in switch"
#    WARNING_FILTER += allow class="Too Many Dereferences"
#    WARNING_FILTER += allow class="Too Many Parameters"
#    WARNING_FILTER += allow class="Too Much Indirection in Declaration"
#    WARNING_FILTER += allow class="Trigraph"
#    WARNING_FILTER += allow class="Truncation of Allocation Size"
#    WARNING_FILTER += allow class="Truncation of Size"
#    WARNING_FILTER += allow class="Typographically Ambiguous Identifiers"
#    WARNING_FILTER += allow class="Unbalanced Parenthesis"
#    WARNING_FILTER += allow class="Unchecked Parameter Dereference"
#    WARNING_FILTER += allow class="Undefined Macro in #if"
#    WARNING_FILTER += allow class="Unexercised Call"
#    WARNING_FILTER += allow class="Unexercised Computation"
#    WARNING_FILTER += allow class="Unexercised Conditional"
#    WARNING_FILTER += allow class="Unexercised Control Flow"
#    WARNING_FILTER += allow class="Unexercised Data Flow"
#    WARNING_FILTER += allow class="Union Type"
#    WARNING_FILTER += allow class="Unknown Lock"
#    WARNING_FILTER += allow class="Unreachable Control Flow"
#    WARNING_FILTER += allow class="Unspecified Array Size with Designator Initialization"
#    WARNING_FILTER += allow class="Unterminated Escape Sequence"
#    WARNING_FILTER += allow class="Untrusted Library Load"
#    WARNING_FILTER += allow class="Untrusted Network Host"
#    WARNING_FILTER += allow class="Untrusted Network Port"
#    WARNING_FILTER += allow class="Untrusted Process Creation"
#    WARNING_FILTER += allow class="Unused Label"
#    WARNING_FILTER += allow class="Unused Macro"
#    WARNING_FILTER += allow class="Unused Parameter"
#    WARNING_FILTER += allow class="Unused Tag"
#    WARNING_FILTER += allow class="Unused Type"
#    WARNING_FILTER += allow class="Unused Variable"
#    WARNING_FILTER += allow class="Use of #undef"
#    WARNING_FILTER += allow class="Use of <fenv.h> Exception Handling Function"
#    WARNING_FILTER += allow class="Use of <setjmp.h>"
#    WARNING_FILTER += allow class="Use of <signal.h>"
#    WARNING_FILTER += allow class="Use of <stdarg.h> Feature"
#    WARNING_FILTER += allow class="Use of <stdio.h> Input/Output Macro"
#    WARNING_FILTER += allow class="Use of <stdio.h> Input/Output"
#    WARNING_FILTER += allow class="Use of <tgmath.h>"
#    WARNING_FILTER += allow class="Use of <time.h> Time/Date Function"
#    WARNING_FILTER += allow class="Use of <wchar.h> Input/Output Macro"
#    WARNING_FILTER += allow class="Use of <wchar.h> Input/Output"
#    WARNING_FILTER += allow class="Use of AddAccessAllowedAce"
#    WARNING_FILTER += allow class="Use of AddAccessDeniedAce"
#    WARNING_FILTER += allow class="Use of AfxLoadLibrary"
#    WARNING_FILTER += allow class="Use of AfxParseURL"
#    WARNING_FILTER += allow class="Use of CoLoadLibrary"
#    WARNING_FILTER += allow class="Use of Comma Operator"
#    WARNING_FILTER += allow class="Use of CreateFile"
#    WARNING_FILTER += allow class="Use of CreateProcess"
#    WARNING_FILTER += allow class="Use of CreateThread"
#    WARNING_FILTER += allow class="Use of FormatMessage"
#    WARNING_FILTER += allow class="Use of LoadLibrary"
#    WARNING_FILTER += allow class="Use of LoadModule"
#    WARNING_FILTER += allow class="Use of MoveFile"
#    WARNING_FILTER += allow class="Use of OemToAnsi"
#    WARNING_FILTER += allow class="Use of OemToChar"
#    WARNING_FILTER += allow class="Use of SHCreateProcessAsUserW"
#    WARNING_FILTER += allow class="Use of ShellExecute"
#    WARNING_FILTER += allow class="Use of StrCatChainW"
#    WARNING_FILTER += allow class="Use of WinExec"
#    WARNING_FILTER += allow class="Use of _exec"
#    WARNING_FILTER += allow class="Use of _spawn"
#    WARNING_FILTER += allow class="Use of abort"
#    WARNING_FILTER += allow class="Use of atof"
#    WARNING_FILTER += allow class="Use of atoi"
#    WARNING_FILTER += allow class="Use of atol"
#    WARNING_FILTER += allow class="Use of atoll"
#    WARNING_FILTER += allow class="Use of bsearch"
#    WARNING_FILTER += allow class="Use of catopen"
#    WARNING_FILTER += allow class="Use of chroot"
#    WARNING_FILTER += allow class="Use of cuserid"
#    WARNING_FILTER += allow class="Use of execlp"
#    WARNING_FILTER += allow class="Use of execvp"
#    WARNING_FILTER += allow class="Use of exit"
#    WARNING_FILTER += allow class="Use of getenv"
#    WARNING_FILTER += allow class="Use of getlogin"
#    WARNING_FILTER += allow class="Use of getopt"
#    WARNING_FILTER += allow class="Use of getpass"
#    WARNING_FILTER += allow class="Use of getwd"
#    WARNING_FILTER += allow class="Use of longjmp"
#    WARNING_FILTER += allow class="Use of memset"
#    WARNING_FILTER += allow class="Use of mkstemp"
#    WARNING_FILTER += allow class="Use of offsetof"
#    WARNING_FILTER += allow class="Use of popen"
#    WARNING_FILTER += allow class="Use of qsort"
#    WARNING_FILTER += allow class="Use of rand"
#    WARNING_FILTER += allow class="Use of rand48 Function"
#    WARNING_FILTER += allow class="Use of random"
#    WARNING_FILTER += allow class="Use of realpath"
#    WARNING_FILTER += allow class="Use of recvmsg"
#    WARNING_FILTER += allow class="Use of setjmp"
#    WARNING_FILTER += allow class="Use of setuid"
#    WARNING_FILTER += allow class="Use of signal"
#    WARNING_FILTER += allow class="Use of strcat"
#    WARNING_FILTER += allow class="Use of strcmp"
#    WARNING_FILTER += allow class="Use of strcpy"
#    WARNING_FILTER += allow class="Use of strlen"
#    WARNING_FILTER += allow class="Use of strtrns"
#    WARNING_FILTER += allow class="Use of syslog"
#    WARNING_FILTER += allow class="Use of system"
#    WARNING_FILTER += allow class="Use of t_open"
#    WARNING_FILTER += allow class="Use of ttyname"
#    WARNING_FILTER += allow class="Use of vfork"
#    WARNING_FILTER += allow class="Variadic Macro"
#    WARNING_FILTER += allow class="Warnings Not Treated As Errors"
#    WARNING_FILTER += allow class="Weak Cryptography"
#    WARNING_FILTER += allow class="Write to Read Only File"
#    WARNING_FILTER += allow class="chroot without chdir"
#    
#    (Java warning classes)
#    WARNING_FILTER += allow class="Abstract Class Without Abstract Method"
#    WARNING_FILTER += allow class="Abstract Class Without Any Method"
#    WARNING_FILTER += allow class="Abstract Naming"
#    WARNING_FILTER += allow class="Abstract class defines covariant compareTo() method"
#    WARNING_FILTER += allow class="Abstract class defines covariant equals() method"
#    WARNING_FILTER += allow class="Accessor Class Generation"
#    WARNING_FILTER += allow class="Add Empty String"
#    WARNING_FILTER += allow class="Adding elements of an entry set may fail due to reuse of Entry objects"
#    WARNING_FILTER += allow class="Append Character With Char"
#    WARNING_FILTER += allow class="Array Is Stored Directly"
#    WARNING_FILTER += allow class="Assignment In Operand"
#    WARNING_FILTER += allow class="Assignment To Non Final Static"
#    WARNING_FILTER += allow class="At Least One Constructor"
#    WARNING_FILTER += allow class="Avoid Accessibility Alteration"
#    WARNING_FILTER += allow class="Avoid Array Loops"
#    WARNING_FILTER += allow class="Avoid Assert As Identifier"
#    WARNING_FILTER += allow class="Avoid Branching Statement As Last In Loop"
#    WARNING_FILTER += allow class="Avoid Calling Finalize"
#    WARNING_FILTER += allow class="Avoid Catching Generic Exception"
#    WARNING_FILTER += allow class="Avoid Catching NPE"
#    WARNING_FILTER += allow class="Avoid Catching Throwable"
#    WARNING_FILTER += allow class="Avoid Constants Interface"
#    WARNING_FILTER += allow class="Avoid Deeply Nested If Stmts"
#    WARNING_FILTER += allow class="Avoid Dollar Signs"
#    WARNING_FILTER += allow class="Avoid Duplicate Literals"
#    WARNING_FILTER += allow class="Avoid Enum As Identifier"
#    WARNING_FILTER += allow class="Avoid Field Name Matching Method Name"
#    WARNING_FILTER += allow class="Avoid Field Name Matching Type Name"
#    WARNING_FILTER += allow class="Avoid Final Local Variable"
#    WARNING_FILTER += allow class="Avoid Instanceof Checks In Catch Clause"
#    WARNING_FILTER += allow class="Avoid Instantiating Objects In Loops"
#    WARNING_FILTER += allow class="Avoid Literals In If Condition"
#    WARNING_FILTER += allow class="Avoid Losing Exception Information"
#    WARNING_FILTER += allow class="Avoid Multiple Unary Operators"
#    WARNING_FILTER += allow class="Avoid Prefixing Method Parameters"
#    WARNING_FILTER += allow class="Avoid Protected Field In Final Class"
#    WARNING_FILTER += allow class="Avoid Protected Method In Final Class Not Extending"
#    WARNING_FILTER += allow class="Avoid Reassigning Parameters"
#    WARNING_FILTER += allow class="Avoid Rethrowing Exception"
#    WARNING_FILTER += allow class="Avoid String Buffer Field"
#    WARNING_FILTER += allow class="Avoid Synchronized At Method Level"
#    WARNING_FILTER += allow class="Avoid Throwing New Instance Of Same Exception"
#    WARNING_FILTER += allow class="Avoid Throwing Null Pointer Exception"
#    WARNING_FILTER += allow class="Avoid Throwing Raw Exception Types"
#    WARNING_FILTER += allow class="Avoid Using Hard Coded IP"
#    WARNING_FILTER += allow class="Avoid Using Native Code"
#    WARNING_FILTER += allow class="Avoid Using Octal Values"
#    WARNING_FILTER += allow class="Avoid Using Short Type"
#    WARNING_FILTER += allow class="Avoid Using Volatile"
#    WARNING_FILTER += allow class="Avoid printStackTrace"
#    WARNING_FILTER += allow class="Bad Comparison"
#    WARNING_FILTER += allow class="Bean Members Should Serialize"
#    WARNING_FILTER += allow class="Boolean Get Method Name"
#    WARNING_FILTER += allow class="Boolean Inversion"
#    WARNING_FILTER += allow class="Boxed value is unboxed and then immediately reboxed"
#    WARNING_FILTER += allow class="Boxing a primitive to compare"
#    WARNING_FILTER += allow class="Boxing/unboxing to parse a primitive"
#    WARNING_FILTER += allow class="Byte Instantiation"
#    WARNING_FILTER += allow class="Call Super In Constructor"
#    WARNING_FILTER += allow class="Certain swing methods needs to be invoked in Swing thread"
#    WARNING_FILTER += allow class="Check for oddness that won't work for negative numbers"
#    WARNING_FILTER += allow class="Check for sign of bitwise operation"
#    WARNING_FILTER += allow class="Class Naming Conventions"
#    WARNING_FILTER += allow class="Class With Only Private Constructors Should Be Final"
#    WARNING_FILTER += allow class="Class defines clone() but doesn't implement Cloneable"
#    WARNING_FILTER += allow class="Class defines compareTo(...) and uses Object.equals()"
#    WARNING_FILTER += allow class="Class defines equals() and uses Object.hashCode()"
#    WARNING_FILTER += allow class="Class defines equals() but not hashCode()"
#    WARNING_FILTER += allow class="Class defines hashCode() and uses Object.equals()"
#    WARNING_FILTER += allow class="Class defines hashCode() but not equals()"
#    WARNING_FILTER += allow class="Class doesn't override equals in superclass"
#    WARNING_FILTER += allow class="Class extends Servlet class and uses instance variables"
#    WARNING_FILTER += allow class="Class extends Struts Action class and uses instance variables"
#    WARNING_FILTER += allow class="Class implements Cloneable but does not define or use clone method"
#    WARNING_FILTER += allow class="Class implements same interface as superclass"
#    WARNING_FILTER += allow class="Class inherits equals() and uses Object.hashCode()"
#    WARNING_FILTER += allow class="Class is Externalizable but doesn't define a void constructor"
#    WARNING_FILTER += allow class="Class is Serializable but its superclass doesn't define a void constructor"
#    WARNING_FILTER += allow class="Class is Serializable, but doesn't define serialVersionUID"
#    WARNING_FILTER += allow class="Class is final but declares protected field"
#    WARNING_FILTER += allow class="Class is not derived from an Exception, even though it is named as such"
#    WARNING_FILTER += allow class="Class names should start with an upper case letter"
#    WARNING_FILTER += allow class="Class names shouldn't shadow simple name of implemented interface"
#    WARNING_FILTER += allow class="Class names shouldn't shadow simple name of superclass"
#    WARNING_FILTER += allow class="Clone Method Must Implement Cloneable"
#    WARNING_FILTER += allow class="Clone method may return null"
#    WARNING_FILTER += allow class="Close Resource"
#    WARNING_FILTER += allow class="Code contains a hard coded reference to an absolute pathname"
#    WARNING_FILTER += allow class="Collapsible If Statements"
#    WARNING_FILTER += allow class="Comment Content"
#    WARNING_FILTER += allow class="Comment Default Access Modifier"
#    WARNING_FILTER += allow class="Comment Required"
#    WARNING_FILTER += allow class="Comment Size"
#    WARNING_FILTER += allow class="Comparator doesn't implement Serializable"
#    WARNING_FILTER += allow class="Compare Objects With Equals"
#    WARNING_FILTER += allow class="Comparison of String objects using == or !="
#    WARNING_FILTER += allow class="Comparison of String parameter using == or !="
#    WARNING_FILTER += allow class="Complicated, subtle or wrong increment in for-loop"
#    WARNING_FILTER += allow class="Computation of average could overflow"
#    WARNING_FILTER += allow class="Condition has no effect due to the variable type"
#    WARNING_FILTER += allow class="Condition has no effect"
#    WARNING_FILTER += allow class="Confusing Ternary"
#    WARNING_FILTER += allow class="Confusing method names"
#    WARNING_FILTER += allow class="Consecutive Appends Should Reuse"
#    WARNING_FILTER += allow class="Consecutive Literal Appends"
#    WARNING_FILTER += allow class="Consider returning a zero length array rather than null"
#    WARNING_FILTER += allow class="Consider using Locale parameterized version of invoked method"
#    WARNING_FILTER += allow class="Constructor Calls Overridable Method"
#    WARNING_FILTER += allow class="Could be refactored into a named static inner class"
#    WARNING_FILTER += allow class="Could be refactored into a static inner class"
#    WARNING_FILTER += allow class="Coupling Between Objects"
#    WARNING_FILTER += allow class="Covariant array assignment to a field"
#    WARNING_FILTER += allow class="Covariant array assignment to a local variable"
#    WARNING_FILTER += allow class="Covariant array is returned from the method"
#    WARNING_FILTER += allow class="Covariant compareTo() method defined"
#    WARNING_FILTER += allow class="Covariant equals() method defined"
#    WARNING_FILTER += allow class="Creates an empty jar file entry"
#    WARNING_FILTER += allow class="Creates an empty zip file entry"
#    WARNING_FILTER += allow class="Cyclomatic Complexity"
#    WARNING_FILTER += allow class="Dataflow Anomaly Analysis"
#    WARNING_FILTER += allow class="Dead store of null to local variable"
#    WARNING_FILTER += allow class="Dead store to local variable that shadows field"
#    WARNING_FILTER += allow class="Dead store to local variable"
#    WARNING_FILTER += allow class="Default Label Not Last In Switch Stmt"
#    WARNING_FILTER += allow class="Default Package"
#    WARNING_FILTER += allow class="Dereference of the result of readLine() without nullcheck"
#    WARNING_FILTER += allow class="Do Not Call Garbage Collection Explicitly"
#    WARNING_FILTER += allow class="Do Not Call System Exit"
#    WARNING_FILTER += allow class="Do Not Extend Java Lang Error"
#    WARNING_FILTER += allow class="Do Not Throw Exception In Finally"
#    WARNING_FILTER += allow class="Do Not Use Threads"
#    WARNING_FILTER += allow class="Don't Import Java Lang"
#    WARNING_FILTER += allow class="Don't Import Sun"
#    WARNING_FILTER += allow class="Don't reuse entry objects in iterators"
#    WARNING_FILTER += allow class="Don't use removeAll to clear a collection"
#    WARNING_FILTER += allow class="Double assignment of field"
#    WARNING_FILTER += allow class="Double assignment of local variable"
#    WARNING_FILTER += allow class="Dubious catching of IllegalMonitorStateException"
#    WARNING_FILTER += allow class="Duplicate Imports"
#    WARNING_FILTER += allow class="Empty Catch Block"
#    WARNING_FILTER += allow class="Empty Finalizer"
#    WARNING_FILTER += allow class="Empty Finally Block"
#    WARNING_FILTER += allow class="Empty If Stmt"
#    WARNING_FILTER += allow class="Empty Initializer"
#    WARNING_FILTER += allow class="Empty Method In Abstract Class Should Be Abstract"
#    WARNING_FILTER += allow class="Empty Statement Block"
#    WARNING_FILTER += allow class="Empty Statement Not In Loop"
#    WARNING_FILTER += allow class="Empty Static Initializer"
#    WARNING_FILTER += allow class="Empty Switch Statements"
#    WARNING_FILTER += allow class="Empty Synchronized Block"
#    WARNING_FILTER += allow class="Empty Try Block"
#    WARNING_FILTER += allow class="Empty While Stmt"
#    WARNING_FILTER += allow class="Empty finalizer should be deleted"
#    WARNING_FILTER += allow class="Equals Null"
#    WARNING_FILTER += allow class="Equals checks for incompatible operand"
#    WARNING_FILTER += allow class="Equals method should not assume anything about the type of its argument"
#    WARNING_FILTER += allow class="Exception As Flow Control"
#    WARNING_FILTER += allow class="Exception is caught when Exception is not thrown"
#    WARNING_FILTER += allow class="Excessive Class Length"
#    WARNING_FILTER += allow class="Excessive Imports"
#    WARNING_FILTER += allow class="Excessive Method Length"
#    WARNING_FILTER += allow class="Excessive Parameter List"
#    WARNING_FILTER += allow class="Excessive Public Count"
#    WARNING_FILTER += allow class="Explicit garbage collection; extremely dubious except in benchmarking code"
#    WARNING_FILTER += allow class="Explicit invocation of finalizer"
#    WARNING_FILTER += allow class="Extends Object"
#    WARNING_FILTER += allow class="Field Declarations Should Be At Start Of Class"
#    WARNING_FILTER += allow class="Field names should start with a lower case letter"
#    WARNING_FILTER += allow class="Field not initialized in constructor but dereferenced without null check"
#    WARNING_FILTER += allow class="Fields of immutable classes should be final"
#    WARNING_FILTER += allow class="Final Field Could Be Static"
#    WARNING_FILTER += allow class="Finalize Does Not Call Super Finalize"
#    WARNING_FILTER += allow class="Finalize Only Calls Super Finalize"
#    WARNING_FILTER += allow class="Finalize Overloaded"
#    WARNING_FILTER += allow class="Finalize Should Be Protected"
#    WARNING_FILTER += allow class="Finalizer does not call superclass finalizer"
#    WARNING_FILTER += allow class="Finalizer does nothing but call superclass finalizer"
#    WARNING_FILTER += allow class="Finalizer nullifies superclass finalizer"
#    WARNING_FILTER += allow class="Finalizer nulls fields"
#    WARNING_FILTER += allow class="Finalizer only nulls fields"
#    WARNING_FILTER += allow class="For Loop Should Be While Loop"
#    WARNING_FILTER += allow class="For Loops Must Use Braces"
#    WARNING_FILTER += allow class="Format string should use %n rather than \\n"
#    WARNING_FILTER += allow class="Generics Naming"
#    WARNING_FILTER += allow class="God Class"
#    WARNING_FILTER += allow class="Guard Debug Logging"
#    WARNING_FILTER += allow class="Guard Log Statement Java Util"
#    WARNING_FILTER += allow class="Guard Log Statement"
#    WARNING_FILTER += allow class="Huge string constants is duplicated across multiple class files"
#    WARNING_FILTER += allow class="Idempotent Operations"
#    WARNING_FILTER += allow class="If Else Stmts Must Use Braces"
#    WARNING_FILTER += allow class="If Stmts Must Use Braces"
#    WARNING_FILTER += allow class="Immediate dereference of the result of readLine()"
#    WARNING_FILTER += allow class="Immutable Field"
#    WARNING_FILTER += allow class="Import From Same Package"
#    WARNING_FILTER += allow class="Inefficient Empty String Check"
#    WARNING_FILTER += allow class="Inefficient String Buffering"
#    WARNING_FILTER += allow class="Inefficient use of String.indexOf(String)"
#    WARNING_FILTER += allow class="Inefficient use of String.lastIndexOf(String)"
#    WARNING_FILTER += allow class="Inefficient use of keySet iterator instead of entrySet iterator"
#    WARNING_FILTER += allow class="Initialization circularity"
#    WARNING_FILTER += allow class="Instantiation To Get Class"
#    WARNING_FILTER += allow class="Insufficient String Buffer Declaration"
#    WARNING_FILTER += allow class="Integer Instantiation"
#    WARNING_FILTER += allow class="Integer remainder modulo 1"
#    WARNING_FILTER += allow class="Integral division result cast to double or float"
#    WARNING_FILTER += allow class="Invocation of substring(0), which returns the original value"
#    WARNING_FILTER += allow class="Iterator next() method can't throw NoSuchElementException"
#    WARNING_FILTER += allow class="JUnit Assertions Should Include Message"
#    WARNING_FILTER += allow class="JUnit Spelling"
#    WARNING_FILTER += allow class="JUnit Static Suite"
#    WARNING_FILTER += allow class="JUnit Test Contains Too Many Asserts"
#    WARNING_FILTER += allow class="JUnit Tests Should Include Assert"
#    WARNING_FILTER += allow class="JUnit Use Expected"
#    WARNING_FILTER += allow class="JUnit4 Suites Should Use Suite Annotation"
#    WARNING_FILTER += allow class="JUnit4 Test Should Use After Annotation"
#    WARNING_FILTER += allow class="JUnit4 Test Should Use Before Annotation"
#    WARNING_FILTER += allow class="JUnit4 Test Should Use Test Annotation"
#    WARNING_FILTER += allow class="Law Of Demeter"
#    WARNING_FILTER += allow class="Load of known null value"
#    WARNING_FILTER += allow class="Local Home Naming Convention"
#    WARNING_FILTER += allow class="Local Interface Session Naming Convention"
#    WARNING_FILTER += allow class="Local Variable Could Be Final"
#    WARNING_FILTER += allow class="Logger Is Not Static Final"
#    WARNING_FILTER += allow class="Logic Inversion"
#    WARNING_FILTER += allow class="Long Instantiation"
#    WARNING_FILTER += allow class="Long Variable"
#    WARNING_FILTER += allow class="Loose Coupling (Coupling)"
#    WARNING_FILTER += allow class="Loose Coupling"
#    WARNING_FILTER += allow class="Loose Package Coupling"
#    WARNING_FILTER += allow class="MDB And Session Bean Naming Convention"
#    WARNING_FILTER += allow class="Maps and sets of URLs can be performance hogs"
#    WARNING_FILTER += allow class="Method Argument Could Be Final"
#    WARNING_FILTER += allow class="Method Naming Conventions"
#    WARNING_FILTER += allow class="Method Returns Internal Array"
#    WARNING_FILTER += allow class="Method With Same Name As Enclosing Class"
#    WARNING_FILTER += allow class="Method allocates a boxed primitive just to call toString"
#    WARNING_FILTER += allow class="Method allocates an object, only to get the class object"
#    WARNING_FILTER += allow class="Method calls Pattern.compile in a loop"
#    WARNING_FILTER += allow class="Method calls prepareStatement in a loop"
#    WARNING_FILTER += allow class="Method calls static Math class method on a constant value"
#    WARNING_FILTER += allow class="Method checks to see if result of String.indexOf is positive"
#    WARNING_FILTER += allow class="Method compiles the regular expression in a loop"
#    WARNING_FILTER += allow class="Method concatenates strings using + in a loop"
#    WARNING_FILTER += allow class="Method directly allocates a specific implementation of xml interfaces"
#    WARNING_FILTER += allow class="Method discards result of readLine after checking if it is non-null"
#    WARNING_FILTER += allow class="Method doesn't override method in superclass due to wrong package for parameter (intentional)"
#    WARNING_FILTER += allow class="Method ignores exceptional return value"
#    WARNING_FILTER += allow class="Method ignores results of InputStream.read()"
#    WARNING_FILTER += allow class="Method ignores results of InputStream.skip()"
#    WARNING_FILTER += allow class="Method ignores return value, is this OK?"
#    WARNING_FILTER += allow class="Method invokes System.exit(...)"
#    WARNING_FILTER += allow class="Method invokes dangerous method runFinalizersOnExit"
#    WARNING_FILTER += allow class="Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"
#    WARNING_FILTER += allow class="Method invokes inefficient Number constructor; use static valueOf instead"
#    WARNING_FILTER += allow class="Method invokes inefficient floating-point Number constructor; use static valueOf instead"
#    WARNING_FILTER += allow class="Method invokes inefficient new String() constructor"
#    WARNING_FILTER += allow class="Method invokes inefficient new String(String) constructor"
#    WARNING_FILTER += allow class="Method invokes toString() method on a String"
#    WARNING_FILTER += allow class="Method may fail to clean up stream or resource on checked exception"
#    WARNING_FILTER += allow class="Method may fail to clean up stream or resource"
#    WARNING_FILTER += allow class="Method may fail to close database resource on exception"
#    WARNING_FILTER += allow class="Method may fail to close database resource"
#    WARNING_FILTER += allow class="Method may fail to close stream on exception"
#    WARNING_FILTER += allow class="Method may fail to close stream"
#    WARNING_FILTER += allow class="Method might drop exception"
#    WARNING_FILTER += allow class="Method might ignore exception"
#    WARNING_FILTER += allow class="Method names should start with a lower case letter"
#    WARNING_FILTER += allow class="Method uses the same code for two branches"
#    WARNING_FILTER += allow class="Method uses the same code for two switch clauses"
#    WARNING_FILTER += allow class="Method uses toArray() with zero-length array argument"
#    WARNING_FILTER += allow class="Method with Boolean return type returns explicit null"
#    WARNING_FILTER += allow class="Misleading Variable Name"
#    WARNING_FILTER += allow class="Missing Break In Switch"
#    WARNING_FILTER += allow class="Missing Static Method In Non Instantiatable Class"
#    WARNING_FILTER += allow class="Missing serialVersionUID"
#    WARNING_FILTER += allow class="Modified Cyclomatic Complexity"
#    WARNING_FILTER += allow class="More Than One Logger"
#    WARNING_FILTER += allow class="NPath Complexity"
#    WARNING_FILTER += allow class="Ncss Constructor Count"
#    WARNING_FILTER += allow class="Ncss Method Count"
#    WARNING_FILTER += allow class="Ncss Type Count"
#    WARNING_FILTER += allow class="Needless instantiation of class that only supplies static methods"
#    WARNING_FILTER += allow class="Negating the result of compareTo()/compare()"
#    WARNING_FILTER += allow class="No Package"
#    WARNING_FILTER += allow class="NodeList.getLength() called in a loop"
#    WARNING_FILTER += allow class="Non Case Label In Switch Statement"
#    WARNING_FILTER += allow class="Non Static Initializer"
#    WARNING_FILTER += allow class="Non Thread Safe Singleton"
#    WARNING_FILTER += allow class="Non serializable object written to ObjectOutput"
#    WARNING_FILTER += allow class="Non-Boolean argument formatted using %b format specifier"
#    WARNING_FILTER += allow class="Non-serializable class has a serializable inner class"
#    WARNING_FILTER += allow class="Non-serializable value stored into instance field of a serializable class"
#    WARNING_FILTER += allow class="Non-transient non-serializable instance field in serializable class"
#    WARNING_FILTER += allow class="Null Assignment"
#    WARNING_FILTER += allow class="One Declaration Per Line"
#    WARNING_FILTER += allow class="Only One Return"
#    WARNING_FILTER += allow class="Optimizable To Array Call"
#    WARNING_FILTER += allow class="Package Case"
#    WARNING_FILTER += allow class="Parameter must be non-null but is marked as nullable"
#    WARNING_FILTER += allow class="Position Literals First In Case Insensitive Comparisons"
#    WARNING_FILTER += allow class="Position Literals First In Comparisons"
#    WARNING_FILTER += allow class="Possible null pointer dereference due to return value of called method"
#    WARNING_FILTER += allow class="Possible null pointer dereference on branch that might be infeasible"
#    WARNING_FILTER += allow class="Potential lost logger changes due to weak reference in OpenJDK"
#    WARNING_FILTER += allow class="Potentially ambiguous invocation of either an inherited or outer method"
#    WARNING_FILTER += allow class="Potentially dangerous use of non-short-circuit logic"
#    WARNING_FILTER += allow class="Premature Declaration"
#    WARNING_FILTER += allow class="Preserve Stack Trace"
#    WARNING_FILTER += allow class="Primitive value is boxed and then immediately unboxed"
#    WARNING_FILTER += allow class="Primitive value is boxed then unboxed to perform primitive coercion"
#    WARNING_FILTER += allow class="Primitive value is unboxed and coerced for ternary operator"
#    WARNING_FILTER += allow class="Private method is never called"
#    WARNING_FILTER += allow class="Private readResolve method not inherited by subclasses"
#    WARNING_FILTER += allow class="Proper Logger"
#    WARNING_FILTER += allow class="Questionable cast to abstract collection"
#    WARNING_FILTER += allow class="Questionable cast to concrete collection"
#    WARNING_FILTER += allow class="Questionable use of non-short-circuit logic"
#    WARNING_FILTER += allow class="Random object created and used only once"
#    WARNING_FILTER += allow class="Read of unwritten public or protected field"
#    WARNING_FILTER += allow class="Redundant Field Initializer"
#    WARNING_FILTER += allow class="Redundant comparison of non-null value to null"
#    WARNING_FILTER += allow class="Redundant comparison of two null values"
#    WARNING_FILTER += allow class="Redundant nullcheck of value known to be non-null"
#    WARNING_FILTER += allow class="Redundant nullcheck of value known to be null"
#    WARNING_FILTER += allow class="Reliance on default encoding"
#    WARNING_FILTER += allow class="Remainder of 32-bit signed random integer"
#    WARNING_FILTER += allow class="Remainder of hashCode could be negative"
#    WARNING_FILTER += allow class="Remote Interface Naming Convention"
#    WARNING_FILTER += allow class="Remote Session Interface Naming Convention"
#    WARNING_FILTER += allow class="Replace Enumeration With Iterator"
#    WARNING_FILTER += allow class="Replace Hashtable With Map"
#    WARNING_FILTER += allow class="Replace Vector With List"
#    WARNING_FILTER += allow class="Result of integer multiplication cast to long"
#    WARNING_FILTER += allow class="Return Empty Array Rather Than Null"
#    WARNING_FILTER += allow class="Return value of method without side effect is ignored"
#    WARNING_FILTER += allow class="Rough value of known constant found"
#    WARNING_FILTER += allow class="Self assignment of local variable"
#    WARNING_FILTER += allow class="Serializable inner class"
#    WARNING_FILTER += allow class="Short Class Name"
#    WARNING_FILTER += allow class="Short Instantiation"
#    WARNING_FILTER += allow class="Short Method Name"
#    WARNING_FILTER += allow class="Short Variable"
#    WARNING_FILTER += allow class="Should be a static inner class"
#    WARNING_FILTER += allow class="Signature Declare Throws Exception (Strict-Exceptions)"
#    WARNING_FILTER += allow class="Signature Declare Throws Exception"
#    WARNING_FILTER += allow class="Simple Date Format Needs Locale"
#    WARNING_FILTER += allow class="Simplified Ternary"
#    WARNING_FILTER += allow class="Simplify Boolean Assertion"
#    WARNING_FILTER += allow class="Simplify Boolean Expressions"
#    WARNING_FILTER += allow class="Simplify Boolean Returns"
#    WARNING_FILTER += allow class="Simplify Conditional"
#    WARNING_FILTER += allow class="Simplify startsWith"
#    WARNING_FILTER += allow class="Single Method Singleton"
#    WARNING_FILTER += allow class="Singleton Class Returning New Instance"
#    WARNING_FILTER += allow class="Singular Field"
#    WARNING_FILTER += allow class="Static EJB Field Should Be Final"
#    WARNING_FILTER += allow class="Static initializer creates instance before all static final fields assigned"
#    WARNING_FILTER += allow class="Std Cyclomatic Complexity"
#    WARNING_FILTER += allow class="Store of non serializable object into HttpSession"
#    WARNING_FILTER += allow class="String Buffer Instantiation With Char"
#    WARNING_FILTER += allow class="String Instantiation"
#    WARNING_FILTER += allow class="String To String"
#    WARNING_FILTER += allow class="Superclass uses subclass during initialization"
#    WARNING_FILTER += allow class="Suspicious Constant Field Name"
#    WARNING_FILTER += allow class="Suspicious Equals Method Name"
#    WARNING_FILTER += allow class="Suspicious Hashcode Method Name"
#    WARNING_FILTER += allow class="Suspicious Octal Escape"
#    WARNING_FILTER += allow class="Suspicious reference comparison of Boolean values"
#    WARNING_FILTER += allow class="Suspicious reference comparison to constant"
#    WARNING_FILTER += allow class="Switch Density"
#    WARNING_FILTER += allow class="Switch Stmts Should Have Default"
#    WARNING_FILTER += allow class="Switch statement found where default case is missing"
#    WARNING_FILTER += allow class="Switch statement found where one case falls through to the next case"
#    WARNING_FILTER += allow class="System println"
#    WARNING_FILTER += allow class="Test Class Without Test Cases"
#    WARNING_FILTER += allow class="Test for floating point equality"
#    WARNING_FILTER += allow class="The equals and hashCode methods of URL are blocking"
#    WARNING_FILTER += allow class="The readResolve method must be declared with a return type of Object."
#    WARNING_FILTER += allow class="Thread passed where Runnable expected"
#    WARNING_FILTER += allow class="Too Few Branches For A Switch Statement"
#    WARNING_FILTER += allow class="Too Many Fields"
#    WARNING_FILTER += allow class="Too Many Methods"
#    WARNING_FILTER += allow class="Too Many Static Imports"
#    WARNING_FILTER += allow class="Transient field of class that isn't Serializable."
#    WARNING_FILTER += allow class="Transient field that isn't set by deserialization."
#    WARNING_FILTER += allow class="Unchecked type in generic call"
#    WARNING_FILTER += allow class="Unchecked/unconfirmed cast of return value from method"
#    WARNING_FILTER += allow class="Unchecked/unconfirmed cast"
#    WARNING_FILTER += allow class="Uncommented Empty Constructor"
#    WARNING_FILTER += allow class="Uncommented Empty Method Body"
#    WARNING_FILTER += allow class="Uncommented Empty Method"
#    WARNING_FILTER += allow class="Unnecessary Boolean Assertion"
#    WARNING_FILTER += allow class="Unnecessary Case Change"
#    WARNING_FILTER += allow class="Unnecessary Constructor"
#    WARNING_FILTER += allow class="Unnecessary Conversion Temporary"
#    WARNING_FILTER += allow class="Unnecessary Final Modifier"
#    WARNING_FILTER += allow class="Unnecessary Fully Qualified Name"
#    WARNING_FILTER += allow class="Unnecessary Local Before Return"
#    WARNING_FILTER += allow class="Unnecessary Parentheses"
#    WARNING_FILTER += allow class="Unnecessary Return"
#    WARNING_FILTER += allow class="Unnecessary Wrapper Object Creation"
#    WARNING_FILTER += allow class="Unread field"
#    WARNING_FILTER += allow class="Unread field: should this field be static?"
#    WARNING_FILTER += allow class="Unread public/protected field"
#    WARNING_FILTER += allow class="Unsigned right shift cast to short/byte"
#    WARNING_FILTER += allow class="Unsynchronized Static Date Formatter"
#    WARNING_FILTER += allow class="Unused Formal Parameter"
#    WARNING_FILTER += allow class="Unused Imports (type resolution)"
#    WARNING_FILTER += allow class="Unused Imports"
#    WARNING_FILTER += allow class="Unused Local Variable"
#    WARNING_FILTER += allow class="Unused Modifier"
#    WARNING_FILTER += allow class="Unused Null Check In Equals"
#    WARNING_FILTER += allow class="Unused Private Field"
#    WARNING_FILTER += allow class="Unused Private Method"
#    WARNING_FILTER += allow class="Unused field"
#    WARNING_FILTER += allow class="Unused public or protected field"
#    WARNING_FILTER += allow class="Unusual equals method"
#    WARNING_FILTER += allow class="Unwritten public or protected field"
#    WARNING_FILTER += allow class="Usage of GetResource may be unsafe if class is extended"
#    WARNING_FILTER += allow class="Use Array List Instead Of Vector"
#    WARNING_FILTER += allow class="Use Arrays As List"
#    WARNING_FILTER += allow class="Use Assert Equals Instead Of Assert True"
#    WARNING_FILTER += allow class="Use Assert Null Instead Of Assert True"
#    WARNING_FILTER += allow class="Use Assert Same Instead Of Assert True"
#    WARNING_FILTER += allow class="Use Assert True Instead Of Assert Equals"
#    WARNING_FILTER += allow class="Use Collection Is Empty"
#    WARNING_FILTER += allow class="Use Concurrent Hash Map"
#    WARNING_FILTER += allow class="Use Correct Exception Logging"
#    WARNING_FILTER += allow class="Use Equals To Compare Strings"
#    WARNING_FILTER += allow class="Use Index Of Char"
#    WARNING_FILTER += allow class="Use Locale With Case Conversions"
#    WARNING_FILTER += allow class="Use Notify All Instead Of Notify"
#    WARNING_FILTER += allow class="Use Object For Clearer API"
#    WARNING_FILTER += allow class="Use Proper Class Loader"
#    WARNING_FILTER += allow class="Use Singleton"
#    WARNING_FILTER += allow class="Use String Buffer For String Appends"
#    WARNING_FILTER += allow class="Use String Buffer Length"
#    WARNING_FILTER += allow class="Use Utility Class"
#    WARNING_FILTER += allow class="Use Varargs"
#    WARNING_FILTER += allow class="Use of identifier that is a keyword in later versions of Java"
#    WARNING_FILTER += allow class="Use of member identifier that is a keyword in later versions of Java"
#    WARNING_FILTER += allow class="Use the nextInt method of Random rather than nextDouble to generate a random integer"
#    WARNING_FILTER += allow class="Useless Operation On Immutable"
#    WARNING_FILTER += allow class="Useless Overriding Method"
#    WARNING_FILTER += allow class="Useless Parentheses"
#    WARNING_FILTER += allow class="Useless Qualified This"
#    WARNING_FILTER += allow class="Useless String valueOf"
#    WARNING_FILTER += allow class="Useless assignment in return statement"
#    WARNING_FILTER += allow class="Useless control flow to next line"
#    WARNING_FILTER += allow class="Useless control flow"
#    WARNING_FILTER += allow class="Vacuous bit mask operation on integer value"
#    WARNING_FILTER += allow class="Vacuous comparison of integer value"
#    WARNING_FILTER += allow class="Value required to have type qualifier, but marked as unknown"
#    WARNING_FILTER += allow class="Value required to not have type qualifier, but marked as unknown"
#    WARNING_FILTER += allow class="Variable Naming Conventions"
#    WARNING_FILTER += allow class="Very confusing method names (but perhaps intentional)"
#    WARNING_FILTER += allow class="While Loops Must Use Braces"
#    WARNING_FILTER += allow class="Write to static field from instance method"
#    WARNING_FILTER += allow class="clone method does not call super.clone()"
#    WARNING_FILTER += allow class="compareTo()/compare() returns Integer.MIN_VALUE"
#    WARNING_FILTER += allow class="equals method fails for subtypes"
#    WARNING_FILTER += allow class="equals() method does not check for null argument"
#    WARNING_FILTER += allow class="instanceof will always return true"
#    WARNING_FILTER += allow class="serialVersionUID isn't final"
#    WARNING_FILTER += allow class="serialVersionUID isn't long"
#    WARNING_FILTER += allow class="serialVersionUID isn't static"
#    WARNING_FILTER += allow class="toString method may return null"
#
#  To enable additional buffer overrun checking, which can best be
#  described as better at finding buffer overruns involving pointer
#  arithmetic:
#    WARNING_FILTER += allow class="2$Buffer Overrun"
#
#  To discard integer overflow warnings that occur entirely within
#  system headers:
#    WARNING_FILTER += discard class="Integer Overflow of Allocation Size" is_sysinclude

#WARNING_FILTER += discard language="C++" is_sysinclude
#WARNING_FILTER += discard class="Undefined Macro in #if" is_sysinclude

# Parameter SKIP_ANALYSIS_OF
#
# Purpose
#  Use to specify that certain sets of procedures should not be
#  analyzed.
#
# Tags
#  - ANALYSIS_FILTER: Analysis-Side Filtering
#
# Type
#  { UNREACHABLE_FUNCTIONS, SOURCE_LIBRARIES }
#
# Behavior
#  - UNREACHABLE_FUNCTIONS : instructs CodeSonar to skip analysis of
#    any procedure not included in set REACHABLE_FROM_ROOTS_EXTENDED
#    [#reachable_from_roots_extended]. CodeSonar will issue an alert
#    [doc/html/GUI/GUI_Alerts.html] if value UNREACHABLE_FUNCTIONS
#    is specified but set REACHABLE_FROM_ROOTS
#    [#reachable_from_roots] is empty.
#  - SOURCE_LIBRARIES : instructs CodeSonar to skip analysis of
#    procedures in set
#    CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES
#    [#conservatively_reachable_from_source_libraries].


# Parameter SOURCE_MIN_REACHABLE_FROM_ROOTS
#
# Purpose
#  Provides a safeguard against misidentifying a large portion of
#  source code as unreachable.
#
# Type
#  integer
#
# Behavior
#  The value of this parameter is used in computing set
#  REACHABLE_FROM_ROOTS_EXTENDED [#reachable_from_roots_extended].

#SOURCE_MIN_REACHABLE_FROM_ROOTS = 0


# Parameter SOURCE_MAX_REACHABLE_FROM_LIBRARIES
#
# Purpose
#  Provides a safeguard against misidentifying a large portion of
#  source code as reachable from libraries.
#
# Type
#  integer
#
# Behavior
#  The value of this parameter is used in computing set
#  CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES
#  [#conservatively_reachable_from_source_libraries].
#
#
# Notes
#  We define sets REACHABLE_FROM_SOURCE_LIBRARIES and
#  CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES.
#
#  REACHABLE_FROM_SOURCE_LIBRARIES is the set of all source
#  procedures P such that:
#  - P's name matches a CodeSonar library model
#    [doc/html/C_Module/LibraryModels/LibraryModels.html], or
#  - P is called (directly or transitively) by a procedure whose
#    name matches a CodeSonar library model.
#
#  In some cases, the name matching may misidentify procedures as
#  libraries, which may result in a significant number of procedures
#  misidentified as reachable from libraries. In such cases,
#  CodeSonar may fail to analyze a significant portion of the
#  program, reducing the quality of the results. The use of set
#  CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES represents a
#  safeguard against such cases.
#
#  [ANCHOR conservatively_reachable_from_source_libraries]
#  CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES is defined as
#  follows. Let S be the set of all source procedures in the
#  analyzed project (for a source-only analysis, all procedures are
#  source procedures).
#  - If |REACHABLE_FROM_SOURCE_LIBRARIES|/|S| is greater than
#    SOURCE_MAX_REACHABLE_FROM_LIBRARIES/100,
#    CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES is the empty
#    set.
#  - Otherwise, CONSERVATIVELY_REACHABLE_FROM_SOURCE_LIBRARIES is
#    equal to REACHABLE_FROM_SOURCE_LIBRARIES.

#SOURCE_MAX_REACHABLE_FROM_LIBRARIES = 100


# Parameter BAD_FUNCTION_REGEX
# Parameter BAD_FUNCTION_MESSAGE
# Parameter BAD_FUNCTION_CATEGORIES
# Parameter BAD_FUNCTION_BASE_RANK
# Parameter BAD_FUNCTION_INFO
# Parameter BAD_FUNCTION_LINK
# Parameter BAD_FUNCTION_RANK
# Parameter BAD_FUNCTION_SIGNIFICANCE
#
# Purpose
#  Use the BAD_FUNCTION_* family of parameters to define warning
#  classes that indicate the use of specific (prohibited) functions.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#
# Type
#  - BAD_FUNCTION_REGEX: Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#  - BAD_FUNCTION_MESSAGE: string
#  - BAD_FUNCTION_CATEGORIES: string
#  - BAD_FUNCTION_BASE_RANK: number
#  - BAD_FUNCTION_INFO: string
#  - BAD_FUNCTION_LINK: string representing a URL
#  - BAD_FUNCTION_SIGNIFICANCE: { UNSPECIFIED, SECURITY,
#    RELIABILITY, REDUNDANCY, STYLE, DIAGNOSTIC }
#
# Behavior
#  These parameters are used together to specify bad functions to
#  check for and warnings to issue when those functions occur.
#  - BAD_FUNCTION_REGEX is a regular expression. If a reference to a
#    function that matches this is found, then a warning is issued.
#  - BAD_FUNCTION_MESSAGE will be used as the warning class name. It
#    defaults to "Bad Function". If the message contains any
#    characters that are special to HTML, they must be HTML-encoded.
#  - BAD_FUNCTION_CATEGORIES is the set of categories for the
#    warning, as a semicolon-separated list. This defaults to the
#    empty string.
#  - BAD_FUNCTION_BASE_RANK is the base rank
#    [doc/html/Elements/PROPERTIES_Warning.html#base_rank] assigned
#    to the warning, with default 15.0.
#  - BAD_FUNCTION_INFO will be used in the warning description box
#    [doc/html/GUI/GUI_Warning_Report_Annotations.html#endbox]
#    sentence 'Use of [funcname()] is not recommended because ...'.
#    The default value is "it is correlated with security or safety
#    problems." Use <paragraph></paragraph> to delimit paragraphs.
#    Use <link url="linkURL">linktext</link> to link "linktext" to
#    linkURL.
#  - BAD_FUNCTION_LINK specifies a URL for further information.
#    Values beginning with "#' are interpreted relative to the
#    CodeSonar manual root. If a value is specified, CodeSonar will
#    append 'See <a href="...">here</a> for more information.' to
#    the text in the warning description box
#    [doc/html/GUI/GUI_Warning_Report_Annotations.html#endbox]. If
#    no value is specified, and BAD_FUNCTION_INFO is also not
#    specified, CodeSonar will look for a category beginning with
#    "BADFUNC" in the BAD_FUNCTION_CATEGORIES list. If there is such
#    a category, CodeSonar will add the "See here..." sentence with
#    a link to the corresponding warning class page.
#  - BAD_FUNCTION_SIGNIFICANCE is a string representing the
#    Significance [doc/html/WarningClasses/Significance.html]
#    classification for this warning class.
#
# Notes
#
#  Parameter BAD_FUNCTION_RANK is deprecated in favor of
#  BAD_FUNCTION_BASE_RANK; the two currently have identical
#  behavior.
#
#  If two or more sets of BAD_FUNCTION_* rules have the same
#  BAD_FUNCTION_MESSAGE value, the same warning class will be used
#  to cover all cases. Therefore, sets of rules with the same
#  BAD_FUNCTION_MESSAGE should also have the same
#  BAD_FUNCTION_CATEGORIES, BAD_FUNCTION_INFO, and
#  BAD_FUNCTION_BASE_RANK values (that is, they should only differ
#  in the BAD_FUNCTION_REGEX setting).
#
#  Similarly, if a set of BAD_FUNCTION_* rules has a
#  BAD_FUNCTION_MESSAGE that is the same as the name of a standard
#  CodeSonar warning class, the category and base rank settings of
#  the standard class will apply and any BAD_FUNCTION_CATEGORIES or
#  BAD_FUNCTION_BASE_RANK specified in the set will not be used.
#
#  Examples:
#    BAD_FUNCTION_REGEX = ^gets$
#    BAD_FUNCTION_MESSAGE = Use of gets
#    BAD_FUNCTION_CATEGORIES = BADFUNC.BO.GETS;CWE:242
#    BAD_FUNCTION_BASE_RANK = 1.0
#    BAD_FUNCTION_SIGNIFICANCE = SECURITY
#  specifies that uses of the function "gets" should be flagged as
#  warnings.
#
#  The following introduces a warning on use of the function
#  "memset" because some compilers may insecurely remove the call
#  during optimization. See CWE:14
#  [http://cwe.mitre.org/data/definitions/14.html] for details.
#    BAD_FUNCTION_REGEX = ^memset$
#    BAD_FUNCTION_MESSAGE = Use of memset
#    BAD_FUNCTION_CATEGORIES = BADFUNC.MEMSET;CWE:14
#    BAD_FUNCTION_BASE_RANK = 10.0
#    BAD_FUNCTION_SIGNIFICANCE = SECURITY
#
#  For functions in C++ compilation units with C++ linkage, the
#  regular expression will be matched against the fully qualified
#  function signature (including namespace and template components).
#  For example, suppose we have function myfunc() in such a
#  compilation unit, where myfunc() returns int and has one int
#  parameter. Then:
#    BAD_FUNCTION_REGEX = ^int myfunc(int)$
#  will match a use of myfunc(). If myfunc() is overloaded, only
#  uses with the corresponding type signature will match. We can
#  remove the delimiters from the regular expression to widen the
#  search:
#    BAD_FUNCTION_REGEX = myfunc
#  will match all uses of myfunc(), regardless of type signature,
#  but will also match uses of myfunc_2(), not_myfunc(), and so on.
#  It is important to note that
#    BAD_FUNCTION_REGEX = ^myfunc$
#  will not match ANY use of myfunc() in this compilation unit.
#
#  To inspect the function signature strings that CodeSonar will be
#  matching BAD_FUNCTION_REGEX expressions against, use the
#  CodeSonar Plug-In API
#  [doc/html/API/CodeSonarPlugins/PluginAPI.html] to write a plug-in
#  that traverses the PDGs of the project, getting the function
#  ABS_LOC for each and then printing its name.
#
#  The $str$Class_Name form used in some of the BAD_FUNCTION_MESSAGE
#  factory settings is for internal GrammaTech use. Do not imitate
#  this format: specify plain class names as shown in the examples
#  above.

#BAD_FUNCTION_REGEX = ^crypt$
#BAD_FUNCTION_MESSAGE = $Insecure Randomness$Use of crypt
#BAD_FUNCTION_CATEGORIES = BADFUNC.CRYPT;BSI:CRYPT-01;BSI:CRYPT-02;CWE:326;CWE:330
#BAD_FUNCTION_BASE_RANK = 40.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^gets$|^_get(t|w)s$
#BAD_FUNCTION_MESSAGE = $Dangerous Function$Use of gets
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.GETS;BSI:GETS;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^_?tmpfile$
#BAD_FUNCTION_MESSAGE = $Insecure Temporary File$Use of tmpfile
#BAD_FUNCTION_CATEGORIES = BADFUNC.TEMP.TMPFILE;BSI:TMPNAM-TMPFILE;BSI:Truncate;CWE:377
#BAD_FUNCTION_BASE_RANK = 42.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^tmpnam(_r)?$|^_(t|w)tmpnam$
#BAD_FUNCTION_MESSAGE = $Insecure Temporary File$Use of tmpnam
#BAD_FUNCTION_CATEGORIES = BADFUNC.TEMP.TMPNAM;BSI:TMPNAM-TMPFILE;BSI:Truncate;CWE:377
#BAD_FUNCTION_BASE_RANK = 43.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^tempnam$|^_(t|w)?tempnam$
#BAD_FUNCTION_MESSAGE = $Insecure Temporary File$Use of tmpnam
#BAD_FUNCTION_CATEGORIES = BADFUNC.TEMP.TMPNAM;BSI:TMPNAM-TMPFILE;BSI:Truncate;CWE:377
#BAD_FUNCTION_BASE_RANK = 43.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^GetTempFileName(A|W)?$
#BAD_FUNCTION_MESSAGE= Use of GetTempFileName
#BAD_FUNCTION_CATEGORIES = BADFUNC.TEMP.GETTEMPFILENAME;BSI:GetTempFileName;CWE:377
#BAD_FUNCTION_BASE_RANK = 43.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^setjmp$
#BAD_FUNCTION_MESSAGE = $Call to setjmp$Use of setjmp
#BAD_FUNCTION_CATEGORIES = BADFUNC.SETJMP;Misra2012:21.4;CWE:691;CWE:710;POW10:1;JPL:11
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^longjmp$
#BAD_FUNCTION_MESSAGE = $Call to longjmp$Use of longjmp
#BAD_FUNCTION_CATEGORIES = BADFUNC.LONGJMP;Misra2012:21.4;CWE:691;CWE:710;POW10:1;JPL:11
#BAD_FUNCTION_BASE_RANK = 12.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^mktemp$|^_(t|w)?mktemp$
#BAD_FUNCTION_MESSAGE = $Insecure Temporary File$Use of mktemp
#BAD_FUNCTION_CATEGORIES = BADFUNC.TEMP.MKTEMP;BSI:MKTEMP;CWE:377
#BAD_FUNCTION_BASE_RANK = 47.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## For "Task Delay Function" check.
## As with other JPL classes, this warning class is disabled by default.

#BAD_FUNCTION_REGEX = ^sleep|usleep|taskDelay|nanosleep|clock_nanosleep$
#BAD_FUNCTION_MESSAGE = Task Delay Function
#BAD_FUNCTION_CATEGORIES = CONCURRENCY.BADFUNC.DELAY;JPL:7
#BAD_FUNCTION_SIGNIFICANCE = RELIABILITY

#BAD_FUNCTION_REGEX = ^osal_task_delay|osal_task_pause$
#BAD_FUNCTION_MESSAGE = Task Delay Function
#BAD_FUNCTION_CATEGORIES = CONCURRENCY.BADFUNC.DELAY;JPL:7
#BAD_FUNCTION_SIGNIFICANCE = RELIABILITY

## For "Leftover Debug Code" check.
## This warning class is disabled by default.

#BAD_FUNCTION_REGEX = ^puts|printf|vprintf$
#BAD_FUNCTION_MESSAGE = Leftover Debug Code
#BAD_FUNCTION_CATEGORIES = LANG.STRUCT.DBG;CWE:489
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^system$|^_wsystem$
#BAD_FUNCTION_MESSAGE = Use of system
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.SYSTEM;Misra2012:21.8;Misra2004:20.11;BSI:Exec-SearchPath-01;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI AddAccess-ACE Rule

#BAD_FUNCTION_REGEX = ^AddAccessAllowedAce$
#BAD_FUNCTION_MESSAGE = Use of AddAccessAllowedAce
#BAD_FUNCTION_CATEGORIES = BADFUNC.ADDACCESSACE;BSI:AddAccess-ACE;CWE:269;CWE:281
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^AddAccessDeniedAce$
#BAD_FUNCTION_MESSAGE = Use of AddAccessDeniedAce
#BAD_FUNCTION_CATEGORIES = BADFUNC.ADDACCESSACE;BSI:AddAccess-ACE;CWE:269;CWE:281
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI AfxLoadLibrary Rule

#BAD_FUNCTION_REGEX = ^AfxLoadLibrary$
#BAD_FUNCTION_MESSAGE = Use of AfxLoadLibrary
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.AFXLOADLIBRARY;BSI:AfxLoadLibrary;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^CoLoadLibrary$
#BAD_FUNCTION_MESSAGE = Use of CoLoadLibrary
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.COLOADLIBRARY;BSI:AfxLoadLibrary;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY


## --- for BSI AfxParseURL Rule

#BAD_FUNCTION_REGEX = ^AfxParseURL$
#BAD_FUNCTION_MESSAGE = Use of AfxParseURL
#BAD_FUNCTION_CATEGORIES = BADFUNC.AFXPARSEURL;BSI:AfxParseURL;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI Catopen Rule

#BAD_FUNCTION_REGEX = ^catopen$
#BAD_FUNCTION_MESSAGE = Use of catopen
#BAD_FUNCTION_CATEGORIES = BADFUNC.CATOPEN;BSI:Catopen;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI CHROOT-01, CHROOT-02, CHROOT-03 Rules

#BAD_FUNCTION_REGEX = ^chroot$
#BAD_FUNCTION_MESSAGE = Use of chroot
#BAD_FUNCTION_CATEGORIES = BADFUNC.CHROOT;BSI:CHROOT-01;BSI:CHROOT-02;BSI:CHROOT-03;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI CreateFile-01, CreateFile-02 Rules

#BAD_FUNCTION_REGEX = ^CreateFile(A|W)?$
#BAD_FUNCTION_MESSAGE = Use of CreateFile
#BAD_FUNCTION_CATEGORIES = BADFUNC.CREATEFILE;BSI:CreateFile-01;BSI:CreateFile-02;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI CreateProcess-02, CreateProcess-03, CreateProcess-04 Rules

#BAD_FUNCTION_REGEX = ^CreateProcess(A|W)?$|^CreateProcessAsUser(A|W)?$|^CreateProcessWithLogonW$
#BAD_FUNCTION_MESSAGE = Use of CreateProcess
#BAD_FUNCTION_CATEGORIES = BADFUNC.CREATEProcess;BSI:CreateProcess-02;BSI:CreateProcess-03;BSI:CreateProcess-04;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI CreateThread Rule

#BAD_FUNCTION_REGEX = ^CreateThread$
#BAD_FUNCTION_MESSAGE = Use of CreateThread
#BAD_FUNCTION_CATEGORIES = BADFUNC.CREATETHREAD;BSI:CreateThread;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI CUSERID Rule

#BAD_FUNCTION_REGEX = ^cuserid$
#BAD_FUNCTION_MESSAGE = Use of cuserid
#BAD_FUNCTION_CATEGORIES = BADFUNC.CUSERID;BSI:CUSERID;CWE:477;CWE:863
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI Exec-SearchPath-01, Exec-SearchPath-02 Rules

#BAD_FUNCTION_REGEX = ^_w?execlp?e?$|^_w?execvp?e?$
#BAD_FUNCTION_MESSAGE = Use of _exec
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH._EXEC;BSI:Exec-SearchPath-01;BSI:Exec-SearchPath-02;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^execlp$
#BAD_FUNCTION_MESSAGE = Use of execlp
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.EXECLP;BSI:Exec-SearchPath-01;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^execvp$
#BAD_FUNCTION_MESSAGE = Use of execvp
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.EXECVP;BSI:Exec-SearchPath-01;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^popen$
#BAD_FUNCTION_MESSAGE = Use of popen
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.POPEN;BSI:Exec-SearchPath-01;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^_w?spawnlp?e?$|^_w?spawnvp?e?$
#BAD_FUNCTION_MESSAGE = Use of _spawn
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH._SPAWN;BSI:Exec-SearchPath-01;BSI:Exec-SearchPath-02;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY


## --- for BSI FormatMessage Rule

#BAD_FUNCTION_REGEX = ^FormatMessage(A|W)?$
#BAD_FUNCTION_MESSAGE = Use of FormatMessage
#BAD_FUNCTION_CATEGORIES = BADFUNC.FORMATMESSAGE;BSI:FormatMessage;CWE:134;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI GETLOGIN Rule

#BAD_FUNCTION_REGEX = ^getlogin$
#BAD_FUNCTION_MESSAGE = Use of getlogin
#BAD_FUNCTION_CATEGORIES = BADFUNC.GETLOGIN;BSI:GETLOGIN;CWE:863
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI GETOPT Rule

#BAD_FUNCTION_REGEX = ^getopt(_long(_only)?)?$
#BAD_FUNCTION_MESSAGE = Use of getopt
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.GETOPT;BSI:GETOPT;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI GETPASS Rule

#BAD_FUNCTION_REGEX = ^getpass$
#BAD_FUNCTION_MESSAGE = Use of getpass
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.GETPASS;BSI:GETPASS;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI LoadLibrary Rule

#BAD_FUNCTION_REGEX = ^LoadLibrary(A|W)?$|^LoadLibraryEx(A|W)?$
#BAD_FUNCTION_MESSAGE = Use of LoadLibrary
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.LOADLIBRARY;BSI:LoadLibrary;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI MEMSET Rule

#BAD_FUNCTION_REGEX = ^memset$
#BAD_FUNCTION_MESSAGE = Use of memset
#BAD_FUNCTION_CATEGORIES = BADFUNC.MEMSET;CWE:14
#BAD_FUNCTION_BASE_RANK = 10.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI MetaRule Rule (5)

#BAD_FUNCTION_REGEX = ^(d|e|j|l|m|n|s)rand48$|^seed48$|^lcong48$
#BAD_FUNCTION_MESSAGE = Use of rand48 Function
#BAD_FUNCTION_CATEGORIES = BADFUNC.RANDOM.RAND48;BSI:MetaRule;CWE:330
#BAD_FUNCTION_BASE_RANK = 45.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^s?rand$ 
#BAD_FUNCTION_MESSAGE = Use of rand
#BAD_FUNCTION_CATEGORIES = BADFUNC.RANDOM.RAND;BSI:MetaRule;CWE:330
#BAD_FUNCTION_BASE_RANK = 45.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^s?random$ 
#BAD_FUNCTION_MESSAGE = Use of random
#BAD_FUNCTION_CATEGORIES = BADFUNC.RANDOM.RANDOM;BSI:MetaRule;CWE:330
#BAD_FUNCTION_BASE_RANK = 45.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI MKSTEMP Rule

#BAD_FUNCTION_REGEX = ^mkstemp$
#BAD_FUNCTION_MESSAGE = $Insecure Temporary File$Use of mkstemp
#BAD_FUNCTION_CATEGORIES = BADFUNC.TEMP.MKSTEMP;BSI:Mkstemp;CWE:377
#BAD_FUNCTION_BASE_RANK = 47.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI MOVEFILE Rule

#BAD_FUNCTION_REGEX = ^MoveFile(A|W)?$
#BAD_FUNCTION_MESSAGE = Use of MoveFile
#BAD_FUNCTION_CATEGORIES = BADFUNC.MOVEFILE;BSI:MoveFile;CWE:477
#BAD_FUNCTION_BASE_RANK = 45.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI OemToChar Rule

#BAD_FUNCTION_REGEX = ^OemToChar(A|W)?$
#BAD_FUNCTION_MESSAGE = Use of OemToChar
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.OEMTOCHAR;BSI:OemToChar;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^OemToAnsi(A|W)?$
#BAD_FUNCTION_MESSAGE = Use of OemToAnsi
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.OEMTOCHAR;BSI:OemToChar;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI RecvMsg Rule

#BAD_FUNCTION_REGEX = ^recvmsg$
#BAD_FUNCTION_MESSAGE = Use of recvmsg
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.RECVMSG;BSI:RecvMsg;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI ShellExecute Rule

#BAD_FUNCTION_REGEX = ^ShellExecute(A|W)?$|^ShellExecuteEx(A|W)?$
#BAD_FUNCTION_MESSAGE = Use of ShellExecute
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.SHELLEXECUTE;BSI:ShellExecute;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI SHCreateProcessAsUserW Rule

#BAD_FUNCTION_REGEX = ^SHCreateProcessAsUserW$
#BAD_FUNCTION_MESSAGE = Use of SHCreateProcessAsUserW
#BAD_FUNCTION_CATEGORIES = BADFUNC.PATH.SHCREATEPROCESSASUSERW;BSI:SHCreateProcessAsUserW;CWE:426
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI SIGNAL-01 Rule

#BAD_FUNCTION_REGEX = ^signal$
#BAD_FUNCTION_MESSAGE = Use of signal
#BAD_FUNCTION_CATEGORIES = BADFUNC.SIGNAL;BSI:SIGNAL-01;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI SIGNAL-02 Rule

#BAD_FUNCTION_REGEX = ^setuid$
#BAD_FUNCTION_MESSAGE = Use of setuid
#BAD_FUNCTION_CATEGORIES = BADFUNC.SETUID;BSI:SIGNAL-02;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI STRCAT Rule

#BAD_FUNCTION_REGEX = ^lstrcat(A|W)?$|^strc?cat$|^StrCat(A|W)$|^olestrcat$
#BAD_FUNCTION_MESSAGE = Use of strcat
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRCAT;BSI:STRCAT;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^_?mbscat$|^_f?tcscat$|^wcscat$
#BAD_FUNCTION_MESSAGE = Use of strcat
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRCAT;BSI:STRCAT;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI StrCatChainW Rule

#BAD_FUNCTION_REGEX = ^StrCatChainW$
#BAD_FUNCTION_MESSAGE = Use of StrCatChainW
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRCATCHAINW;BSI:StrCatChainW;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI STRCMP Rule

#BAD_FUNCTION_REGEX = ^l?strcmpi?$
#BAD_FUNCTION_MESSAGE = Use of strcmp
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRCMP;BSI:STRCMP;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI STRCPY Rule

#BAD_FUNCTION_REGEX = ^strcpy$|^StrCpy(A|W)?$|^strccpy$|^strcadd$
#BAD_FUNCTION_MESSAGE = Use of strcpy
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRCPY;BSI:STRCPY;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^(ua)?lstrcpy(A|W)?$|^olestrcpy$
#BAD_FUNCTION_MESSAGE = Use of strcpy
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRCPY;BSI:STRCPY;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^_f?tcscpy$|^_?mbscpy$|^wcscpy$
#BAD_FUNCTION_MESSAGE = Use of strcpy
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRCPY;BSI:STRCPY;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI STRLEN Rule

#BAD_FUNCTION_REGEX = ^l?strlen$
#BAD_FUNCTION_MESSAGE = Use of strlen
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRLEN;BSI:STRLEN;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^_mbslen$|^_tcslen$|^wcslen$
#BAD_FUNCTION_MESSAGE = Use of strlen
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRLEN;BSI:STRLEN;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI STRTRNS Rule

#BAD_FUNCTION_REGEX = ^strtrns$
#BAD_FUNCTION_MESSAGE = Use of strtrns
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.STRTRNS;BSI:STRTRNS;CWE:120;CWE:242;CWE:251
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI SYSLOG-1 Rule

#BAD_FUNCTION_REGEX = ^syslog$
#BAD_FUNCTION_MESSAGE = Use of syslog
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.SYSLOG;BSI:SYSLOG-1;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI T_OPEN Rule

#BAD_FUNCTION_REGEX = ^t_open$
#BAD_FUNCTION_MESSAGE = Use of t_open
#BAD_FUNCTION_CATEGORIES = BADFUNC.T_OPEN;BSI:T_Open;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI TTYNAME Rule

#BAD_FUNCTION_REGEX = ^ttyname$
#BAD_FUNCTION_MESSAGE = Use of ttyname
#BAD_FUNCTION_CATEGORIES = BADFUNC.TTYNAME;BSI:TTYNAME;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## --- for BSI VFORK Rule

#BAD_FUNCTION_REGEX = ^vfork$
#BAD_FUNCTION_MESSAGE = Use of vfork
#BAD_FUNCTION_CATEGORIES = BADFUNC.VFORK;BSI:VFORK;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^getwd$
#BAD_FUNCTION_MESSAGE = Use of getwd
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.GETWD;BSI:GETWD;CWE:120;CWE:242
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^LoadModule$
#BAD_FUNCTION_MESSAGE = Use of LoadModule
#BAD_FUNCTION_CATEGORIES = BADFUNC.LOADMODULE;BSI:LoadModule;CWE:477
#BAD_FUNCTION_BASE_RANK = 44.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^realpath$
#BAD_FUNCTION_MESSAGE = Use of realpath
#BAD_FUNCTION_CATEGORIES = BADFUNC.BO.REALPATH;BSI:REALPATH;CWE:785
#BAD_FUNCTION_BASE_RANK = 46.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^WinExec$
#BAD_FUNCTION_MESSAGE = Use of WinExec
#BAD_FUNCTION_CATEGORIES = BADFUNC.WINEXEC;BSI:WinExec;CWE:477
#BAD_FUNCTION_BASE_RANK = 48.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

## List scraped from here:
##   http://pubs.opengroup.org/onlinepubs/7908799/xsh/stdio.h.html
#BAD_FUNCTION_REGEX = ^(clearerr|ctermid|cuserid|fclose|fdopen|feof|ferror|fflush|fgetc|fgetpos|fgets|fileno|flockfile|fopen|fprintf|fputc|fputs|fread|freopen|fscanf|fseek|fseeko|fsetpos|ftell|ftello|ftrylockfile|funlockfile|fwrite|getc|getchar|getc_unlocked|getchar_unlocked|getopt|gets|getw|pclose|perror|popen|printf|putc|putchar|putc_unlocked|putchar_unlocked|puts|putw|remove|rename|rewind|scanf|setbuf|setvbuf|snprintf|sprintf|sscanf|tempnam|tmpfile|tmpnam|ungetc|vfprintf|vprintf|vsnprintf|vsprintf)$
#BAD_FUNCTION_MESSAGE = Use of <stdio.h> Input/Output
#BAD_FUNCTION_CATEGORIES = BADFUNC.STDIO_H;Misra2012:21.6;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

## List scraped from here:
##   http://pubs.opengroup.org/onlinepubs/7908799/xsh/wchar.h.html
#BAD_FUNCTION_REGEX = ^(btowc|fwprintf|fwscanf|iswalnum|iswalpha|iswcntrl|iswdigit|iswgraph|iswlower|iswprint|iswpunct|iswspace|iswupper|iswxdigit|iswctype|fgetwc|fgetws|fputwc|fputws|fwide|getwc|getwchar|mbsinit|mbrlen|mbrtowc|mbsrtowcs|putwc|putwchar|swprintf|swscanf|towlower|towupper|ungetwc|vfwprintf|vwprintf|vswprintf|wcrtomb|wcscat|wcschr|wcscmp|wcscoll|wcscpy|wcscspn|wcsftime|wcslen|wcsncat|wcsncmp|wcsncpy|wcspbrk|wcsrchr|wcsrtombs|wcsspn|wcsstr|wcstod|wcstok|wcstol|wcstoul|wcswcs|wcswidth|wcsxfrm|wctob|wctype|wcwidth|wmemchr|wmemcmp|wmemcpy|wmemmove|wmemset|wprintf|wscanf)$
#BAD_FUNCTION_MESSAGE = Use of <wchar.h> Input/Output
#BAD_FUNCTION_CATEGORIES = BADFUNC.WCHAR_H;Misra2012:21.6;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE


#BAD_FUNCTION_REGEX = ^(atof)$
#BAD_FUNCTION_MESSAGE = Use of atof
#BAD_FUNCTION_CATEGORIES = BADFUNC.ATOF;Misra2012:21.7;Misra2004:20.10;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(atoi)$
#BAD_FUNCTION_MESSAGE = Use of atoi
#BAD_FUNCTION_CATEGORIES = BADFUNC.ATOI;Misra2012:21.7;Misra2004:20.10;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(atol)$
#BAD_FUNCTION_MESSAGE = Use of atol
#BAD_FUNCTION_CATEGORIES = BADFUNC.ATOL;Misra2012:21.7;Misra2004:20.10;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(atoll)$
#BAD_FUNCTION_MESSAGE = Use of atoll
#BAD_FUNCTION_CATEGORIES = BADFUNC.ATOLL;Misra2012:21.7;Misra2004:20.10;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(abort)$
#BAD_FUNCTION_MESSAGE = Use of abort
#BAD_FUNCTION_CATEGORIES = BADFUNC.ABORT;Misra2012:21.8;Misra2004:20.11;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(exit)$
#BAD_FUNCTION_MESSAGE = Use of exit
#BAD_FUNCTION_CATEGORIES = BADFUNC.EXIT;Misra2012:21.8;Misra2004:20.11;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(getenv)$
#BAD_FUNCTION_MESSAGE = Use of getenv
#BAD_FUNCTION_CATEGORIES = BADFUNC.GETENV;Misra2012:21.8;Misra2004:20.11;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(bsearch)$
#BAD_FUNCTION_MESSAGE = Use of bsearch
#BAD_FUNCTION_CATEGORIES = BADFUNC.BSEARCH;Misra2012:21.9;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(qsort)$
#BAD_FUNCTION_MESSAGE = Use of qsort
#BAD_FUNCTION_CATEGORIES = BADFUNC.QSORT;Misra2012:21.9;CWE:400;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(asctime|asctime_r|clock|clock_getres|clock_gettime|clock_settime|ctime|ctime_r|difftime|getdate|gmtime|gmtime_r|localtime|localtime_r|mktime|nanosleep|strftime|strptime|time|timer_create|timer_delete|timer_gettime|timer_getoverrun|timer_settime|tzset)$
#BAD_FUNCTION_MESSAGE = Use of <time.h> Time/Date Function
#BAD_FUNCTION_CATEGORIES = BADFUNC.TIME_H;Misra2012:21.10;CWE:758;CWE:676
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^(feclearexcept|fegetexceptflag|feraiseexcept|fesetexceptflag|fetestexcept|fegetround|fesetround|fegetenv|feholdexcept|fesetenv|feupdateenv)$
#BAD_FUNCTION_MESSAGE = Use of <fenv.h> Exception Handling Function
#BAD_FUNCTION_CATEGORIES = BADFUNC.FENV_H;Misra2012:21.12
#BAD_FUNCTION_BASE_RANK = 10
#BAD_FUNCTION_SIGNIFICANCE = STYLE

#BAD_FUNCTION_REGEX = ^[dD][eE][sS]_ecb(2)?_encrypt$
#BAD_FUNCTION_MESSAGE = Weak Cryptography
#BAD_FUNCTION_INFO = it is a cryptographically weak algorithm (one of the MD5 or DES family of algorithms)
#BAD_FUNCTION_CATEGORIES = BADFUNC.WEAKCRYPTO;CWE:327
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^[dD][eE][sS]_(x|n|p)cbc_encrypt$
#BAD_FUNCTION_MESSAGE = Weak Cryptography
#BAD_FUNCTION_INFO = it is a cryptographically weak algorithm (one of the MD5 or DES family of algorithms)
#BAD_FUNCTION_CATEGORIES = BADFUNC.WEAKCRYPTO;CWE:327
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^[dD][eE][sS]_(c|o)fb(64)?_encrypt$
#BAD_FUNCTION_MESSAGE = Weak Cryptography
#BAD_FUNCTION_INFO = it is a cryptographically weak algorithm (one of the MD5 or DES family of algorithms)
#BAD_FUNCTION_CATEGORIES = BADFUNC.WEAKCRYPTO;CWE:327
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^[dD][eE][sS]_ede2_(cbc|cfb64|ofb64)_encrypt$
#BAD_FUNCTION_MESSAGE = Weak Cryptography
#BAD_FUNCTION_INFO = it is a cryptographically weak algorithm (one of the MD5 or DES family of algorithms)
#BAD_FUNCTION_CATEGORIES = BADFUNC.WEAKCRYPTO;CWE:327
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY  

#BAD_FUNCTION_REGEX = ^[dD][eE][sS]_(f)?crypt$
#BAD_FUNCTION_MESSAGE = Weak Cryptography
#BAD_FUNCTION_INFO = it is a cryptographically weak algorithm (one of the MD5 or DES family of algorithms)
#BAD_FUNCTION_CATEGORIES = BADFUNC.WEAKCRYPTO;CWE:327
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY  

#BAD_FUNCTION_REGEX = ^MD(2|4|5)(_Init|_Update|_Final)?$
#BAD_FUNCTION_MESSAGE = Weak Cryptography
#BAD_FUNCTION_INFO = it is a cryptographically weak algorithm (one of the MD5 or DES family of algorithms)
#BAD_FUNCTION_CATEGORIES = BADFUNC.WEAKCRYPTO;CWE:327
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^ptrace$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^IsDebuggerPresent$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^NtQueryInformationProcess$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^ProcessDebugObjectHandle$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^RtlQueryProcessHeapInformation$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^RtlQueryProcessDebugInformation$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^SetUnhandledExceptionFilter$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^NtCreateDebugObject$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#BAD_FUNCTION_REGEX = ^NtQuerySystemInformation$
#BAD_FUNCTION_MESSAGE = Possible Anti-Debugging
#BAD_FUNCTION_INFO = it can be used to detect a debugger
#BAD_FUNCTION_CATEGORIES = BADFUNC.ANTIDEBUG
#BAD_FUNCTION_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = SECURITY

#  Floating Point bad functions
#BAD_FUNCTION_REGEX = ^_?_?gamma[fl]?$
#BAD_FUNCTION_MESSAGE = Use of gamma
#BAD_FUNCTION_INFO = it is not portable. Use tgamma() or lgamma() instead
#BAD_FUNCTION_CATEGORIES = BADFUNC.FLOAT.GAMMA
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = RELIABILITY

#BAD_FUNCTION_REGEX = ^_?_?drem[fl]?$
#BAD_FUNCTION_MESSAGE = Use of drem
#BAD_FUNCTION_INFO = it is obsolete. Use remainder() instead
#BAD_FUNCTION_CATEGORIES = BADFUNC.FLOAT.DREM
#BAD_FUNCTION_BASE_RANK = 1.0
#BAD_FUNCTION_SIGNIFICANCE = RELIABILITY

# Parameter PLUGINS
#
# Purpose
#  Specifies filenames of C, Python, and Scheme plug-ins to load.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string
#
# Behavior
#  The specified files will be loaded as plug-ins.
#
#  CodeSonar will instantiate variable $GTHOME with the path to the
#  CodeSonar installation.
#
# Notes
#  For example:
#    PLUGINS += /tmp/pname.stk
#    PLUGINS += /tmp/pname.py
#    PLUGINS += /tmp/pname.pyc
#    PLUGINS += /tmp/pname.so
#    PLUGINS += /tmp/pname.dll
#    PLUGINS += /tmp/pname.bundle
#    PLUGINS += $GTHOME/projectXplugins/pname.so
#    PLUGINS += c:\Documents and Settings\Bob\Desktop\pname.dll
#
#  For more information about CodeSonar plug-ins, see CodeSonar
#  Plug-In API [doc/html/API/CodeSonarPlugins/PluginAPI.html].
#
#  Distributed analysis [doc/html/Workings/DistributedAnalysis.html]
#  slaves will use the PLUGINS setting from the analysis master (not
#  the one from the slave's associated launch daemon).
#
#  For plug-ins using other languages:
#  - Java: use JAVA_PLUGIN_CLASSES, JAVA_PLUGIN_JVM, and
#    JAVA_PLUGIN_CLASSPATH to load.
#  - C#: use CSHARP_PLUGINS and CSHARP_PLUGIN_DOTNET_VERSION to
#    load.
#  - C++ (using the csonar_plugin.hpp interface and names in the cs
#    namespace): #define the preprocessor symbol CS_CPP_IMPL in
#    exactly one compilation unit before including any CodeSonar
#    header files. This will define some global variables that would
#    otherwise cause link errors.


# Parameter JAVA_PLUGIN_JVM
#
# Purpose
#  Specifies the JVM DLL or shared object to use for all Java plug-
#  ins.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string
#
# Behavior
#  The specified string will be treated as the absolute path to the
#  Java DLL or shared object.
#
#  CodeSonar will instantiate variable $GTHOME with the path to the
#  CodeSonar installation.
#
# Notes
#  The Java API for CodeSonar currently has beta-level support. For
#  more information, see the notes on API Languages
#  [doc/html/API/CoreAPI.html#impls].
#
#  For example:
#    JAVA_PLUGIN_JVM = C:\Program Files\Java\jre6\bin\server\jvm.dll
#    JAVA_PLUGIN_JVM = /usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/server/libjvm.so
#    JAVA_PLUGIN_JVM = /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/server/libjvm.dylib
#
#  In some situations on Mac OS, Java may falsely complain that it
#  isn't installed (JDK-7131356). One workaround is to use
#  libjli.dylib instead of libjvm.dylib:
#    JAVA_PLUGIN_JVM = /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/jre/lib/jli/libjli.dylib


# Parameter JAVA_PLUGIN_CLASSPATH
#
# Purpose
#  Specifies the Java classpath for all Java plug-ins.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string
#
# Behavior
#  Multiple directories can be placed in the classpath by using the
#  += operator.
#
#  CodeSonar will instantiate variable $GTHOME with the path to the
#  CodeSonar installation.
#
# Notes
#  The Java API for CodeSonar currently has beta-level support. For
#  more information, see the notes on API Languages
#  [doc/html/API/CoreAPI.html#impls].
#
#  For example:
#    JAVA_PLUGIN_CLASSPATH += c:\pluginclasspath


# Parameter JAVA_PLUGIN_JVM_FLAGS
#
# Purpose
#  Specifies additional flags passed to the JVM.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string
#
# Behavior
#  Multiple flags can be specified by using the += operator. Place
#  one flag on each line.
#
#  The flags are forwarded to JNI_CreateJavaVM in the options field
#  of the JavaVMInitArgs parameter.
#
# Notes
#  The Java API for CodeSonar currently has beta-level support. For
#  more information, see the notes on API Languages
#  [doc/html/API/CoreAPI.html#impls].
#
#  For example:
#    JAVA_PLUGIN_JVM_FLAGS += -Xmx2g
#    JAVA_PLUGIN_JVM_FLAGS += -Djava.compiler=NONE
#    JAVA_PLUGIN_JVM_FLAGS += -Djava.library.path=c:\mylibs
#    JAVA_PLUGIN_JVM_FLAGS += -verbose:jni


# Parameter JAVA_PLUGIN_CLASSES
#
# Purpose
#  Specifies a Java plug-in by naming the Java class whose main()
#  method should be invoked.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string, representing a fully-qualified class name: use / as the
#  package separator if the class is in a package.
#
# Behavior
#  The specified string will be used as the name argument to the JNI
#  FindClass()
#  [http://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html#FindClass]
#  function; the main() function of the identified class will be
#  invoked as a CodeSonar plug-in.
#
# Notes
#  The Java API for CodeSonar currently has beta-level support. For
#  more information, see the notes on API Languages
#  [doc/html/API/CoreAPI.html#impls].
#
#  Below is a small sample plug-in.
#    import com.grammatech.cs.*;
#    import java.lang.*;
#    
#    class echo_point_visitor extends point_visitor{
#    public echo_point_visitor() throws result{}
#    
#    public void visit(point p)
#    {
#    System.out.println("Java visits " + p);
#    }
#    };
#    
#    public class Test{
#    public static void main() {
#    try{
#    analysis.add_point_visitor(new echo_point_visitor());
#    }catch(result r){
#    System.out.println(r);
#    }
#    }
#    }
#
#  Then to include this plug-in, make sure the path to the class
#  file/package is specified with JAVA_PLUGIN_CLASSPATH, then use
#  JAVA_PLUGIN_CLASSES to specify the class name:
#    JAVA_PLUGIN_CLASSES += Test
#  or, if it is in a package:
#    JAVA_PLUGIN_CLASSES += com/example/csplugin/Test


# Parameter CSHARP_PLUGIN_DOTNET_VERSION
#
# Purpose
#  The version of the .NET framework used to build the assemblies
#  specified by CSHARP_PLUGINS (if any).
#
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string
#
# Behavior
#  This string is passed to the Microsoft function
#  CorBindToRuntimeEx as the first argument. It must be exactly
#  correct, or the assembly will not load. This value can be
#  obtained by running csc /? and inspecting the first line of
#  output.
#
# Notes
#  The C# API for CodeSonar currently has beta-level support. For
#  more information, see the notes on API Languages
#  [doc/html/API/CoreAPI.html#impls].
#
## CSHARP_PLUGIN_DOTNET_VERSION = v4.0.30319


# Parameter CSHARP_PLUGINS
#
# Purpose
#  A list of plug-in .NET assemblies.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  string
#
# Behavior
#  The += operator can be used to load multiple plug-ins. Each
#  assembly should contain all the .cs files in
#  codesonar\src\api\csharp\*.cs.
#
#  Each assembly must contain a class named Main with a public
#  static method named main, with signature:
#    public static int main(String dummy)
#
#  CodeSonar will instantiate variable $GTHOME with the path to the
#  CodeSonar installation.
#
# Notes
#  The C# API for CodeSonar currently has beta-level support. For
#  more information, see the notes on API Languages
#  [doc/html/API/CoreAPI.html#impls].
#
#  Below is a small sample plug-in.
#    using System;
#    
#    class echo_point_visitor: point_visitor{
#    public echo_point_visitor(){}
#    
#    public override void visit(point p)
#    {
#    /* Always wrap visitors in exception handlers.  If an
#    * exception isn't caught, behavior is undefined.
#    */
#    try{
#    Console.WriteLine("csharp visits " + p);
#    }
#    catch( Exception e )
#    {
#    Console.WriteLine(e);
#    }
#    }
#    };
#    
#    public class Main
#    {
#    public static int main(String dummy)
#    {
#    /* Always wrap everything in an exception handler.  If an
#    * exception isn't caught, behavior is undefined.
#    */
#    try{
#    analysis.add_point_visitor(new echo_point_visitor());
#    }
#    catch( Exception e )
#    {
#    Console.WriteLine(e);
#    }
#    return 0; // ignored
#    }
#    }
#
## CSHARP_PLUGINS += h:\pluginassembly.dll


# Parameter REPORT_IMPLIED_EQUALITY
#
# Purpose
#  Specifies whether or not implied unsafe behavior due to
#  equality/disequality is sufficient cause to issue warnings.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  - No : warnings will not be produced just because conditionals
#    along a path imply unsafe behavior due to equality (==) or
#    disequality (!=); satisfying assignments to the variables must
#    also exist.
#
# Notes
#  Setting this to "No" will decrease the false positive rate and
#  increase the false negative rate.
#
#  If set to "No", then the following would be suppressed (assuming
#  CodeSonar does not find a place where p is assigned NULL):
#
#    if( p == NULL )
#    *p = 42;
#
#  but this would not:
#
#    p = NULL;
#    if( p == NULL )
#    *p = 42;
#
#  It may be difficult to find vulnerabilities in functions that are
#  never called when this is set to "No", since the values of the
#  procedure inputs are never assigned.
#
#  The factory setting is Yes because most programmers will not test
#  for equality unless they believe it can happen.
#
#  The warning classes affected by this parameter are the same as
#  those for TIME_LIMIT_INTRA_CLASSIFY.
#
#REPORT_IMPLIED_EQUALITY = Yes


# Parameter REPORT_IMPLIED_INEQUALITY
#
# Purpose
#  Specifies whether or not implied unsafe behavior due to
#  inequality is sufficient cause to issue warnings.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  - No : warnings will not be produced just because conditionals
#    along a path imply unsafe behavior due to inequality (<, <=, >,
#    >=); satisfying assignments to the variables must also exist.
#
# Notes
#  Setting this to "No" will decrease the false positive rate and
#  increase the false negative rate.
#
#  If set to "No", then the following would be suppressed (assuming
#  CodeSonar does not find a place where i is assigned a negative
#  value):
#
#    int A[10];
#    if( i < 0 )
#    A[i] = 42;
#
#  but this would not:
#
#    int A[10];
#    i = -1;
#    if( i < 0 )
#    A[i] = 42;
#
#  It may be difficult to find vulnerabilities in functions that are
#  never called when this is set to "No", since the values of the
#  procedure inputs are never assigned.
#
#  The factory setting is No because loops often have conditions
#  that are always satisfied on the first iteration.
#
#  The warning classes affected by this parameter are the same as
#  those for TIME_LIMIT_INTRA_CLASSIFY.
#
#REPORT_IMPLIED_INEQUALITY = No


# Parameter DAEMON_TIMEOUT
#
# Purpose
#  Seconds of inactivity before the analysis daemon shuts down to
#  conserve system resources.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  non-negative integer
#
# Behavior
#  When the web application needs certain information (such as
#  source file listings), it queries the analysis daemon. If the
#  analysis daemon is not running, then the web application will
#  attempt to start it. This can take a minute or more, so timing
#  out quickly is often undesirable.
#
# Notes
#  A low value can result in slow web queries if the time between
#  applicable queries exceeds this value. A high value can result in
#  an extra process hanging around doing nothing on the analysis
#  machine. The factory setting is 30 minutes ( = 1800 seconds).
#
#  The analysis log will not be finalized, and so the Analysis Log
#  [doc/html/GUI/GUI_Log_Analysis.html] contents may continue to
#  change, until the analysis daemon times out (or is properly shut
#  down).
#

#DAEMON_TIMEOUT = 1800


# Parameter FOREGROUND_DAEMON_TIMEOUT
#
# Purpose
#  Seconds of inactivity when running in foreground mode before the
#  analysis daemon shuts down to conserve system resources.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  non-negative integer
#
# Behavior
#  When the web application needs certain information (such as
#  source file listings), it queries the analysis daemon. If the
#  analysis daemon is not running, then the web application will
#  attempt to start it. This can take a minute or more, so timing
#  out quickly is often undesirable.
#
# Notes
#  Applicable when running with FOREGROUND=Yes (or -foreground on
#  the command line).
#
#  A low value can result in slow web queries if the time between
#  applicable queries exceeds this value. A high value can result in
#  an extra process hanging around doing nothing on the analysis
#  machine. The factory setting is 30 minutes ( = 1800 seconds).
#
#  The analysis log will not be finalized, and so the Analysis Log
#  [doc/html/GUI/GUI_Log_Analysis.html] page contents may continue
#  to change, until the analysis daemon times out (or is properly
#  shut down).
#
#FOREGROUND_DAEMON_TIMEOUT = 5


# Parameter TOLERATE_PARSE_ERRORS
#
# Purpose
#  If errors were encountered in parsing the code, specifies whether
#  or not the analysis will run anyway
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - No : the analysis will refuse to run on a project that contains
#    parse errors. Analyzing code that contains parse errors
#    produces suboptimal results. Depending on the nature of the
#    parse errors, the impact could be tiny or enormous.
#
# Notes
#  A log of parse errors and compiler command lines can be found at
#  <prjname>.prj_files/log.txt.
#
#TOLERATE_PARSE_ERRORS = Yes


# Parameter NULL_POINTER_THRESHOLD
#
# Purpose
#  Determines what qualifies as a Null Pointer Dereference
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.MEM.NPD: Used by Null Pointer Dereference
#
# Type
#  integer
#
# Behavior
#  Any dereference of an address less than this value will be
#  treated as a Null Pointer Dereference. Most machines will never
#  allocate objects on the 0 page in user mode.
#
# Notes
#  Non-zero values must be treated as Null Pointer Dereferences in
#  order to catch things such as:
#
#    int *p = &s->f; /* this is ok, even if s is null */
#    *p = 42;        /* this is where the program will
#    * crash if s was null, because an
#    * address such as '4' is being dereferenced
#    * (assuming f is 4 bytes into s). */
#
#NULL_POINTER_THRESHOLD = 4096


# Parameter REPORT_TEMPLATE_UQ_WARNINGS
#
# Purpose
#  Determines whether warnings will be reported in templated
#  functions when the warning class is one of those that requires
#  some condition to hold on all paths.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_LANG.STRUCT.RC: Used by Redundant Condition
#  - WC_LANG.STRUCT.UC: Used by Unreachable Code: 5 warning classes
#  - WC_LANG.STRUCT.UUVAL: Used by Unused Value
#  - WC_LANG.STRUCT.UA: Used by Useless Assignment
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", then warnings of classes requiring universal
#  quantification over paths will be reported in C++ templated
#  functions. The affected warning classes are:
#  - Redundant Condition
#  - Unreachable Code: 5 warning classes
#  - Unused Value
#  - Useless Assignment
#
# Notes
#  Setting this to "Yes" will increase the false positive rate and
#  decrease the false negative rate for warning classes requiring
#  universal quantification over paths.
#
#  These warnings are often not very useful. For example, if(
#  sizeof(T)==sizeof(int) ) is likely to cause some unreachable code
#  in some template instantations, but this isn't interesting to
#  most users. However, useful warnings in these functions will also
#  be lost.
#
#REPORT_TEMPLATE_UQ_WARNINGS = No


# Parameter REPORT_INTER_PARTIAL_UQ_WARNINGS
#
# Purpose
#  Determines whether exhaustive interprocedural exploration is
#  required before reporting warnings in classes for which something
#  must hold on all paths.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_LANG.STRUCT.RC: Used by Redundant Condition
#  - WC_LANG.STRUCT.UC: Used by Unreachable Code: 5 warning classes
#  - WC_LANG.STRUCT.UUVAL: Used by Unused Value
#  - WC_LANG.STRUCT.UA: Used by Useless Assignment
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", then warnings of classes requiring universal
#  quantification over paths will be reported on statements preceded
#  by calls to functions that have not been exhaustively explored.
#  The default behavior is to suppress such warnings. The affected
#  warning classes are:
#  - Redundant Condition
#  - Unreachable Code: 5 warning classes
#  - Unused Value
#  - Useless Assignment
#
# Notes
#  Setting this to "Yes" will increase the false positive rate and
#  decrease the false negative rate for warning classes requiring
#  universal quantification over paths.
#
#REPORT_INTER_PARTIAL_UQ_WARNINGS = No


# Parameter REPORT_PARTIAL_NTAD_WARNINGS
#
# Purpose
#  Determines whether exhaustive exploration is required before
#  issuing a Null Test After Dereference warning.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_LANG.STRUCT.NTAD: Used by Null Test After Dereference
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", then Null Test After Dereference warnings will
#  be issued even if all paths leading to the test have not been
#  explored. Null Test After Dereference are only an anomaly if all
#  paths leading to the test have dereferenced the pointer.
#
# Notes
#  Setting this to "Yes" will increase the false positive rate and
#  decrease the false negative rate for Null Test After Dereference
#  warnings.
#
#  In practice, setting this to "Yes" usually reveals more true
#  positives than false positives.
#
#REPORT_PARTIAL_NTAD_WARNINGS = Yes


# Parameter UNDEF_FUNCS_EXHAUSTIVE
#
# Purpose
#  Determines whether calls to undefined functions and function
#  pointer calls are considered exhaustively explored.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_LANG.STRUCT.NTAD: Used by Null Test After Dereference
#  - WC_LANG.STRUCT.RC: Used by Redundant Condition
#  - WC_LANG.STRUCT.UC: Used by Unreachable Code: 5 warning classes
#  - WC_LANG.STRUCT.UUVAL: Used by Unused Value
#  - WC_LANG.STRUCT.UA: Used by Useless Assignment
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", then warnings of classes requiring universal
#  quantification over paths can be reported on statements preceded
#  by calls to undefined functions or function pointer calls. The
#  default behavior is to report such warnings. The affected warning
#  classes are:
#  - Null Test After Dereference
#  - Redundant Condition
#  - Unreachable Code: 5 warning classes
#  - Unused Value
#  - Useless Assignment
#
# Notes
#  Setting this to "Yes" will increase the false positive rate and
#  decrease the false negative rate for warning classes requiring
#  universal quantification over paths. Using the setting "No" is
#  most useful if undefined functions and functions called using
#  function pointers are modifying globals that are then tested by
#  the calling function.
#
#UNDEF_FUNCS_EXHAUSTIVE = Yes


# Parameter TIME_LIMIT_INTRA_EXPLORE
#
# Purpose
#  Seconds the analysis may spend doing intraprocedural exploration
#  in a single procedure.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  integer
#
# Behavior
#  If this time limit expires, summaries for the procedure are
#  rolled back and the analysis will treat call sites to the
#  procedure as if the procedure is not defined in the project.
#
# Notes
#  This specifies elapsed time.
#
#  This parameter affects checks for most warning classes. The
#  classes NOT affected are:
#  - Dangerous Function Cast
#  - Empty {Branch, for, if, switch, while} Statement
#  - Function Call Has No Effect
#  - Negative Character Value
#  - Varargs Function Cast

#TIME_LIMIT_INTRA_EXPLORE = 25


# Parameter TIME_LIMIT_INTRA_CLASSIFY
#
# Purpose
#  Seconds the analysis may spend determining whether potential
#  intraprocedural vulnerabilities warrant further examination, per
#  procedure.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  integer
#
# Behavior
#  Potential vulnerabilities nearer to the beginning of procedures
#  receive preferential treatment. Once the time limit expires,
#  potential intraprocedural vulnerabilities starting in the current
#  procedure are ignored until the analysis moves on to the next
#  procedure.
#
# Notes
#  This specifies elapsed time. The default limit is likely to be
#  exceeded in large procedures.
#
#  This parameter affects checks for most warning classes. The
#  classes NOT affected are:
#  - Dangerous Function Cast
#  - Empty {Branch, for, if, switch, while} Statement
#  - Format String
#  - Function Call Has No Effect
#  - Ignored Return Value
#  - Negative Character Value
#  - Potential Unbounded Loop
#  - Null Test After Dereference
#  - Redundant Condition
#  - Unreachable Code: 5 warning classes
#  - Unused Value
#  - Useless Assignment
#  - Varargs Function Cast
#
#TIME_LIMIT_INTRA_CLASSIFY = 8


# Parameter TIME_LIMIT_INTER_CLASSIFY
#
# Purpose
#  Seconds the analysis may spend determining whether potential
#  interprocedural vulnerabilities warrant further examination, per
#  procedure.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  integer
#
# Behavior
#  Potential vulnerabilities nearer to the beginning of procedures
#  receive preferential treatment. Once the time limit expires,
#  potential interprocedural vulnerabilities starting in the current
#  procedure are ignored until the analysis moves on to the next
#  procedure.
#
# Notes
#  This specifies elapsed time. The default limit is likely to be
#  exceeded in large procedures.
#
#  The warning classes affected by this parameter are the same as
#  those for TIME_LIMIT_INTRA_CLASSIFY.
#
#TIME_LIMIT_INTER_CLASSIFY = 8


# Parameter TIME_LIMIT_RESOLVE
#
# Purpose
#  Seconds the analysis may spend resolving potential intra- and
#  interprocedural vulnerabilities, per procedure.
#
# Type
#  integer
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Behavior
#  Once likely vulnerabilities have been identified, an intermediate
#  refinement step takes place. This preference limits the amount of
#  time spent on the refinement step.
#
# Notes
#  This specifies elapsed time. The factory setting limit is
#  extremely unlikely to be exceeded and exists to guard against
#  pathological behavior.
#
#  The warning classes affected by this parameter are the same as
#  those for TIME_LIMIT_INTRA_CLASSIFY.
#
#TIME_LIMIT_RESOLVE = 16


# Parameter TIME_LIMIT_REFINE
#
# Purpose
#  Seconds the analysis may spend refining potential intra- and
#  interprocedural vulnerabilities, per procedure.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  integer
#
# Behavior
#  Once likely vulnerabilities have been identified in the
#  classification phase, the analysis applies a refinement step both
#  to eliminate false positives and to enhance the information
#  contained in the warning reports. If this limit expires, then
#  yet-to-be-refined likely vulnerabilities will be dropped.
#
# Notes
#  This specifies elapsed time.
#
#  The warning classes affected by this parameter are the same as
#  those for TIME_LIMIT_INTRA_CLASSIFY.
#
#TIME_LIMIT_REFINE = 16


# Parameter TIME_LIMIT_RENDER
#
# Purpose
#  Seconds the analysis may spend rendering intra- and
#  interprocedural vulnerabilities, per procedure.
#
# Type
#  integer
#
# Behavior
#  Once a warning is identified, the analysis renders a warning
#  report for presentation to the user. If the rendering phase takes
#  longer than the limit specified here, the warning is discarded.
#
#  Factors that can make rendering take a long time include
#  extremely long lines of source code, deeply nested call stacks,
#  and heavy use of the preprocessor.
#
# Notes
#  The factory setting limit is rarely exceeded and exists to guard
#  against pathological constructs.
#
#  All warning classes can be affected by this limit.
#
#TIME_LIMIT_RENDER = 60


# Parameter TIME_LIMIT_LEAK_CLASSIFY
#
# Purpose
#  Seconds the analysis may spend determining whether potential Leak
#  cases warrant further examination, per procedure.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#  - WC_ALLOC.LEAK: Used by Leak
#
# Type
#  integer
#
# Behavior
#  Potential leaks nearer to the beginning of procedures receive
#  preferential treatment.
#
# Notes
#  This specifies elapsed time. The factory setting limit is not
#  likely to be exceeded when the factory setting for SEARCH_BOUND
#  is used.
#
#TIME_LIMIT_LEAK_CLASSIFY = 20


# Parameter TIME_LIMIT_LEAK_REFINE
#
# Purpose
#  Seconds the analysis may spend refining potential Leak cases, per
#  procedure.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#  - WC_ALLOC.LEAK: Used by Leak
#
# Type
#  integer
#
# Behavior
#  Once likely leaks have been identified in the classification
#  phase, the analysis applies a refinement step both to eliminate
#  false positives and to enhance the information contained in the
#  warning reports. If this limit expires, then yet-to-be-refined
#  leaks will be dropped.
#
# Notes
#  This specifies elapsed time.
#
#TIME_LIMIT_LEAK_REFINE = 60


# Parameter TIME_LIMIT_PROP_EXHAUSTIVE
#
# Purpose
#  Seconds the analysis may spend determining which parts of a
#  procedure have been exhaustively explored.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  integer
#
# Behavior
#  Some checks (such as those for Unreachable Code: 5 warning
#  classes) can only be reported with respect to portions of
#  procedures that have been exhaustively explored. Making this
#  determination can sometimes be extremely expensive (typically in
#  generated code).
#
# Notes
#  This specifies elapsed time. The factory setting limit is not
#  likely to be exceeded: it exists to guard against pathological
#  behavior.
#
#  The warning classes affected by this parameter are the same as
#  those for TIME_LIMIT_INTRA_CLASSIFY.
#
#TIME_LIMIT_PROP_EXHAUSTIVE = 60


# Parameter TIME_LIMIT_DATA_RACE_PATH_SEARCH
#
# Purpose
#  Bounds the time that data race analysis can spend in any subunit
#  of work (threadA, threadB, memory_location).
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  integer
#
# Behavior
#  When set to integer N, specifies that a subunit of work (threadA,
#  threadB, memory_location) in data race analysis will be
#  terminated if it takes longer than N seconds. This can result in
#  Data Race false negatives for the corresponding thread pair and
#  memory location.
#
#  Units of work are also subject to time limits based on the
#  overall time budget allocated for data race search. Full details
#  [#data_race_budget] are provided in the documentation for
#  DATA_RACE_BARRIER_PERIOD.
#
# Notes
#  A subunit of work in the data race analysis is represented as a
#  triple (threadA, threadB, memory_loc): "search for data races
#  between threadA and threadB with respect to memory_loc, issuing
#  warnings as appropriate".

#TIME_LIMIT_DATA_RACE_PATH_SEARCH = 600


# Parameter TIME_LIMIT_DATA_RACE_PATH_SEARCH_PER_PROCEDURE
#
# Purpose
#  Used to compute overall time budget for data race refinement.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  integer
#
# Behavior
#  When set to integer N, specifies that the total time budget for
#  data race search is num_procedures * N milliseconds, where
#  num_procedures is the number of procedures in the analyzed
#  project.
#
#  The total budget will not be exceeded. Full details of the data
#  race budget mechanism [#data_race_budget] are provided in the
#  documentation for DATA_RACE_BARRIER_PERIOD.
#
# Notes
#  The factory setting (100) would allow the entire data race phase
#  to run for almost 30 hours on a program with a million procedures
#  (very large program).

#TIME_LIMIT_DATA_RACE_PATH_SEARCH_PER_PROCEDURE = 100


# Parameter TIME_LIMIT_TAINT_REFINE
#
# Purpose
#  Bounds the time that taint analysis can spend refining taint
#  warnings in a procedure.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  integer
#
# Behavior
#  When set to integer N, specifies that taint refinement in a
#  procedure will be terminated if it takes more than N seconds.
#  This can result in taint warning false negatives for that
#  procedure.
#
#  Units of work are also subject to time limits based on the
#  overall time budget for taint refinement. Full details of the
#  taint refinement budget mechanism [#taint_refine_budget] are
#  provided in the documentation for REFINEMENT_BARRIER_PERIOD.
#
# Notes
#  Once likely taint warnings have been identified in a procedure
#  (at the start of the path), a search phase takes place to
#  determine which of those taint warnings are valid.
#  TIME_LIMIT_TAINT_REFINE specifies how many seconds, per
#  procedure, this search may take.
#
#  The warning classes affected by this parameter are:
#
#  - Addition Overflow of Allocation Size
#  - Addition Overflow of Size
#  - Command Injection
#  - Format String Injection
#  - Hardcoded Authentication
#  - Hardcoded Crypto Key
#  - Hardcoded Crypto Salt
#  - LDAP Injection
#  - Library Injection
#  - Multiplication Overflow of Allocation Size
#  - Multiplication Overflow of Size
#  - Plaintext Storage of Password
#  - Potential Timebomb
#  - SQL Injection
#  - Subtraction Underflow of Allocation Size
#  - Subtraction Underflow of Size
#  - Tainted Allocation Size
#  - Tainted Buffer Access
#  - Tainted Configuration Setting
#  - Tainted Filename
#  - Tainted Network Address
#  - Tainted Write
#  - Truncation of Allocation Size
#  - Truncation of Size
#  - Untrusted Library Load
#  - Untrusted Network Host
#  - Untrusted Network Port
#  - Untrusted Process Creation.

#TIME_LIMIT_TAINT_REFINE = 60


# Parameter TIME_LIMIT_TAINT_REFINE_PER_PROCEDURE
#
# Purpose
#  Used to compute overall time budget for taint refinement.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  integer
#
# Behavior
#  When set to integer N, specifies that the total time budget for
#  taint refinement is num_procedures * N milliseconds, where
#  num_procedures is the number of procedures in the analyzed
#  project.
#
#  The total budget will not be exceeded. Full details of the taint
#  refinement budget mechanism [#taint_refine_budget] are provided
#  in the documentation for REFINEMENT_BARRIER_PERIOD.
#
# Notes
#  This specifies time per procedure in milliseconds. The factory
#  setting (200) would allow the taint refinement phase to run for
#  55 hours on a program with a million procedures (very large
#  program).

#TIME_LIMIT_TAINT_REFINE_PER_PROCEDURE = 200


# Parameter CPU_SPEED_ADJUSTMENT
#
# Purpose
#  Specifies the relative speed of the machine or machines running
#  the analysis.
#
# Type
#  integer
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Behavior
#  When set to integer N, specifies that each analysis machine is
#  N/100 times as fast as CodeSonar's benchmark "canonical machine"
#  (approximately the speed of a high-end x86 CPU circa 2015).
#
#  This relative speed is used in determining the conversion between
#  the time limits and "work limits" expressed by other
#  configuration parameters: a faster computer will be expected to
#  perform more work than a slower computer in the same amount of
#  time.
#
# Notes
#  Time limit values for various processing steps, such as
#  TIME_LIMIT_INTRA_EXPLORE, are expressed in units of time, such as
#  seconds, but in order to make the application of these limits
#  deterministic they are actually enforced in terms of "work", or
#  progress through an algorithm. Since the rate of progress through
#  an algorithm depends on CPU speed, the conversion is based in
#  part on an estimate of this speed.
#
#  By default, CodeSonar will treat the analysis machine as having
#  the same speed as CodeSonar's benchmark "canonical machine":
#  approximately the speed of a high-end x86 CPU circa 2015.
#
#  - If your analysis machine is significantly faster than the
#    benchmark "canonical machine", analysis operations will time
#    out sooner than they should. This can result in an increase in
#    overall timeouts and therefore a somewhat less thorough
#    analysis. This effect is deterministic.
#  - If your analysis machine is significantly slower than the than
#    the benchmark "canonical machine", analysis operations will
#    time out later than they should, if at all. This can result in
#    a longer analysis run time than expected. CodeSonar has a
#    backup mechanism that will force a timeout if the actual time
#    spent is much longer than the requested value. These "backup
#    timeouts" may be more frequent on a slower computer. Since they
#    are time-based, they are nondeterministic and when they occur
#    they may introduce nondeterminism into the analysis.
#
#  If you observe either of these issues you can compensate for the
#  difference in speed between your machine and the benchmark
#  "canonical machine" by changing the setting of
#  CPU_SPEED_ADJUSTMENT.
#
#  Example 1: Your analysis machine is 50% faster than CodeSonar's
#  "canonical machine".
#    CPU_SPEED_ADJUSTMENT = 150
#
#  Example 2: Your analysis machine is only half as fast as
#  CodeSonar's "canonical machine".
#    CPU_SPEED_ADJUSTMENT = 50
#
#  CPU_SPEED_ADJUSTMENT assumes that all of the machines used in a
#  distributed analysis run at the same speed. If this is not the
#  case you have two options.
#  - If they are not too dissimilar in speed, use the value
#    appropriate for the average of their speeds.
#  - Otherwise, use the value appropriate for the slowest machine
#    contributing to the analysis. This will minimize backup
#    timeouts and the resulting potential for non-determinism.

## CPU_SPEED_ADJUSTMENT = 100


# Parameter DATA_RACE_MAX_MEM_ACCESSES
#
# Purpose
#  Bounds the number of memory accesses that are tracked in a single
#  procedure for detecting data races.
#
# Type
#  non-negative integer
#
# Tags
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Behavior
#  If a procedure accesses more than this many shared variables,
#  some variables will not be checked for data races. Raising this
#  will result in a more thorough analysis, but will increase the
#  time and memory used by the analysis.
#
# Notes
#  This only affects the analysis for Data Race warnings. If this is
#  set to a very high number (for example, more than 200,000)
#  CodeSonar may behave unpredictably or crash.

#DATA_RACE_MAX_MEM_ACCESSES = 1000


# Parameter DATA_RACE_MAX_LOCKSETS_PER_MEM_ACCESS
#
# Purpose
#  Bounds the number of sets held of locks that are tracked for any
#  given (transitive) memory access.
#
# Type
#  non-negative integer
#
# Tags
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Behavior
#  If a procedure accesses more than this many shared variables,
#  some variables will not be checked for data races. Increasing the
#  setting will result in a more thorough analysis, but will
#  increase the time and memory used by the analysis.
#
# Notes
#  This only affects the analysis for Data Race warnings.
#
#  It is expected that few or no procedures will access more shared
#  variables than the bound imposed by the factory setting (1000).

#DATA_RACE_MAX_LOCKSETS_PER_MEM_ACCESS = 1000


# Parameter DATA_RACE_BARRIER_PERIOD
#
# Purpose
#  Controls a trade off between analysis performance and Data Race
#  false negatives.
#
# Tags
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  When set to integer N, specifies that the CodeSonar data race
#  analysis will have a concurrency barrier after every N units of
#  work. For data race analysis, each unit of work is represented by
#  a pair (threadA, threadB,): "search for data races between
#  threads threadA and threadB".
#
#  At each concurrency barrier, the analysis determines the
#  remaining time budget. It then uses this information to determine
#  a per-unit-of-work budget for units of work in the next segment
#  (that is, up to the next concurrency barrier).
#
#  See below [#data_race_budget] for further details.
#
# Notes
#  Performance and false negative rates can be negatively affected
#  if the setting is too high, but also if it is too low.
#  - If the setting is too high, unused search budget allocations
#    from earlier units of work will not be released in time to be
#    reallocated to later units of work.
#  - If the setting is too low, parallelism is limited. In
#    particular, the setting should be higher than the number of
#    analysis slaves, and CodeSonar will issue an alert if this is
#    not the case.
#
#  [ANCHOR data_race_budget] The analysis computes a total time
#  budget for data race search by multiplying the number of analyzed
#  procedures by the TIME_LIMIT_DATA_RACE_PATH_SEARCH_PER_PROCEDURE
#  setting. The set of all units of work for the search is divided
#  into segments containing N units of work each, where N is the
#  value of DATA_RACE_BARRIER_PERIOD, with a concurrency barrier at
#  the end of each segment. At each concurrency barrier, the
#  analysis determines the remaining time budget. It then uses this
#  information to determine a per-unit-of-work budget for units of
#  work in the next segment (that is, up to the next concurrency
#  barrier). This per-unit-of-work budget is used along with
#  TIME_LIMIT_DATA_RACE_PATH_SEARCH to limit the time that any unit
#  of work in the next segment can take.
#  - TIME_LIMIT_DATA_RACE_PATH_SEARCH is an upper bound on time
#    spent in any given subunit of work (threadA, threadB,
#    memory_loc).
#  - The computed per-unit-of-work budget is generally lower than
#    the value of TIME_LIMIT_DATA_RACE_PATH_SEARCH, and represents
#    an additional bound that is checked at the end of each subunit
#    of work (threadA, threadB, memory_loc). This means that if the
#    per-unit-of-work budget is exhausted during a particular
#    subunit, the subunit (and unit) will not be terminated until
#    the path exploration finishes (unless the
#    TIME_LIMIT_DATA_RACE_PATH_SEARCH bound is also reached during
#    the same subunit).
#
#  If overall budget consumption has been worse than linear, the
#  analysis may also determine that some units of work in the next
#  segment must be skipped in order to maintain a reasonable overall
#  budget consumption rate.
#
#  The magnitude of each unit of work depends on the settings of
#  parameters DATA_RACE_PATH_FINDING_EFFORT,
#  DATA_RACE_MAX_MEM_ACCESSES,
#  DATA_RACE_MAX_LOCKSETS_PER_MEM_ACCESS, and
#  DATA_RACE_MAX_RELATED_PATHS.
#
#  The number of units of work depends on the settings of parameters
#  DATA_RACE_IGNORE_NAMES and MULTIPLE_THREADS_PER_ENTRY_PROCEDURE.


#DATA_RACE_BARRIER_PERIOD = 100


# Parameter REFINEMENT_BARRIER_PERIOD
#
# Purpose
#  Controls a trade off between analysis performance and false
#  negatives for taint-related warnings.
#
# Type
#  integer
#
# Behavior
#  When set to integer N, specifies that the CodeSonar taint
#  refinement will have a concurrency barrier after every N units of
#  work. For taint refinement, a unit of work comprises the set of
#  warning refinement tasks for a procedure P.
#
#  At each concurrency barrier, the analysis determines the
#  remaining time budget. It then uses this information to determine
#  a per-unit-of-work budget for units of work in the next segment
#  (that is, up to the next concurrency barrier).
#
#  See below [#taint_refine_budget] for further details.
#
# Notes
#  Performance and false negative rates can be negatively affected
#  if the setting is too high, but also if it is too low.
#  - If the setting is too high, unused search budget allocations
#    from earlier units of work will not be released in time to be
#    reallocated to later units of work.
#  - If the setting is too low, parallelism is limited. In
#    particular, the setting should be higher than the number of
#    analysis slaves, and CodeSonar will issue an alert if this is
#    not the case.
#
#  [ANCHOR taint_refine_budget] The analysis computes a total time
#  budget for taint refinement by multiplying the number of analyzed
#  procedures by the TIME_LIMIT_TAINT_REFINE_PER_PROCEDURE setting.
#  The set of all units of work for the search is divided into
#  segments containing N units of work each, where N is the value of
#  REFINEMENT_BARRIER_PERIOD, with a concurrency barrier at the end
#  of each segment. At each concurrency barrier, the analysis
#  determines the remaining time budget. It then uses this
#  information to determine a per-unit-of-work budget for units of
#  work in the next segment (that is, up to the next concurrency
#  barrier). This per-unit-of-work budget is used along with
#  TIME_LIMIT_TAINT_REFINE to limit the time that any unit of work
#  in the next segment can take.
#  - TIME_LIMIT_TAINT_REFINE is an upper bound on time spent in any
#    given unit of work.
#  - The computed per-unit-of-work budget is generally lower than
#    the value of TIME_LIMIT_TAINT_REFINE, and represents an
#    additional bound that is checked less frequently during the
#    unit of work. This means that if the per-unit-of-work budget is
#    exhausted during a unit of work, the unit will not be
#    terminated until one of these checkpoints is reached (unless
#    the TIME_LIMIT_TAINT_REFINE bound is also exceeded).
#
#  If overall budget consumption has been worse than linear, the
#  analysis may also determine that some units of work in the next
#  segment must be skipped in order to maintain a reasonable overall
#  budget consumption rate.


#REFINEMENT_BARRIER_PERIOD = 10000


# Parameter ROLLBACK_SUMMARIES_ON_ABORT
#
# Purpose
#  Specifies whether or not function summaries will be rolled back
#  if TIME_LIMIT_INTRA_EXPLORE expires.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", summaries for a function will be rolled back if
#  TIME_LIMIT_INTRA_EXPLORE expires. If this happens, call sites to
#  the function will be treated like any other undefined function.
#
# Notes
#  Setting this to "No" can cause false positives and false
#  negatives. Setting this to "Yes" can cause (a different set of)
#  false positives and false negatives.
#
#ROLLBACK_SUMMARIES_ON_ABORT = Yes


# Parameter SEARCH_BOUND
#
# Purpose
#  Number of paths under simultaneous consideration when exploring a
#  procedure.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  When the number is larger, more paths are searched, but more time
#  is used.
#
# Notes
#  This preference represents a trade-off between time and
#  thoroughness. If this preference is raised, then
#  TIME_LIMIT_INTRA_EXPLORE should usually also be raised.
#
#SEARCH_BOUND = 100


# Parameter EXPLORE_MORE_LOOP_PATHS
#
# Purpose
#  Specifies whether or not the analysis should consider an extended
#  set of loop execution scenarios.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  { Yes, No }
#
# Behavior
#  - No : The analysis will consider a standard set of loop
#    repetition scenarios for each loop.
#  - Yes : The analysis will consider several additional loop
#    repetition scenarios along with the standard set.
#
# Notes
#  Code may contain one or more defects that only manifest in one of
#  the additional Yes scenarios, so analyzing with
#  EXPLORE_MORE_LOOP_PATHS=Yes can reveal more true positives than
#  analyzing with EXPLORE_MORE_LOOP_PATHS=No.
#
#  Note, however, that path exploration is subject to various limits
#  (including PATH_FINDING_EFFORT and SEARCH_BOUND), so setting this
#  parameter to Yes does not guarantee that all the considered
#  scenarios will ultimately be analyzed.

#EXPLORE_MORE_LOOP_PATHS = No


# Parameter LOOP_COUNTER_DISTRUST
#
# Purpose
#  Specifies how suspicious CodeSonar should be about the value of
#  loop counters in loops whose exact iteration counts are not
#  known.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  { 0, 1, 2, 3, 4, 5 }
#
# Behavior
#  - 0 : Never treat loop counters as adversarial
#  - 1 : Treat as adversarial: loop counters in infinite loops.
#  - 2 : Treat as adversarial: everything from 1, plus loop counters
#    in loops reading input.
#  - 3 : Treat as adversarial: everything from 2, plus loop counters
#    in loops whose iteration counts can, but may not, reach some
#    constant bound.
#  - 4 : Treat as adversarial: everything from 3, plus loop counters
#    in loops whose iteration counts can, but may not, reach some
#    symbolic bound.
#  - 5 : Treat all loop counters as adversarial.
#
# Notes
#  The following overruns can only be detected with sufficient
#  values of this setting.
#
#  Requires LOOP_COUNTER_DISTRUST=1 or higher:
#    void x1(){
#    int i = 0; int A[10];
#    for(;;){ i++; A[i] = 10; }
#    }
#
#  Requires LOOP_COUNTER_DISTRUST=2 or higher:
#    void x2(){
#    int i = 0;
#    int A[10];
#    while(getchar() != 'c'){ i++; A[i] = 10; }
#    }
#
#  Requires LOOP_COUNTER_DISTRUST=3 or higher:
#    void x3(){
#    int i = 0;
#    int A[10];
#    for(i = 0; i < 20; i++ ){ if( inscrutible_condition() ) break; A[i] = 10; }
#    }
#
#  Requires LOOP_COUNTER_DISTRUST=4 or higher:
#    void x4(){
#    int i = 0; int A[10]; int j = inscrutible_number();
#    for(i = 0; i < j; i++ ){ if( inscrutible_condition() ) break; A[i] = 10; }
#    }
#
#  Requires LOOP_COUNTER_DISTRUST=5:
#    void x5(){
#    int i = 0; int A[10];
#    for(i = 0; inscrutible_condition(); i++ ){ A[i] = 10; }
#    }

#LOOP_COUNTER_DISTRUST = 2


# Parameter PATH_FINDING_EFFORT
#
# Purpose
#  Once a set of paths believed to contain at least one
#  vulnerability is obtained, this many paths from the set will be
#  searched before moving on.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  A negative setting indicates that there is no limit. Too low a
#  (positive) setting can cause false negatives, but might save some
#  time in pathological cases.
#
# Notes
#  If this preference is raised, then TIME_LIMIT_RESOLVE should
#  usually also be raised.
#
#PATH_FINDING_EFFORT = 500


# Parameter PATH_SHORTENING_EFFORT
#
# Purpose
#  Once a set of paths believed to contain at least one
#  vulnerability is obtained, and we have found a particular
#  dangerous path within the set, this many total paths will be
#  searched in an effort to find additional similar warnings within
#  the set, or shorter versions of the same warning. Similar, in
#  this context, is defined as a warning that violates the same
#  (interprocedural) contract.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  A negative setting indicates that there is no limit. Too low a
#  (positive) setting can cause false negatives, but might save some
#  time. Setting this to 0 will prevent some warnings with similar
#  causes to other warnings from being flagged.
#
# Notes
#  If this preference is raised, then TIME_LIMIT_RESOLVE should
#  usually also be raised.
#
#PATH_SHORTENING_EFFORT = 30


# Parameter REPORT_SIMILAR_WARNINGS
#
# Purpose
#  Specifies whether or not the analysis should report all members
#  of each warning group
#  [doc/html/Elements/PROPERTIES_Warning.html#group_def] detected
#  (as opposed to a single representative instance
#  [doc/html/Elements/PROPERTIES_Warning.html#representative_def]
#  per group).
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : the analysis will report every warning instance
#    [doc/html/Elements/PROPERTIES_Warning.html#instance_def]
#    detected.
#  - No : the analysis will report one warning instance
#    [doc/html/Elements/PROPERTIES_Warning.html#instance_def] per
#    warning group detected.
#
#REPORT_SIMILAR_WARNINGS = Yes


# Parameter MAX_SIMILAR_PATHS
#
# Purpose
#  Bounds the number of similar warnings that CodeSonar will report.
#  Only successfully refined warnings count against this limit.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Notes
#  "Similar paths" are paths with the same start and end points. For
#  example, suppose you had the following code.
#    int *p = 0;
#    if( x )
#    x = 1;
#    else
#    x = 2;
#    *p = 42;
#
#  To see Null Pointer Dereference paths through both branches of
#  the conditional statement, set MAX_SIMILAR_PATHS to 2 (or
#  higher).
#
#  Most users will never need a setting higher than 1
#
#  This parameter does not significantly affect performance.
#
#MAX_SIMILAR_PATHS = 1


# Parameter MAX_ATTEMPTED_SIMILAR_PATHS
#
# Purpose
#  Bounds the number of potentially similar warnings that CodeSonar
#  will attempt to refine. Both successfully refined warnings and
#  dismissed warnings count against this limit.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Notes
#  MAX_SIMILAR_PATHS is similar to this except that it bounds the
#  number of reported warnings. MAX_ATTEMPTED_SIMILAR_PATHS should
#  always be at least as large as MAX_SIMILAR_PATHS.
#
#MAX_ATTEMPTED_SIMILAR_PATHS = 4


# Parameter MAX_CHECKED_INPUTS_PER_PROCEDURE
#
# Purpose
#  Specifies how many inputs to a procedure can be checked at call
#  sites.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  A negative value indicates no limit. Lower (positive) values will
#  conserve disk space and time, but can cause false negatives.
#
# Notes
#  This bound may be useful for projects containing millions of
#  lines of code.
#
#  Checks for code nearer to the beginning of procedures receive
#  preferential treatment.
#
#  Both implicit and explicit inputs are counted. For example, both
#  the pointer passed to strlen() and the value pointed to by that
#  pointer are counted as inputs to strlen(). Global variables
#  transitively used by a procedure also qualify.
#
#  For the taint analysis, the number of checked inputs is bounded
#  instead by TAINT_MAX_CHECKED_INPUTS_PER_PROCEDURE.

#MAX_CHECKED_INPUTS_PER_PROCEDURE = 100


# Parameter MAX_CHECKS_PER_INPUT
#
# Purpose
#  Controls the maximum number of interprocedural checks that will
#  be stored per input per procedure. When analyzing call sites to
#  procedures, the tool examines whether these checks are satisfied
#  in order to flag interprocedural vulnerabilities.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  A larger number means that more checks will be stored, with a
#  corresponding increase in disk and time usage. A smaller number
#  will save on space and time, at the cost of potentially
#  overlooking some positive results.
#
# Notes
#  In some (rare) cases, a larger bound will enable more
#  simplification to occur, improving performance and reducing false
#  negatives.
#
#MAX_CHECKS_PER_INPUT = 10


# Parameter MAX_GLOBAL_CHECK_AGE
#
# Purpose
#  Specifies how many levels up the call graph interprocedural
#  checks on global variables can be propagated.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  A negative value indicates no limit (this is usually best for
#  small to medium sized projects).
#
#  Larger values will cause CodeSonar to perform a more thorough
#  check at the expense of system resources.
#
# Notes
#  Most interprocedural warnings tend to be caused by bad parameter
#  values, not bad values in global variables. Many users will find
#  that setting this to 0 will have little or no effect on their
#  results and a appreciable effect on analysis performance. A value
#  of 2 is recommended for users who want to check for bad values in
#  global variables crossing procedure boundaries.
#

#MAX_GLOBAL_CHECK_AGE = 0


# Parameter MAX_CHECKED_FUNCTION_POINTER_RESOLVENTS
#
# Purpose
#  Specifies an upper bound on the number of targets that a function
#  pointer or virtual call site may resolve to in order for
#  interprocedural checking to be performed through that call.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  - N (for N>-1) : If a function pointer or virtual call site
#    resolves to more than N targets, interprocedural checking will
#    not be performed for paths starting before the call and ending
#    (transitively) inside the call.
#  - -1 : No such limit is imposed.
#
# Notes
#  Some targets of function pointer calls might only be viable in
#  some calling contexts or under some circumstances that CodeSonar
#  is unaware of. A low value (such as 1) can reduce false positives
#  due to overapproximations while increasing false negatives. A
#  setting of 1 can be particularly attractive because it is
#  unlikely to be an overapproximation. Small settings can increase
#  performance.
#
#MAX_CHECKED_FUNCTION_POINTER_RESOLVENTS = 8


# Parameter MAX_CHECK_COMPLEXITY
#
# Purpose
#  Specifies the maximum complexity of an expression in an
#  interprocedural check.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  Checks on expressions whose complexity exceeds this limit are
#  discarded.
#
# Notes
#  Expressions with more pointer dereferences and field/array
#  accesses have a higher complexity.
#
#MAX_CHECK_COMPLEXITY = 10


# Parameter MAX_EXPRESSION_COMPLEXITY
#
# Purpose
#  A threshold for expression complexity.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  Information about expressions whose complexity exceeds this limit
#  is discarded.
#
# Notes
#  Expressions with more pointer dereferences and field/array
#  accesses have a higher complexity.
#
#  For the taint analysis, expression complexity is bounded instead
#  by TAINT_MAX_EXPRESSION_COMPLEXITY.
#
#MAX_EXPRESSION_COMPLEXITY = 24


# Parameter MAX_SUMMARIES_PER_PROCEDURE
#
# Purpose
#  Controls how many summaries per procedure will be stored in
#  memory.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  Increasing the value for this preference may allow more precise
#  analysis, at the cost of longer analysis time and higher memory
#  usage.
#
# Notes
#  Complex procedures with a large number of possible effects may
#  have a correspondingly large number of summaries. If this number
#  exceeds the per-procedure maximum, CodeSonar will generate a
#  smaller number of summaries designed to preserve as much
#  information as possible from the original set. When the full set
#  of original summaries is desired, change the value of this
#  preference accordingly.
#
#MAX_SUMMARIES_PER_PROCEDURE = 5


# Parameter MAX_MODIFIED_VALUES
#
# Purpose
#  Specifies a per-procedure bound on the number of modified values
#  (outputs) that CodeSonar will keep track of in procedure
#  summaries.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  If a procedure modifies more values than this maximum, CodeSonar
#  will select values to discard from the summaries for the
#  procedure to bring the total number of values tracked down to the
#  maximum. Increasing the value for this preference may allow more
#  precise analysis, at the cost of longer analysis time and higher
#  memory usage.
#
# Notes
#  The values modified by a procedure may include its return value,
#  parameters and values from its calling environment, and values
#  derived from these.
#
#  For the taint analysis, the number of modified values is bounded
#  instead by TAINT_MAX_MODIFIED_VALUES.
#
#MAX_MODIFIED_VALUES = 100


# Parameter DP_REFINEMENT_EXACT
#
# Purpose
#  Specifies whether or not the analysis will apply "exact" decision
#  procedure refinement to warning paths. Decision procedure
#  refinement aims to filter out some warnings that cannot occur in
#  practice.
#
# Behavior
#  If set to Yes, the analysis will perform exact refinement: this
#  means that the analysis runs the decision procedure on each
#  warning path, handling procedures and loops by splitting the path
#  into separate segments and checking them independently.
#  - The CodeSonar analysis will perform exact refinement on the
#    core path [doc/html/Elements/PROPERTIES_Warning.html#core_path]
#    for each warning. Warnings determined to be unfeasible are
#    handled as specified by the setting of
#    DP_REFINEMENT_EXACT_DISMISS. Warnings for which the decision
#    procedure times out are handled as specified by the setting of
#    DP_REFINEMENT_EXACT_DISMISS_TIMEOUT.
#  - On-demand extended path checking
#    [doc/html/GUI/GUI_Path_Checking.html] will also use exact
#    refinement.
#
#  If set to No, the analysis will not perform exact refinement.
#
#  Taint+dp warnings [#taint_dp] are always excluded from exact
#  refinement.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Notes
#  The effects of exact refinement differ from those of approximate
#  refinement.
#  - Exact refinement is less likely to produce false negatives than
#    approximate refinement.
#  - If timeouts are disabled (via DP_REFINEMENT_EXACT_TIMEOUT=0 and
#    DP_REFINEMENT_APPROXIMATE_TIMEOUT=0 ), exact refinement is more
#    likely to produce false positives than approximate refinement.
#    If they are not disabled, there is no predictable relationship
#    between false positive rates for the two.
#  - Approximate refinement typically entails larger decision
#    problems, and with more free variables, than exact refinement.
#    The approximate refinement problems can therefore be
#    significantly more expensive to solve than the exact ones.
#
#  If exact refinement and approximate refinement are both ENABLED,
#  the two refinement phases are carried out in sequence. It can be
#  beneficial to enable both kinds of refinement because the sets of
#  warnings that each can dismiss are incomparable.
#
#  If exact refinement and approximate refinement are both DISABLED,
#  the analysis will take less time and have reduced risk of
#  dismissing true positives, but will generally produce more false
#  positives.
#
#  Taint+dp warnings [#taint_dp] are not included in exact or
#  approximate refinement, but instead have their own refinement
#  stage.
#
#  See DP_REFINEMENT_APPROXIMATE for more information about
#  approximate refinement.
#
#  Parameters DP_REFINEMENT_EXACT_TIMEOUT,
#  DP_REFINEMENT_EXACT_DISMISS, and
#  DP_REFINEMENT_EXACT_DISMISS_TIMEOUT control various aspects of
#  exact refinement.

#DP_REFINEMENT_EXACT = No


# Parameter DP_REFINEMENT_EXACT_TIMEOUT
#
# Purpose
#  Specifies the timeout for the decision procedure when performing
#  exact refinement.
#
# Behavior
#  - 0 : There is no timeout for exact refinement.
#  - N (for N>0) : The decision procedure will spend N seconds on
#    each path (or path segment, if the path has multiple segments)
#    before giving up.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  non-negative integer
#
# Notes
#  If this timeout is exceeded when checking a particular warning,
#  the warning is handled as specified by
#  DP_REFINEMENT_EXACT_DISMISS_TIMEOUT.
#
#  To enable exact refinement, set DP_REFINEMENT_EXACT=Yes. Note
#  that taint+dp warnings [#taint_dp] are always excluded from exact
#  refinement.

#DP_REFINEMENT_EXACT_TIMEOUT = 2


# Parameter DP_REFINEMENT_EXACT_DISMISS
#
# Purpose
#  Specifies whether or not warnings will be dismissed outright if
#  exact refinement determines that they cannot occur.
#
# Behavior
#  - Yes : warnings will be dismissed outright if exact refinement
#    determines that they cannot occur.
#  - No : warnings will not be dismissed in this situation, but they
#    will incur a small rank
#    [doc/html/Elements/PROPERTIES_Warning.html#rank] penalty.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Notes
#  To enable exact refinement, set DP_REFINEMENT_EXACT=Yes. Note
#  that taint+dp warnings [#taint_dp] are always excluded from exact
#  refinement.

#DP_REFINEMENT_EXACT_DISMISS = Yes


# Parameter DP_REFINEMENT_EXACT_DISMISS_TIMEOUT
#
# Purpose
#  Specifies whether or not warnings will be dismissed if the
#  decision procedure times out during exact refinement.
#
# Behavior
#  - Yes : warnings will be dismissed outright if the decision
#    procedure times out during exact refinement.
#  - No : warnings will not be dismissed in this situation, but they
#    will incur a small rank
#    [doc/html/Elements/PROPERTIES_Warning.html#rank] penalty.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Notes
#  Setting this to Yes can cause true positive warnings to be
#  dismissed.
#
#  To enable exact refinement, set DP_REFINEMENT_EXACT=Yes. Note
#  that taint+dp warnings [#taint_dp] are always excluded from exact
#  refinement.
#
#  The timeout for exact refinement is controlled by
#  DP_REFINEMENT_EXACT_TIMEOUT.

#DP_REFINEMENT_EXACT_DISMISS_TIMEOUT = No


# Parameter DP_REFINEMENT_APPROXIMATE
#
# Purpose
#  Specifies whether or not the analysis will apply "approximate"
#  decision procedure refinement to warning paths. Decision
#  procedure refinement aims to filter out some warnings that cannot
#  occur in practice.
#
# Behavior
#  If set to Yes, the analysis will perform approximate refinement:
#  this means that the analysis runs the decision procedure on each
#  warning path, handling procedures and loops by converting their
#  summaries into SMT formulas.
#  - The CodeSonar analysis will perform approximate refinement on
#    the core path
#    [doc/html/Elements/PROPERTIES_Warning.html#core_path] for each
#    warning.
#  - On-demand extended path checking
#    [doc/html/GUI/GUI_Path_Checking.html] will also use approximate
#    refinement.
#
#  Taint+dp warnings [#taint_dp] are always excluded from
#  approximate refinement.
#
#  If set to No, the analysis will not perform approximate
#  refinement.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Notes
#  It is possible for approximate refinement to incorrectly conclude
#  that a warning cannot occur, but this does not happen often in
#  practice.
#
#  For approximate refinement:
#  - DP_REFINEMENT_APPROXIMATE_DISMISS specifies handling for
#    warnings determined to be unfeasible,
#  - DP_REFINEMENT_APPROXIMATE_TIMEOUT specifies refinement timeout,
#  - DP_REFINEMENT_APPROXIMATE_DISMISS_TIMEOUT specifies handling
#    when the decision procedure times out for a particular warning.
#
#  See DP_REFINEMENT_EXACT for information about the differences
#  between exact and approximate refinement. Taint+dp warnings
#  [#taint_dp] are not included in exact or approximate refinement,
#  but instead have their own refinement stage.
#
#  It can be beneficial to enable both forms of refinement, because
#  the sets of warnings that each can dismiss are incomparable. In
#  this case, the two refinement phases are carried out in sequence.

#DP_REFINEMENT_APPROXIMATE = Yes


# Parameter DP_REFINEMENT_APPROXIMATE_TIMEOUT
#
# Purpose
#  Specifies the timeout for the decision procedure when performing
#  approximate refinement on warnings.
#
# Behavior
#  - 0 : There is no timeout for approximate refinement.
#  - N (for N>0) : The decision procedure will spend N seconds on
#    each path before giving up.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
# Type
#  non-negative integer
#
# Notes
#  If this timeout is exceeded when checking a particular warning,
#  the warning is handled as specified by
#  DP_REFINEMENT_APPROXIMATE_DISMISS_TIMEOUT.
#
#  To enable approximate refinement, set
#  DP_REFINEMENT_APPROXIMATE=Yes. Note that taint+dp warnings
#  [#taint_dp] are always excluded from approximate refinement.


#DP_REFINEMENT_APPROXIMATE_TIMEOUT = 2


# Parameter DP_REFINEMENT_APPROXIMATE_DISMISS
#
# Purpose
#  Specifies whether or not warnings will be dismissed outright if
#  approximate refinement determines that they cannot occur.
#
# Behavior
#  - Yes : warnings will be dismissed outright if approximate
#    refinement determines that they cannot occur.
#  - No : warnings will not be dismissed in this situation, but they
#    will incur a significant rank penalty.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Notes
#  To enable approximate refinement, set
#  DP_REFINEMENT_APPROXIMATE=Yes. Note that taint+dp warnings
#  [#taint_dp] are always excluded from approximate refinement.

#DP_REFINEMENT_APPROXIMATE_DISMISS = Yes


# Parameter DP_REFINEMENT_APPROXIMATE_DISMISS_TIMEOUT
#
# Purpose
#  Specifies whether or not warnings will be dismissed if the
#  decision procedure times out during approximate refinement.
#
# Behavior
#  - Yes : warnings will be dismissed outright if the decision
#    procedure times out during approximate refinement.
#  - No : warnings will not be dismissed in this situation, but they
#    will incur a significant rank penalty.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Notes
#  Setting this to Yes can cause true positive warnings to be
#  dismissed. Note that taint+dp warnings [#taint_dp] are always
#  excluded from approximate refinement.
#
#  - To enable approximate refinement, set
#    DP_REFINEMENT_APPROXIMATE=Yes.
#  - The timeout for approximate refinement is controlled by
#    DP_REFINEMENT_APPROXIMATE_TIMEOUT.

#DP_REFINEMENT_APPROXIMATE_DISMISS_TIMEOUT = No


# Parameter TAINT_PLUS_DP_REFINEMENT
#
# Purpose
#  Specifies whether or not the analysis will apply decision
#  procedure refinement for "taint+dp" [#taint_dp] warnings.
#
# Behavior
#  If set to Yes, the analysis will perform refinement: this means
#  that the analysis runs the decision procedure on each warning
#  path.
#  - The CodeSonar analysis will perform exact refinement on the
#    core path [doc/html/Elements/PROPERTIES_Warning.html#core_path]
#    for each warning. Warnings determined to be unfeasible are
#    handled as specified by the setting of
#    TAINT_PLUS_DP_REFINEMENT_DISMISS. Warnings for which the
#    decision procedure times out are handled as specified by the
#    setting of TAINT_PLUS_DP_REFINEMENT_DISMISS_TIMEOUT.
#  - On-demand extended path checking
#    [doc/html/GUI/GUI_Path_Checking.html] will also use refinement.
#
#  If set to No, the analysis will not perform refinement. For these
#  warning classes, there will be many false positives, since
#  decision procedure refinement is the primary mechanism by which
#  code is judged safe.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Notes
#  Parameters TAINT_PLUS_DP_REFINEMENT_TIMEOUT,
#  TAINT_PLUS_DP_REFINEMENT_DISMISS, and
#  TAINT_PLUS_DP_REFINEMENT_DISMISS_TIMEOUT control various aspects
#  of refinement.

#TAINT_PLUS_DP_REFINEMENT = Yes


# Parameter TAINT_PLUS_DP_REFINEMENT_TIMEOUT
#
# Purpose
#  Specifies the timeout for the decision procedure when performing
#  refinement for "taint+dp" [#taint_dp] warnings.
#
# Behavior
#  - 0 : There is no timeout for refinement.
#  - N (for N>0) : The decision procedure will spend N seconds on
#    each path before giving up.
#
# Tags
#  - TIME_LIMIT: Analysis Time Limits
#
#  - WC_LANG.MEM.TBA: Used by Tainted Buffer Access
#  - WC_ALLOC.SIZE.ADDOFLOW: Used by Addition Overflow of Allocation
#    Size
#  - WC_MISC.MEM.SIZE.ADDOFLOW: Used by Addition Overflow of Size
#  - WC_ALLOC.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Allocation Size
#  - WC_MISC.MEM.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Size
#  - WC_ALLOC.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Allocation Size
#  - WC_MISC.MEM.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Size
#  - WC_ALLOC.SIZE.TRUNC: Used by Truncation of Allocation Size
#  - WC_MISC.MEM.SIZE.TRUNC: Used by Truncation of Size
#
# Type
#  non-negative integer
#
# Notes
#  [ANCHOR taint_dp] "Taint+dp" warnings are those of the following
#  classes.
#
#  - Tainted Buffer Access
#  - Addition Overflow of Allocation Size
#  - Addition Overflow of Size
#  - Multiplication Overflow of Allocation Size
#  - Multiplication Overflow of Size
#  - Subtraction Underflow of Allocation Size
#  - Subtraction Underflow of Size
#  - Truncation of Allocation Size
#  - Truncation of Size.
#
#  Taint+dp warnings are not included in exact or approximate
#  refinement (as governed by DP_REFINEMENT_EXACT,
#  DP_REFINEMENT_EXACT, and related parameters). Instead, they
#  undergo a dedicated refinement phase in which the analysis runs
#  the decision procedure on each warning path, handling procedures
#  and loops by converting their summaries into SMT formulas.
#
#  The taint+dp refinement phase cannot be disabled. Its timeouts
#  and handling are specified by the following parameters.
#  - TAINT_PLUS_DP_REFINEMENT_DISMISS specifies handling for
#    warnings determined to be unfeasible,
#  - TAINT_PLUS_DP_REFINEMENT_TIMEOUT specifies refinement timeout,
#  - TAINT_PLUS_DP_REFINEMENT_DISMISS_TIMEOUT specifies handling
#    when the decision procedure times out for a particular warning.

#TAINT_PLUS_DP_REFINEMENT_TIMEOUT = 4


# Parameter TAINT_PLUS_DP_REFINEMENT_DISMISS
#
# Purpose
#  Specifies whether or not "taint+dp" [#taint_dp] warnings will be
#  dismissed outright if refinement determines that they cannot
#  occur.
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : warnings will be dismissed outright if decision procedure
#    refinement determines that they cannot occur.
#  - No : warnings will not be dismissed in this situation, but they
#    will incur a significant rank penalty.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
#  - WC_LANG.MEM.TBA: Used by Tainted Buffer Access
#  - WC_ALLOC.SIZE.ADDOFLOW: Used by Addition Overflow of Allocation
#    Size
#  - WC_MISC.MEM.SIZE.ADDOFLOW: Used by Addition Overflow of Size
#  - WC_ALLOC.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Allocation Size
#  - WC_MISC.MEM.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Size
#  - WC_ALLOC.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Allocation Size
#  - WC_MISC.MEM.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Size
#  - WC_ALLOC.SIZE.TRUNC: Used by Truncation of Allocation Size
#  - WC_MISC.MEM.SIZE.TRUNC: Used by Truncation of Size
#
# Notes
#  Handling for unfeasible non-taint+dp warnings is controlled by
#  parameters DP_REFINEMENT_APPROXIMATE_DISMISS (approximate
#  refinement) and DP_REFINEMENT_EXACT_DISMISS (exact refinement)


#TAINT_PLUS_DP_REFINEMENT_DISMISS = Yes


# Parameter TAINT_PLUS_DP_REFINEMENT_DISMISS_TIMEOUT
#
# Purpose
#  Specifies whether or not "taint+dp" [#taint_dp] warnings will be
#  dismissed if the decision procedure times out during refinement
#  of a taint/decision procedure warning.
#
# Behavior
#  - Yes : warnings will be dismissed outright if the decision
#    procedure times out during refinement.
#  - No : warnings will not be dismissed in this situation, but they
#    will incur a significant rank penalty.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
#  - WC_LANG.MEM.TBA: Used by Tainted Buffer Access
#  - WC_ALLOC.SIZE.ADDOFLOW: Used by Addition Overflow of Allocation
#    Size
#  - WC_MISC.MEM.SIZE.ADDOFLOW: Used by Addition Overflow of Size
#  - WC_ALLOC.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Allocation Size
#  - WC_MISC.MEM.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Size
#  - WC_ALLOC.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Allocation Size
#  - WC_MISC.MEM.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Size
#  - WC_ALLOC.SIZE.TRUNC: Used by Truncation of Allocation Size
#  - WC_MISC.MEM.SIZE.TRUNC: Used by Truncation of Size
#
# Type
#  { Yes, No }
#
# Notes
#  Setting this to No can cause more false positive warnings to be
#  reported.
#
#  The timeout for refining taint+dp warnings is controlled by
#  TAINT_PLUS_DP_REFINEMENT_TIMEOUT.
#
#  Handling for non-taint+dp warnings for which the decision
#  procedure times out is controlled by parameters
#  DP_REFINEMENT_APPROXIMATE_DISMISS_TIMEOUT (approximate
#  refinement) and DP_REFINEMENT_EXACT_DISMISS_TIMEOUT (exact
#  refinement)

#TAINT_PLUS_DP_REFINEMENT_DISMISS_TIMEOUT = Yes


# Parameter RETURN_CHECKER_SAMPLE_SIZE
#
# Purpose
#  At least this many heeded calls to a given function must be seen
#  before the sample is considered large enough to warn the user
#  about an Ignored Return Value for that function.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.FUNCS.IRV: Used by Ignored Return Value
#
# Type
#  integer
#
# Behavior
#  A smaller value will cause more warnings based on statistical
#  decisions. Negative values are prohibited.

#RETURN_CHECKER_SAMPLE_SIZE = 20


# Parameter RETURN_CHECKER_RATIO
#
# Purpose
#  Sets a threshold T. If the number of ignored call sites to a
#  given function is at least T times the number of heeded call
#  sites, no Ignored Return Value warnings will be produced.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.FUNCS.IRV: Used by Ignored Return Value
#
# Type
#  Real number between 0 and 1 (inclusive)
#
# Behavior
#  Making this number larger will cause more warnings. A value of 0
#  will effectively disable statistical warnings.

#RETURN_CHECKER_RATIO = 0.04


# Parameter RETURN_CHECKER_CHECKED_FUNCS
#
# Purpose
#  Used by Ignored Return Value to specify exceptions to the
#  statistical analysis: functions whose return values will always
#  trigger a warning if ignored.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_LANG.FUNCS.IRV: Used by Ignored Return Value
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  If the name of a called function matches a
#  RETURN_CHECKER_CHECKED_FUNCS regular expression and the return
#  value from that function call is ignored, an Ignored Return Value
#  warning will always be issued (regardless of the settings of
#  RETURN_CHECKER_SAMPLE_SIZE and RETURN_CHECKER_RATIO).
#
#  If the Ignored Return Value warning class is disabled, such as
#  with a WARNING_FILTER rule, this parameter has no effect.
#
# Notes
#  This parameter replaces the csonar_return_check() function
#  previously available in the Extension API
#  [doc/html/Extensions/Extensions.html].
#

#RETURN_CHECKER_CHECKED_FUNCS += ^access$
#RETURN_CHECKER_CHECKED_FUNCS += ^bind$
#RETURN_CHECKER_CHECKED_FUNCS += ^chdir$
#RETURN_CHECKER_CHECKED_FUNCS += ^chmod$
#RETURN_CHECKER_CHECKED_FUNCS += ^chown$
#RETURN_CHECKER_CHECKED_FUNCS += ^chroot$
#RETURN_CHECKER_CHECKED_FUNCS += ^connect$
#RETURN_CHECKER_CHECKED_FUNCS += ^dup2$
#RETURN_CHECKER_CHECKED_FUNCS += ^fchdir$
#RETURN_CHECKER_CHECKED_FUNCS += ^fchmod$
#RETURN_CHECKER_CHECKED_FUNCS += ^fchown$
#RETURN_CHECKER_CHECKED_FUNCS += ^feof$
#RETURN_CHECKER_CHECKED_FUNCS += ^ferror$
#RETURN_CHECKER_CHECKED_FUNCS += ^fgetc$
#RETURN_CHECKER_CHECKED_FUNCS += ^fputc$
#RETURN_CHECKER_CHECKED_FUNCS += ^fread$
#RETURN_CHECKER_CHECKED_FUNCS += ^fseek$
#RETURN_CHECKER_CHECKED_FUNCS += ^fsetpos$
#RETURN_CHECKER_CHECKED_FUNCS += ^fstat$
#RETURN_CHECKER_CHECKED_FUNCS += ^fstatfs$
#RETURN_CHECKER_CHECKED_FUNCS += ^fsync$
#RETURN_CHECKER_CHECKED_FUNCS += ^ftell$
#RETURN_CHECKER_CHECKED_FUNCS += ^ftime$
#RETURN_CHECKER_CHECKED_FUNCS += ^ftruncate$
#RETURN_CHECKER_CHECKED_FUNCS += ^ftrylockfile$
#RETURN_CHECKER_CHECKED_FUNCS += ^fwrite$
#RETURN_CHECKER_CHECKED_FUNCS += ^getc$
#RETURN_CHECKER_CHECKED_FUNCS += ^getchar$
#RETURN_CHECKER_CHECKED_FUNCS += ^getcwd$
#RETURN_CHECKER_CHECKED_FUNCS += ^lseek$
#RETURN_CHECKER_CHECKED_FUNCS += ^lstat$
#RETURN_CHECKER_CHECKED_FUNCS += ^mkdir$
#RETURN_CHECKER_CHECKED_FUNCS += ^mknod$
#RETURN_CHECKER_CHECKED_FUNCS += ^pread$
#RETURN_CHECKER_CHECKED_FUNCS += ^pselect$
#RETURN_CHECKER_CHECKED_FUNCS += ^pwrite$
#RETURN_CHECKER_CHECKED_FUNCS += ^read$
#RETURN_CHECKER_CHECKED_FUNCS += ^readlink$
#RETURN_CHECKER_CHECKED_FUNCS += ^readv$
#RETURN_CHECKER_CHECKED_FUNCS += ^recv$
#RETURN_CHECKER_CHECKED_FUNCS += ^recvfrom$
#RETURN_CHECKER_CHECKED_FUNCS += ^rename$
#RETURN_CHECKER_CHECKED_FUNCS += ^select$
#RETURN_CHECKER_CHECKED_FUNCS += ^send$
#RETURN_CHECKER_CHECKED_FUNCS += ^sendmsg$
#RETURN_CHECKER_CHECKED_FUNCS += ^sendto$
#RETURN_CHECKER_CHECKED_FUNCS += ^sete[gu]id$
#RETURN_CHECKER_CHECKED_FUNCS += ^setfs[gu]id$
#RETURN_CHECKER_CHECKED_FUNCS += ^setre[gu]id$
#RETURN_CHECKER_CHECKED_FUNCS += ^set[gu]id$
#RETURN_CHECKER_CHECKED_FUNCS += ^truncate$
#RETURN_CHECKER_CHECKED_FUNCS += ^write$
#RETURN_CHECKER_CHECKED_FUNCS += ^writev$
#RETURN_CHECKER_CHECKED_FUNCS += ^CAccessToken::Impersonate$
#RETURN_CHECKER_CHECKED_FUNCS += ^CAccessToken::ImpersonateLoggedOnUser$
#RETURN_CHECKER_CHECKED_FUNCS += ^CoImpersonateClient$
#RETURN_CHECKER_CHECKED_FUNCS += ^CreateEvent[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^CreateFile[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^CreateMutex[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^CreateProcess[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^CreateThread$
#RETURN_CHECKER_CHECKED_FUNCS += ^DdeImpersonateClient$
#RETURN_CHECKER_CHECKED_FUNCS += ^DuplicateHandle$
#RETURN_CHECKER_CHECKED_FUNCS += ^FindFirstFile[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^FindNextFile[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetCurrentProcess$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetCurrentProcessId$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetCurrentThread$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetCurrentThreadId$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetExitCodeProcess$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetFileInformationByHandle$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetFileSize$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetFileSizeEx$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetFileTime$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetFileType$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetLastError$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetProcessHeap$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetProcessId$
#RETURN_CHECKER_CHECKED_FUNCS += ^GetThreadId$
#RETURN_CHECKER_CHECKED_FUNCS += ^GlobalAlloc$
#RETURN_CHECKER_CHECKED_FUNCS += ^GlobalFlags$
#RETURN_CHECKER_CHECKED_FUNCS += ^GlobalHandle$
#RETURN_CHECKER_CHECKED_FUNCS += ^GlobalLock$
#RETURN_CHECKER_CHECKED_FUNCS += ^GlobalReAlloc$
#RETURN_CHECKER_CHECKED_FUNCS += ^GlobalSize$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapAlloc$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapCompact$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapCreate$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapLock$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapQueryInformation$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapReAlloc$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapSetInformation$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapSize$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapValidate$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapWalk$
#RETURN_CHECKER_CHECKED_FUNCS += ^ImpersonateDdeClientWindow$
#RETURN_CHECKER_CHECKED_FUNCS += ^ImpersonateLoggedOnUser$
#RETURN_CHECKER_CHECKED_FUNCS += ^ImpersonateNamedPipeClient$
#RETURN_CHECKER_CHECKED_FUNCS += ^ImpersonateSecurityContext$
#RETURN_CHECKER_CHECKED_FUNCS += ^ImpersonateSelf$
#RETURN_CHECKER_CHECKED_FUNCS += ^LocalAlloc$
#RETURN_CHECKER_CHECKED_FUNCS += ^LocalFlags$
#RETURN_CHECKER_CHECKED_FUNCS += ^LocalHandle$
#RETURN_CHECKER_CHECKED_FUNCS += ^LocalLock$
#RETURN_CHECKER_CHECKED_FUNCS += ^LocalReAlloc$
#RETURN_CHECKER_CHECKED_FUNCS += ^LocalSize$
#RETURN_CHECKER_CHECKED_FUNCS += ^OpenFile$
#RETURN_CHECKER_CHECKED_FUNCS += ^OpenProcess$
#RETURN_CHECKER_CHECKED_FUNCS += ^OpenThread$
#RETURN_CHECKER_CHECKED_FUNCS += ^QuerySecurityContextToken$
#RETURN_CHECKER_CHECKED_FUNCS += ^ReadFile$
#RETURN_CHECKER_CHECKED_FUNCS += ^RegOpenKeyEx[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^RegQueryValueEx[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^RpcImpersonateClient$
#RETURN_CHECKER_CHECKED_FUNCS += ^SetEndOfFile$
#RETURN_CHECKER_CHECKED_FUNCS += ^SetEntriesInAcl[AW]?$
#RETURN_CHECKER_CHECKED_FUNCS += ^SetFilePointer$
#RETURN_CHECKER_CHECKED_FUNCS += ^SetFilePointerEx$
#RETURN_CHECKER_CHECKED_FUNCS += ^SetThreadToken$
#RETURN_CHECKER_CHECKED_FUNCS += ^WaitForSingleObject$
#RETURN_CHECKER_CHECKED_FUNCS += ^WriteFile$
#RETURN_CHECKER_CHECKED_FUNCS += ^GlobalUnlock$
#RETURN_CHECKER_CHECKED_FUNCS += ^HeapUnlock$
#RETURN_CHECKER_CHECKED_FUNCS += ^LocalUnlock$
#RETURN_CHECKER_CHECKED_FUNCS += ^ReleaseMutex$
#RETURN_CHECKER_CHECKED_FUNCS += ^ResetEvent$
#RETURN_CHECKER_CHECKED_FUNCS += ^SetEvent$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?_cscanf$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?_[fs]tscanf$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?_tscanf$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?f[tw]?scanf$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?sw?scanf$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?v?[fs]scanf$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?vftscanf$
#RETURN_CHECKER_CHECKED_FUNCS += ^(__isoc99_)?[vw]?scanf$


# Parameter RETURN_CHECKER_IGNORED_FUNCS
#
# Purpose
#  Used by Ignored Return Value to specify exceptions to the
#  statistical analysis: functions whose return values can be
#  ignored without triggering a warning.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_LANG.FUNCS.IRV: Used by Ignored Return Value
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  If the name of a called function matches a
#  RETURN_CHECKER_IGNORED_FUNCS regular expression and the return
#  value from that function call is ignored, an Ignored Return Value
#  warning will not be issued (regardless of the settings of
#  RETURN_CHECKER_SAMPLE_SIZE and RETURN_CHECKER_RATIO).
#
#  If the Ignored Return Value warning class is disabled, such as
#  with a WARNING_FILTER rule, this parameter has no effect.
#
# Notes
#  This parameter replaces the csonar_ignore_return() function
#  previously available in the Extension API
#  [doc/html/Extensions/Extensions.html].
#

#RETURN_CHECKER_IGNORED_FUNCS += ^strchr$
#RETURN_CHECKER_IGNORED_FUNCS += ^strlen$
#RETURN_CHECKER_IGNORED_FUNCS += ^std::basic_ostream::operator<<()$
#RETURN_CHECKER_IGNORED_FUNCS += ^std::basic_string::_M_data$
#RETURN_CHECKER_IGNORED_FUNCS += ^std::basic_streambuf::eback()$
#RETURN_CHECKER_IGNORED_FUNCS += ^std::_Tree_val::_Right$
#RETURN_CHECKER_IGNORED_FUNCS += ^std::_Tree_val::_Left$
#RETURN_CHECKER_IGNORED_FUNCS += ^std::_Tree_val::_Parent$
#RETURN_CHECKER_IGNORED_FUNCS += ^std::_Tree::_Parent$


# Parameter FORMAT_STRING_CHECKER_SAMPLE_SIZE
#
# Purpose
#  At least this many calls to a given function with a format string
#  in some fixed argument position must be seen before the sample is
#  considered large enough to warn the user about Format String
#  problems.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_MISC.FMT: Used by Format String
#
# Type
#  integer
#
# Behavior
#  A smaller value will cause more warnings based on statistical
#  decisions. Negative values are prohibited.
#
#FORMAT_STRING_CHECKER_SAMPLE_SIZE = 20


# Parameter FORMAT_STRING_CHECKER_RATIO
#
# Purpose
#  Sets a threshold T such that for fixed k, if the number of call
#  sites to a given function without a format string in the k'th
#  argument position is at least T times the number of call sites
#  with a format string in the k'th argument position, no Format
#  String warnings will be produced for the function/position pair.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_MISC.FMT: Used by Format String
#
# Type
#  Real number between 0 and 1 (inclusive)
#
# Behavior
#  Making this number larger will cause more warnings. A value of 0
#  will effectively disable statistical warnings.
#
#FORMAT_STRING_CHECKER_RATIO = 0.4


# Parameter FORMAT_STRING_CHECKER_CHECKED_FUNCS
#
# Purpose
#  Used by Format String to specify exceptions to the statistical
#  analysis: (position, regular expression) pairs such that calls to
#  functions whose names match the specified regular expression must
#  always have a format string argument in the specified position.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_MISC.FMT: Used by Format String
#
# Type
#  A string of the form
#    <pos>, <regex>
#  where:
#  - <pos> is an argument position (counting from 1)
#  - <regex> is a Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  Calling a function whose name matches <regex> without a format
#  string in the <pos>'th parameter position will always trigger a
#  Format String warning, regardless of the settings of
#  FORMAT_STRING_CHECKER_SAMPLE_SIZE and
#  FORMAT_STRING_CHECKER_RATIO.
#
#  If the Format String warning class is disabled, such as with a
#  WARNING_FILTER rule, this parameter has no effect.
#
# Notes
#  This parameter replaces the csonar_format_string_check() function
#  previously available in the Extension API
#  [doc/html/Extensions/Extensions.html].
#

#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^__eprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^_cprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^_swprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 3, ^_v?snw?printf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^fwprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 3, ^sn?wprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^v?w?printf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^v?[fs]printf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^vfwprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 3, ^v?snprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 3, ^vswprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 3, ^wnsprintf[AW]?$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^wsprintf[AW]?$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^wvsprintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 3, ^wvnsprintf[AW]?$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^(__isoc99_)?_cscanf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^(__isoc99_)?fw?scanf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^(__isoc99_)?sw?scanf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^(__isoc99_)?v?[fs]scanf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^(__isoc99_)?[vw]?scanf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 3, ^StringCchPrintf$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 2, ^v?syslog$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^CH?String::FormatV?$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^CHString::FormatMessageW$
#FORMAT_STRING_CHECKER_CHECKED_FUNCS += 1, ^CString::FormatMessageV?$


# Parameter FORMAT_STRING_CHECKER_IGNORED_FUNCS
#
# Purpose
#  Used by Format String to specify exceptions to the statistical
#  analysis: (position, regular expression) pairs such that calls to
#  functions whose names match the specified regular expression are
#  never required to have a format string argument in the specified
#  position.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_MISC.FMT: Used by Format String
#
# Type
#  A string of the form
#    <pos>, <regex>
#  where:
#  - <pos> is an argument position (counting from 1)
#  - <regex> is a Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  Calling a function whose name matches <regex> without a format
#  string in the <pos>'th parameter position will not trigger a
#  Format String warning, regardless of the settings of
#  FORMAT_STRING_CHECKER_SAMPLE_SIZE and
#  FORMAT_STRING_CHECKER_RATIO.
#
#  If the Format String warning class is disabled, such as with a
#  WARNING_FILTER rule, this parameter has no effect.
#
# Notes
#  This parameter replaces the csonar_ignore_format_string()
#  function previously available in the Extension API
#  [doc/html/Extensions/Extensions.html].
#
#FORMAT_STRING_CHECKER_IGNORED_FUNCS += 3, ^strftime$


# Parameter MULTIPLE_THREADS_PER_ENTRY_PROCEDURE
#
# Purpose
#  Specifies whether CodeSonar should assume every thread entry
#  point is used to create multiple threads that run concurrently.
#
# Tags
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will report Data Race warnings in which both
#    threads start at the same entry procedure/method, as well as
#    warnings in which the threads start at different points.
#  - No : CodeSonar will only report Data Race warnings in which the
#    threads start at different points.
#
# Notes
#  Setting this to Yes can result in a large number of false
#  positive Data Race warnings, especially for applications that use
#  many "singleton threads".
#
#MULTIPLE_THREADS_PER_ENTRY_PROCEDURE = No


# Parameter DATA_RACE_IGNORE_NAMES
#
# Purpose
#  Sometimes certain variables or procedures should be ignored for
#  the purpose of data race detection. The classic example is errno,
#  which appears to be a normal global variable, but is made thread-
#  local by all modern C/C++ implementations. DATA_RACE_IGNORE_NAMES
#  provides a way to extend the set of variables and procedures that
#  the data race analysis should ignore.
#
# Tags
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  The data race analysis checks all global variables and procedure
#  names to see if they match one of the specified patterns. No data
#  races will be reported on accesses to matching variables or
#  inside of matching procedures. The general analysis engine will
#  still track matching variables and procedures as usual.
#
# Notes
#
#  Example rules:
#    DATA_RACE_IGNORE_NAMES += ^errno$
#    DATA_RACE_IGNORE_NAMES += ^run$
#


# Parameter FORCE_THREAD_ENTRY_NAMES
#
# Purpose
#  Sometimes the analysis engine cannot find all the thread entry
#  procedures/methods in a program. The most common cause of missing
#  entry points is the use of closure-like wrappers around the
#  "true" thread entry procedures. This parameter can be used to
#  force the analysis engine to treat specific procedures as thread
#  entry points.
#
# Tags
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  The analysis engine checks all procedures and methods to see if
#  they match one of the specified patterns. Matching procedures are
#  considered thread entry points, even if CodeSonar's regular
#  thread entry discovery mechanisms cannot prove that.
#
# Notes
#  Example rules:
#    FORCE_THREAD_ENTRY_NAMES += ^f1$
#    FORCE_THREAD_ENTRY_NAMES += ^handler$
#
#  Specifying a thread entry point with FORCE_THREAD_ENTRY_NAMES is
#  not sufficient to ensure that CodeSonar will carry out Data Race
#  checking. See Data Race : Note
#  [doc/html/WarningClasses/CONCURRENCY/CONCURRENCY.DATARACE.html#note]
#  for details.


# Parameter THREAD_ENTRY_METHOD_NAMES
#
# Purpose
#  For programs that use an object-oriented multithreading API.
#  Specifies which method on an object should be considered the
#  "entry method" when the object (or a reference to it) is
#  specified as a thread entry point.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  If an object (or object reference) is used in a location where a
#  thread entry point procedure is expected, CodeSonar will scan the
#  object's class hierarchy for a method whose name matches one of
#  the specified patterns.
#  - If such a method is found, it will be used as a thread entry
#    procedure.
#  - Otherwise, no thread entry point is discovered. If the thread
#    contributed to a data race, the analysis will not be able to
#    detect that race.
#
# Notes
#  CodeSonar uses THREAD_ENTRY_METHOD_NAMES settings to determine
#  which method on an object should be considered the "entry method"
#  when the object is specified as a thread entry point. This
#  parameter is only suitable for use with object-oriented
#  multithreading APIs.
#
#  To specify that an arbitrary function provides a thread entry
#  point, you will need to write a model for that function. See the
#  manual section on concurrency models
#  [doc/html/C_Module/LibraryModels/ConcurrencyModels.html] for
#  details.
#
#  Example rule:
#    THREAD_ENTRY_METHOD_NAMES += ^Main$
#
#  Specifying a thread entry point with THREAD_ENTRY_METHOD_NAMES is
#  not sufficient to ensure that CodeSonar will carry out Data Race
#  checking. See Data Race : Note
#  [doc/html/WarningClasses/CONCURRENCY/CONCURRENCY.DATARACE.html#note]
#  for details.

#THREAD_ENTRY_METHOD_NAMES += ^run$


# Parameter SEMOPEN_FUNCTIONS
#
# Purpose
#  Used by the lock-related checks to identify the procedures used
#  to open named semaphores
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  The analysis will treat all functions whose names match patterns
#  in SEMOPEN_FUNCTIONS as semaphore-opening functions. The analysis
#  assumes that the first parameter is a string that represents the
#  name of the semaphore.
#
# Notes
#  Functions that open named semaphores are expected to return the
#  same semaphore address each time they are successfully called
#  with the same name, until that semaphore is unlinked or closed.
#  Identifying a function f() with SEMOPEN_FUNCTIONS ensures that
#  the CodeSonar analysis correctly associates these properties with
#  f().
#
#  For more information, see the manual section on concurrency
#  models [doc/html/C_Module/LibraryModels/ConcurrencyModels.html].
#
#  Example rules:
#    SEMOPEN_FUNCTIONS += ^semOpen$
#    SEMOPEN_FUNCTIONS += ^sem_open$


# Parameter LOCK_FUNCTIONS
#
# Purpose
#  Used by the CONCURRENCY.LOCK.* checks
#  [doc/html/WarningClasses/MnemonicHierarchy.html#CONCURRENCY_LOCK]
#  to identify functions that should be treated as if they directly
#  acquire locks.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_CONCURRENCY.LOCK.NOLOCK: Used by Missing Lock Acquisition
#  - WC_CONCURRENCY.LOCK.NOUNLOCK: Used by Missing Lock Release
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  The analysis will treat all functions whose names match patterns
#  in LOCK_FUNCTIONS as lock-acquiring functions. The analysis
#  assumes that the first parameter is a pointer to the lock object.
#
# Notes
#  Use this parameter to identify wrapper functions for lock
#  acquisition. This allows lock acquire/release checks to issue
#  warnings in code that uses these wrappers, instead of only inside
#  the bodies of the wrappers themselves.
#
#  For example, suppose a project uses wrapper mylock():
#
#    void mylock(GMutex *m){
#    /* ... */
#    g_mutex_lock(m);
#    return;
#    }
#    
#    void nounlock(GMutex *m){
#    mylock(m);
#    }
#
#  If we set LOCK_FUNCTIONS += ^mylock$, the analysis will issue a
#  "Missing Lock Release" in the body of function nounlock().
#
#  If we do not specify that mylock is a lock function with
#  LOCK_FUNCTIONS, the analysis will not issue a "Missing Lock
#  Release" warning in the body of function nounlock(), but WILL
#  issue a "Missing Lock Release" warning in the body of mylock().
#
#  Functions that have library models identifying them as lock
#  acquirers do not need to be specified with LOCK_FUNCTIONS: they
#  will automatically be treated correctly.
#
#  For more information, see the manual section on concurrency
#  models [doc/html/C_Module/LibraryModels/ConcurrencyModels.html].
#
#  Example rule:
#    LOCK_FUNCTIONS += ^my_lock_wrapper$


# Parameter UNLOCK_FUNCTIONS
#
# Purpose
#  Used by the CONCURRENCY.LOCK.* checks
#  [doc/html/WarningClasses/MnemonicHierarchy.html#CONCURRENCY_LOCK]
#  to identify functions that should be treated as if they directly
#  release locks.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_CONCURRENCY.LOCK.NOLOCK: Used by Missing Lock Acquisition
#  - WC_CONCURRENCY.LOCK.NOUNLOCK: Used by Missing Lock Release
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  The analysis will treat all functions whose names match patterns
#  in UNLOCK_FUNCTIONS as lock-releasing functions. The analysis
#  assumes that the first parameter is a pointer to the lock object.
#
# Notes
#  Use this parameter to identify wrapper functions for lock
#  release. This allows lock acquire/release checks to issue
#  warnings in code that uses these wrappers, instead of only inside
#  the bodies of the wrappers themselves.
#
#  For example, suppose a project uses wrapper myunlock():
#
#    void myunlock(GMutex *m){
#    g_mutex_unlock(m);
#    /* ... */
#    return;
#    }
#    
#    void nolock(GMutex *m){
#    myunlock(m);
#    }
#
#  If we set UNLOCK_FUNCTIONS += ^myunlock$, the analysis will issue
#  a "Missing Lock Acquisition" warning in the body of function
#  nolock().
#
#  If we do not use LOCK_FUNCTIONS specify that myunlock is a unlock
#  function, the analysis will not issue a "Missing Lock
#  Acquisition" warning in the body of function nounlock(), but WILL
#  issue a "Missing Lock Acquisition" warning in the body of
#  myunlock().
#
#  Functions that have library models identifying them as lock
#  releasers do not need to be specified with UNLOCK_FUNCTIONS: they
#  will automatically be treated correctly.
#
#  For more information, see the manual section on concurrency
#  models [doc/html/C_Module/LibraryModels/ConcurrencyModels.html].
#
#  Example rule:
#    UNLOCK_FUNCTIONS += ^my_unlock_wrapper$


# Parameter LOCK_MAX_PENDING_WARNINGS_PER_PROCEDURE
#
# Purpose
#  Bounds the number of potential lock-related warnings that
#  CodeSonar will consider during the analysis of any particular
#  function.
#
# Type
#  non-negative integer
#
# Behavior
#  If during the analysis of a procedure, more than this many
#  potential lock-related warnings are identified, some of the
#  potential warnings will be dropped. Raising this may result in a
#  more thorough analysis, but will increase the time and memory
#  used by the analysis.
#
# Notes
#  This only affects the analysis for CONCURRENCY.LOCK.* checks
#  [doc/html/WarningClasses/MnemonicHierarchy.html#CONCURRENCY_LOCK].
#  It is quite unusual for this limit to be reached. However, if it
#  is set to a very high number (for example, more than 200,000)
#  CodeSonar may behave unpredictably or crash.
#
#LOCK_MAX_PENDING_WARNINGS_PER_PROCEDURE = 1000


# Parameter CALL_SITE_EXPANSIONS
#
# Purpose
#  Specifies the extent to which the CodeSonar analysis will expand
#  call sites for full analysis instead of using summaries to
#  approximate the behavior of the call.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  {None, Some, More, Most}
#
# Behavior
#  For a particular warning, a call site will only be expanded if it
#  is on the warning path and is especially relevant.
#
#  A higher value for this preference can reduce the number of false
#  positive results, but will make the analysis take longer.
#
# Notes
#  If a call site on some warning path is expanded in the CodeSonar
#  analysis, the corresponding HTML warning report will allow
#  navigation into the call site. This provides a more complete
#  depiction of program behavior, but increases the size of the
#  output.
#
#CALL_SITE_EXPANSIONS = Some
## CALL_SITE_EXPANSIONS = None
## CALL_SITE_EXPANSIONS = More
## CALL_SITE_EXPANSIONS = Most


# Parameter CALL_SITE_EXPANSION_BOUND
#
# Purpose
#  Places a bound on the nesting depth of call site expansions
#  (nested "+" widgets in warning reports).
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Notes
#  A limit that is too high may cause CodeSonar to have a stack
#  overflow. The factory setting (30) is only encountered in
#  pathological cases: only one program capable of inducing a stack
#  overflow has ever been found in the wild.

#CALL_SITE_EXPANSION_BOUND = 30


# Parameter ABRIDGE_HTML
#
# Purpose
#  Determines whether HTML warning reports may abridge procedure
#  listings in order to show only the most relevant parts.
#
# Tags
#  - HUB_BEHAVIOR: Hub and Web GUI
#
# Type
#  { Yes, No }
#
# Behavior
#  - No: if a path includes any part of a procedure, the warning
#    report will show all of the procedure.
#
#ABRIDGE_HTML = Yes


# Parameter MAX_FUNCTION_LENGTH
#
# Purpose
#  Used by the Function Too Long check: specifies the maximum
#  allowable length of a function.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.FUNCS.TOOLONG: Used by Function Too Long
#
# Type
#  non-negative integer
#
# Behavior
#  CodeSonar will issue a Function Too Long warning for functions
#  whose Lines With Code [doc/html/Metrics/Metrics.html#LCode]
#  exceeds this value.
#
# Notes
#  Note that the Function Too Long check is disabled by default: use
#  a WARNING_FILTER rule to enable it.
#
#MAX_FUNCTION_LENGTH = 60


# Parameter MAX_NUM_PARAMS
#
# Purpose
#  Specifies the maximum allowable numbers of parameters a function
#  can have to comply with the Too Many Parameters check.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.FUNCS.TMFP: Used by Too Many Parameters
#
# Type
#  non-negative integer
#
# Behavior
#  CodeSonar will emit a Too Many Parameters warning for functions
#  that have more parameters than specified here.
#
# Notes
#  Note that the Too Many Parameters check is disabled by default:
#  use a WARNING_FILTER rule to enable it.

#MAX_NUM_PARAMS = 6


# Parameter MIN_ASSERTS
#
# Purpose
#  Used by the Not Enough Assertions check: specifies the minimum
#  number of assertions each function must contain.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.FUNCS.ASSERTS: Used by Not Enough Assertions
#
# Type
#  non-negative integer
#
# Behavior
#  CodeSonar will emit a Not Enough Assertions warning when it
#  detects a function with fewer calls to a recognizable assert
#  function, provided that the function length exceeds the
#  MIN_ASSERTS_FUNCTION_LENGTH threshold.
#
# Notes
#  Note that the Not Enough Assertions check is disabled by default:
#  use a WARNING_FILTER rule to enable it.

#MIN_ASSERTS = 2


# Parameter MIN_ASSERTS_FUNCTION_LENGTH
#
# Purpose
#  Used by the Not Enough Assertions check: specifies the minimum
#  length a function must have to be subject to the check.
#
# Type
#  non-negative integer
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.FUNCS.ASSERTS: Used by Not Enough Assertions
#
# Behavior
#  CodeSonar will only check the number of assertions in functions
#  whose Lines With Code [doc/html/Metrics/Metrics.html#LCode]
#  exceeds this value.
#
# Notes
#  Note that the Not Enough Assertions check is disabled by default:
#  use a WARNING_FILTER rule to enable it.

#MIN_ASSERTS_FUNCTION_LENGTH = 0


# Parameter MAX_PERMITTED_DEREFS
#
# Purpose
#  Used by the Too Many Dereferences check: specifies the maximum
#  number of dereferencing levels permitted on a single item.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.STRUCT.TMD: Used by Too Many Dereferences
#
# Type
#  non-negative integer
#
# Behavior
#  If an item is dereferenced by more levels than allowed by this
#  parameter, CodeSonar will issue a Too Many Dereferences warning.
#
# Notes
#  For example,
#  - "*x" has a maximum of one dereference,
#  - "*x = *y" also has a maximum of one dereference,
#  - "*x[0] = *y" has a maximum of two dereferences.
#
#  Note that the Too Many Dereferences check is disabled by default:
#  use a WARNING_FILTER rule to enable it.
#
#MAX_PERMITTED_DEREFS = 1


# Parameter MAX_PERMITTED_INDIRECTION_IN_DECLARATION
#
# Purpose
#  Specifies the maximum levels of indirection allowed in a
#  declaration to comply with the Too Much Indirection in
#  Declaration check.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.STRUCT.TMID: Used by Too Much Indirection in
#    Declaration
#
# Type
#  non-negative integer
#
# Behavior
#  CodeSonar will emit a Too Much Indirection in Declaration warning
#  when it detects a number of indirections greater than this
#  setting.
#
# Notes
#  For example, the following declaration has two levels of
#  indirection:
#    int **x
#
#  Note that the Too Much Indirection in Declaration check is
#  disabled by default: use a WARNING_FILTER rule to enable it.
#

#MAX_PERMITTED_INDIRECTION_IN_DECLARATION = 2


# Parameter SCOPE_CHECK_SUGGESTS_LOCAL_STATIC
#
# Purpose
#  Determines how the analysis will report variables that can be
#  local static but are declared with file or global scope.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.STRUCT.SCOPE.LOCAL: Used by Scope Could Be Local Static
#  - WC_LANG.STRUCT.SCOPE.FILE: Used by Scope Could Be File Static
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : variables that are global or file static but could be
#    local static will trigger Scope Could Be Local Static warnings.
#  - No : variables that are global but could be local static will
#    trigger Scope Could Be File Static warnings; variables that are
#    file static but could be local static do not trigger any scope
#    warning.
#
# Notes
#  Setting to "No" means that no warnings of class Scope Could Be
#  Local Static will be issued by the analysis.
#
#  The Scope Could Be File Static check and the Scope Could Be Local
#  Static check are disabled by default: use WARNING_FILTER rules to
#  enable them.
#
##  SCOPE_CHECK_SUGGESTS_LOCAL_STATIC = Yes


# Parameter PTR_INSIDE_TYPEDEF_EXCEPTION
#
# Purpose
#  Used by the Pointer Type Inside Typedef check: specifies types
#  whose typedefs are allowed to contain pointer types.
#
# Tags
#  - WC_LANG.STRUCT.PIT: Used by Pointer Type Inside Typedef
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  Pointer Type Inside Typedef warnings will not be issued for
#  typedefs whose type name matches a regular expression in the
#  PTR_INSIDE_TYPEDEF_EXCEPTION set, even if the typedef contains a
#  pointer type.
#
# Notes
#  For example,
#    PTR_INSIDE_TYPEDEF_EXCEPTION += _ptr$
#  specifies that typedefs whose name end with _ptr are allowed to
#  have pointers in their definitions.
#
#  Note that the Pointer Type Inside Typedef check is disabled by
#  default: use a WARNING_FILTER rule to enable it.

#PTR_INSIDE_TYPEDEF_EXCEPTION += _ptr$


# Parameter DFS_MAX_VISITED_COEFFICIENT
# Parameter DFS_MAX_VISITED_CONSTANT
#
# Purpose
#  Used by the Recursion and Dynamic Allocation After Initialization
#  checks to compute an upper bound on the number of procedures the
#  depth-first search in these checks can visit in an incremental
#  run.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_LANG.FUNCS.RECURSION: Used by Recursion
#  - WC_ALLOC.POSTINIT: Used by Dynamic Allocation After
#    Initialization
#
# Type
#  - DFS_MAX_VISITED_COEFFICIENT : non-negative integer
#  - DFS_MAX_VISITED_CONSTANT : non-negative integer
#
# Behavior
#  The depth-first search used by the Recursion and Dynamic
#  Allocation After Initialization checks is bounded on incremental
#  analyses in proportion to the total number of procedures changed
#  since the last analysis.
#
#  Specifically, the depth-first search will terminate after
#  visiting a number of procedures equal to:
#    DFS_MAX_VISITED_COEFFICIENT * (# of procedures changed) + DFS_MAX_VISITED_CONSTANT
#
# Notes
#  Note that the Recursion and Dynamic Allocation After
#  Initialization checks are disabled by default: use WARNING_FILTER
#  rules to enable them.
#
#DFS_MAX_VISITED_COEFFICIENT = 8
#DFS_MAX_VISITED_CONSTANT = 128


# Parameter DFS_MAX_LOCAL_VISITED
#
# Purpose
#  Used by the Recursion and Dynamic Allocation After Initialization
#  checks: specifies a bound on the number of procedures visited by
#  a single local depth-first search
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_LANG.FUNCS.RECURSION: Used by Recursion
#  - WC_ALLOC.POSTINIT: Used by Dynamic Allocation After
#    Initialization
#
# Type
#  non-negative integer
#
# Behavior
#  In incremental analyses, the depth-first search used by the
#  Recursion and Dynamic Allocation After Initialization checks
#  descends from each procedure that changed since the last
#  analysis. Each local depth-first search will visit at most
#  DFS_MAX_LOCAL_VISITED procedures.
#
#  This works in conjunction with the DFS_MAX_VISITED_COEFFICIENT
#  and DFS_MAX_VISITED_CONSTANT configuration options to bound the
#  depth-first search: it prevents a single depth-first search from
#  hitting the global bound and starving any subsequent searches.
#
# Notes
#  Note that the Recursion and Dynamic Allocation After
#  Initialization checks are disabled by default: use WARNING_FILTER
#  rules to enable them.
#
#DFS_MAX_LOCAL_VISITED = 16


# Parameter DATA_RACE_PATH_FINDING_EFFORT
#
# Purpose
#  Used by the Data Race analysis to limit the amount of effort
#  spent searching for a feasible path in a particular set of
#  potential paths.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  non-negative integer
#
# Behavior
#  Specifies the maximum number of control flow branches to be
#  explored in the search for a feasible path.
#
# Notes
#  The data race analysis builds up large sets of program paths that
#  could be involved in data races. After the main code analysis
#  completes, the data race detector must search through its
#  (potentially quite large) sets of paths to find pairs of paths
#  that represent a real race. Searching through these sets can be
#  quite time consuming, so DATA_RACE_PATH_FINDING_EFFORT gives a
#  mechanism to limit the amount of time spent on the search.
#
#DATA_RACE_PATH_FINDING_EFFORT = 10000


# Parameter DATA_RACE_MAX_RELATED_PATHS
#
# Purpose
#  Controls how many related Data Race warnings get reported. Can
#  greatly influence runtime.
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#  - WC_CONCURRENCY.DATARACE: Used by Data Race
#
# Type
#  non-negative integer
#
# Behavior
#  Given DATA_RACE_MAX_RELATED_PATHS=N:
#  - The CodeSonar will consider N paths to accesses of a particular
#    memory location for each thread entry point.
#  - Because a Data Race warning involves two threads, the result is
#    that up to N^2 warnings can be reported per (memory_location,
#    thread_entry_A, access_mode_A, thread_entry_B, access_mode_B)
#    tuple.
#
#  Where
#  - A memory location might be a global variable.
#  - The functions treated as thread entry points include program
#    entry functions main() and WinMain(), library functions that
#    are modeled as thread entry points or signal handler entry
#    points, functions specified with FORCE_THREAD_ENTRY_NAMES, and
#    object-oriented API methods specified with
#    THREAD_ENTRY_METHOD_NAMES. For more details, see Concurrency
#    Models: Thread Entry Points
#    [doc/html/C_Module/LibraryModels/ConcurrencyModelsEntryPoints.html].
#  - Access mode is either read or write.
#
#  A setting of 0 (zero) will be treated the same as a setting of 1
#  (one).
#
# Notes
#  The related warnings that are reported will differ only by call
#  stack. Call stacks that contain the same functions but different
#  return addresses are considered different.
#
#  The related warnings are often, but not always, in the same
#  warning group
#  [doc/html/Elements/PROPERTIES_Warning.html#group_def]. To see
#  multiple instances of the same warning group in the CodeSonar Web
#  GUI, set Visible Warnings
#  [doc/html/GUI/GUI.html#visible_elements] to "all".
#
#  The analysis may become quite time-intensive for values other
#  than 1.
#
#  You may need to adjust DATA_RACE_PATH_FINDING_EFFORT,
#  TIME_LIMIT_DATA_RACE_PATH_SEARCH, and
#  TIME_LIMIT_DATA_RACE_PATH_SEARCH_PER_PROCEDURE to fully realize
#  the additional warnings.
#
#DATA_RACE_MAX_RELATED_PATHS = 1


# Parameter STACK_DEPTH_THRESHOLD
#
# Purpose
#  Used by the Excessive Stack Depth check: specifies the maximum
#  allowable depth of the call stack, in bytes.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_LANG.STRUCT.CALLSTACK: Used by Excessive Stack Depth
#
# Type
#  integer
#
# Behavior
#  If this threshold is exceeded, CodeSonar will issue a Excessive
#  Stack Depth warning.
#
# Notes
#  Note that the Excessive Stack Depth check is disabled by default:
#  use a WARNING_FILTER rule to enable it.
#
#STACK_DEPTH_THRESHOLD = 65536


# Parameter STACK_DEPTH_UNDEFINED_FUNCTION_SIZE
#
# Purpose
#  Used by the Excessive Stack Depth check: estimates the activation
#  record size for undefined functions.
#
# Tags
#  - WC_LANG.STRUCT.CALLSTACK: Used by Excessive Stack Depth
#
# Type
#  integer
#
# Behavior
#  CodeSonar will treat calls to undefined functions as contributing
#  this many bytes to the call stack depth.
#
# Notes
#  Note that the Excessive Stack Depth check is disabled by default:
#  use a WARNING_FILTER rule to enable it.
#
#STACK_DEPTH_UNDEFINED_FUNCTION_SIZE = 128


# Parameter STACK_DEPTH_COMPILER_PADDING
#
# Purpose
#  Used by the Excessive Stack Depth check: estimates the word size
#  to which a compiler will pad individual variables.
#
# Tags
#  - WC_LANG.STRUCT.CALLSTACK: Used by Excessive Stack Depth
#
# Type
#  integer
#
# Behavior
#  CodeSonar will treat variables as being padded to a multiple of
#  this many bytes when determining their contribution to the call
#  stack depth.
#
#  For example, on a 4-byte word-aligned system, four bytes will be
#  allocated by the declaration 'char c', even though only one byte
#  is used.
#
# Notes
#  Note that the Excessive Stack Depth check is disabled by default:
#  use a WARNING_FILTER rule to enable it.
#
#STACK_DEPTH_COMPILER_PADDING = 4


# Parameter STACK_DEPTH_ACTIVATION_RECORD_CONSTANTS
#
# Purpose
#  Used by the Excessive Stack Depth check: estimates the the size
#  of the constant elements the compiler pushes on the call stack
#  for each activation record.
#
# Tags
#  - WC_LANG.STRUCT.CALLSTACK: Used by Excessive Stack Depth
#
# Type
#  integer
#
# Behavior
#  CodeSonar will treat every activation record pushed on the call
#  stack as if it contributes this many bytes of constant elements
#  to the call stack depth.
#
#  For example, the return address is stored on the call stack for
#  every activation record.
#
# Notes
#  Note that the Excessive Stack Depth check is disabled by default:
#  use a WARNING_FILTER rule to enable it.
#
#STACK_DEPTH_ACTIVATION_RECORD_CONSTANTS = 12


# Parameter STACK_DEPTH_MODULES
#
# Purpose
#  Used by Excessive Stack Depth to specify the entry point of a
#  module and the maximum allowable depth of the call stack of that
#  module.
#
# Tags
#  - WC_LANG.STRUCT.CALLSTACK: Used by Excessive Stack Depth
#
# Type
#  A string of the form
#    <threshold>, <regex>
#  where:
#  - <threshold> is the maximum allowable depth, in bytes.
#  - <regex> is a Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  If the stack depth of the module entry point exceeds the module's
#  threshold, CodeSonar will issue a Excessive Stack Depth warning.
#
# Notes
#  If any STACK_DEPTH_MODULES are specified - even if none of them
#  match any function - CodeSonar won't check for project-wide stack
#  depth violations.
#
## STACK_DEPTH_MODULES += 65536, ^module_1_init$


# Parameter STACK_DEPTH_TERMINATE_FUNCTIONS
#
# Purpose
#  Used by Excessive Stack Depth to specify functions whose callees
#  should be ignored when computing the stack depth of the function.
#
# Tags
#  - WC_LANG.STRUCT.CALLSTACK: Used by Excessive Stack Depth
#
# Type
#  string
#
# Behavior
#  If the name of a function equals to the string given, the stack
#  depth of the function will only be computed from its locals.
#
## STACK_DEPTH_TERMINATE_FUNCTIONS += funcname


# Parameter UNDEFINED_FUNCTIONS_HAVE_SIDE_EFFECTS
#
# Purpose
#  Specifies whether or not undefined functions should be considered
#  as having side effects by the Condition Contains Side Effects
#  check.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#  - WC_LANG.STRUCT.SE.COND: Used by Condition Contains Side Effects
#
# Type
#  { Yes, No }

#UNDEFINED_FUNCTIONS_HAVE_SIDE_EFFECTS = Yes


# Parameter EMIT_PROCEDURE_SIDE_EFFECTS
#
# Purpose
#  Specifies whether or not CodeSonar will output an XML file
#  showing the variables modified by each procedure.
#
# Tags
#  - BUILD_OUTPUT: Additional Outputs from the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : the analysis will output an XML file showing the
#    variables modified by each procedure. For an analysis whose
#    analysis directory
#    [doc/html/Elements/PROPERTIES_Analysis.html#analysis_dir] is
#    <path>/<to>/<prjname>.prj_files, the XML file path will be
#    <path>/<to>/<prjname>.side_effects.xml.
#  - No : this XML file will not be output.
#
# Notes
#  Modifications are stated in terms of inputs to the procedure.

#EMIT_PROCEDURE_SIDE_EFFECTS = No


# Parameter REPORT_UNUSED_ASSIGNMENTS_FROM_CONSTANTS
#
# Purpose
#  Specifies whether or not CodeSonar will issue Unused Value
#  warnings for values that arise from constant assignments.
#
# Tags
#  - WC_LANG.STRUCT.UUVAL: Used by Unused Value
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  If "Yes", CodeSonar will issue Unused Value warnings in cases
#  like:
#    x = 3;
#
#  If "No", such cases will not trigger Unused Value warnings.
#
#REPORT_UNUSED_ASSIGNMENTS_FROM_CONSTANTS = No


# Parameter REPORT_REDUNDANT_CONDITIONS_BASED_ON_CONSTANTS
#
# Purpose
#  Specifies whether or not CodeSonar will issue Redundant Condition
#  warnings for conditions testing constant values.
#
# Tags
#  - WC_LANG.STRUCT.RC: Used by Redundant Condition
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  If "Yes", CodeSonar will issue Redundant Condition warnings in
#  cases like:
#    if ( 0 )
#    ...
#
#  If "No", such cases will not trigger Redundant Condition
#  warnings.
#
#REPORT_REDUNDANT_CONDITIONS_BASED_ON_CONSTANTS = No


# Parameter FUNCTION_MAP
#
# Purpose
#  Tells CodeSonar that function A works like function B.
#
# Type
#  String of the form
#    A -> B
#  where A and B are function names.
#
# Behavior
#  The value "A -> B" indicates that CodeSonar should treat calls to
#  function A as calls to function B. This is equivalent to writing
#  a stub using csonar_replace_A that calls B, but may be more
#  convenient.
#
#  If A -> B and B -> C then A -> C
#
#  The behavior is undefined if:
#  - the types of A and B are not binary-compatible (for example,
#    because they have different numbers of parameters), or
#  - there are cycles in the function map, or
#  - multiple FUNCTION_MAP rules with the same LHS function are
#    specified, or
#  - for some function A, csonar_replace_A exists in the project and
#    a FUNCTION_MAP rule mapping A -> B is specified for some B.
#
# Notes
#  The most common use cases are:
#  - Designating functions that end program execution.
#  - Designating malloc and free workalikes.
#
#  For multiple mappings, use a separate FUNCTION_MAP += statement
#  for each mapping.
#
#  C++ identifiers containing spaces must be quoted and contain the
#  full name of the function as used by the linker. For example:
#    // This maps the foo method to the bar method.
#    // FUNCTION_MAP += "ns::x<const char *const >::foo(unsigned int)" -> "ns::x<const char *const >::bar(unsigned int)"
#    namespace ns{
#    typedef unsigned U;
#    template <typename T>
#    struct x{
#    void foo(U i){}
#    void bar(unsigned i){1/i;}
#    void baz(void){foo(0);}
#    };
#    void f(x<const char *const> *p)
#    { p->baz(); }
#    };
#
#  Behavior is undefined if csonar_replace_A is defined and
#    FUNCTION_MAP += A -> B
#    is specified, for any functions \tt A and \tt B.
#    
#    Example 1: specify that \tt fatal causes the program to abort.
#    FUNCTION_MAP += fatal -> abort
#
#  Example 2: specify that pmalloc behaves like malloc:
#    FUNCTION_MAP += pmalloc -> malloc
#
#  Example 3: specify that pfree behaves like free:
#    FUNCTION_MAP += pfree -> free

#FUNCTION_MAP +=


# Parameter IGNORE_CPP_CODE
#
# Purpose
#  Specifies whether or not the CodeSonar analysis should check C++
#  compilation units.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will ignore all C++ compilation units: C++ code
#    will not be checked.
#  - No : CodeSonar will check both C and C++ compilation units.

#IGNORE_CPP_CODE = No


# Parameter ERROR_SUBMISSION_LIMIT_PER_COMPILATION
#
# Purpose
#  Specifies the maximum number of parse errors submitted to the hub
#  for a compilation.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  integer. -1 means "no limit"
#
# Behavior
#  No more than the specified number of errors will be submitted to
#  the hub for any single compilation. If the number of errors for
#  the compilation exceeds the specified number, a "There are more
#  errors" entry is submitted.
#
# Notes
#  This parameter has no effect on whether or not a compilation is
#  included in the analysis.

#ERROR_SUBMISSION_LIMIT_PER_COMPILATION = 30


# Parameter VOLATILE_TREATMENT
#
# Purpose
#  Specifies whether reads through volatile types always result in
#  unknown values.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  {UNKNOWABLE, ADVERSARIAL, IGNORE}
#
# Behavior
#  - UNKNOWABLE : any attempt to read through a volatile type will
#    result in an unknown value that is not considered adversarial.
#  - ADVERSARIAL : any attempt to read through a volatile type will
#    result in an adversarial value.
#  - IGNORE : CodeSonar ignores the volatile keyword.
#
# Notes
#  The following test case will produce a Null Pointer Dereference
#  warning if this preference is set to UNKNOWABLE or ADVERSARIAL.
#    int *p = 0;
#    volatile int i;
#    i = 5;
#    if( i != 5 )
#    *p;
#
#  The following test case will produce a Division By Zero warning
#  if this preference is set to ADVERSARIAL.
#    volatile int i;
#    i = 5;
#    10 / i;
#
#  The following test case will produce a Division By Zero warning
#  if this preference is set to ADVERSARIAL or IGNORE.
#    volatile int i;
#    i = 0;
#    10 / i;
#
#  The following test case will produce an Unreachable Code: 5
#  warning classes warning if this preference is set to IGNORE.
#    int j;
#    volatile int timer = 0;
#    while( timer != 1000 )
#    ;
#    j = 42;

#VOLATILE_TREATMENT = UNKNOWABLE


# Parameter FLOAT_IS_ADVERSARIAL
#
# Purpose
#  Specifies whether all floating point values should be considered
#  adversarial.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : all floating point values will be treated as unknown and
#    adversarial, even constants.
#  - No : CodeSonar will reason about floating point values.
#
# Notes
#  Do not set to Yes if any floating point warning classes (Float
#  Division By Zero plus any class with a mnemonic of the form
#  MATH.* [doc/html/WarningClasses/MnemonicHierarchy.html#MATH]) are
#  enabled: it will cause a large number of false positive warnings
#  with those classes.
#
#  For example, a Float Division By Zero warning will be issued for
#  the following when FLOAT_IS_ADVERSARIAL=Yes because the
#  denominator is treated as adversarial even though it is a
#  constant.
#    float c = 5.0 / 2.0
#
#  The following test case will produce two Buffer Overrun warnings
#  when FLOAT_IS_ADVERSARIAL=Yes.
#    char A[10];
#    double d = 11.0;
#    A[d] = 0;
#    d = 5.0;
#    A[d] = 0;

#FLOAT_IS_ADVERSARIAL = No


# Parameter INFER_CONST
#
# Purpose
#  Specifies whether to treat globals and statics as const if they
#  are initialized (explicitly or implicitly) but never assigned to.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : assume these variables never change
#  - No : assume these variables might change
#
# Notes
#
#  In the following code example, bound is initialized to 100 and
#  then never assigned to.
#  - If the example is analyzed with INFER_CONST=Yes, CodeSonar will
#    assume that the value of bound is always 100, and so will
#    determine that the array access buf[i] will never overflow
#    because it is adequately guarded by the test on the previous
#    line.
#  - If this example is analyzed with INFER_CONST=No, CodeSonar's
#    analysis will allow for the possibility that the value of bound
#    could be changed by separate code, and so issue a Buffer
#    Overrun warning.
#    int bound = 100;
#    void foo(void) {
#    char buf[100];
#    int i = getchar();
#    if( i >= bound || i < 0 ) return;
#    buf[i] = 'c';
#    }
#
#  The following test case will produce a Null Pointer Dereference
#  warning if it is analyzed with INFER_CONST=Yes.
#    int *ip;
#    void foo(void) {
#    *ip = 7;
#    }
#  This is because ip is implicitly zero-initialized, and no other
#  value is ever assigned to ip. Therefore, CodeSonar assumes that
#  ip must always be zero. To avoid the zero-initialization, you can
#  change the declaration to
#    extern int *ip;
#
#  In some cases, analyzing code with INFER_CONST=Yes can lead to
#  unexpected false positives and false negatives.
#  - If you are analyzing only pieces of a larger code base, you may
#    experience positives and false negatives arising from variables
#    that are modified elsewhere in the program but not in the
#    analyzed portion (because CodeSonar will assume that these
#    variables are never modified).
#  - Similarly, libraries and synthetic test cases often involve
#    variables whose values do not change in the library/test
#    itself, but may be changed by external code.
#
#  In these cases, analyzing with INFER_CONST=No may provide better
#  results.

#INFER_CONST = Yes


# Parameter NULL_SENTINEL_CHAR_SIZE
#
# Purpose
#  Specifies the maximum sized integer that should be considered a
#  character type for the purpose of tracking the null-terminator
#  position.
#
# Tags
#  - WC_MISC.MEM.NTERM.CSTRING: Used by Unterminated C String
#
# Type
#  integer
#
# Notes
#  Setting this to 2 may prove useful for projects using wide
#  characters. However, some approximations that occur as a
#  consequence of using this can backfire when a single memory
#  region contains multiple zeroes. It is not recommended that users
#  alter this unless advised to do so by GrammaTech.
#
#NULL_SENTINEL_CHAR_SIZE = 1


# Parameter WARN_POINTER_AT_END
#
# Purpose
#  Specifies whether Pointer Past End of Object warnings should be
#  issued for pointers that point to exactly the end of an object.
#
# Tags
#  - WC_LANG.STRUCT.PPE: Used by Pointer Past End of Object
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", Pointer Past End of Object warnings will be
#  issued in cases like the following.
#    int A[10];
#    int *p = &A[10];
#
# Notes
#  The factory setting is "No" because many codebases may have
#  cursor pointers that reach the end of an object but are never
#  dereferenced, as in the following example.
#    int A[10];
#    int *p;
#    for( p = A; p < &A[10]; p++ );
#
#WARN_POINTER_AT_END = No


# Parameter WARN_MORE_LOOP_UVARS
#
# Purpose
#  Specifies whether the tracking of variable initialization in
#  loops is tuned to potentially report more Uninitialized Variable
#  warnings.
#
# Tags
#  - WC_LANG.MEM.UVAR: Used by Uninitialized Variable
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", Uninitialized Variable warnings will be issued
#  for variables that are initialized on some but not all paths
#  through the loop.
#
# Notes
#  The factory setting is "No" because this feature is a frequent
#  source of false positive results when complex invariants in the
#  codebase render the non-initializing paths infeasible.

#WARN_MORE_LOOP_UVARS = No


# Parameter METRIC_FILTER
#
# Purpose
#  Allows metrics [doc/html/Metrics/Metrics.html] to be turned
#  on/off, either for an entire metric class or for specific files,
#  procedures, or compilation units.
#
# Tags
#  - METRIC: metric-related
#  - ANALYSIS_FILTER: Analysis-Side Filtering
#
# Type
#  Zero or more patterns, each consisting of an <action> followed by
#  one or more <rule>s.
#
#  <action> is one of:
#  - discard
#  - allow
#
#  <rule> is one of:
#  - metric <matcher> <string>
#  - file <matcher> <string>
#  - procedure <matcher> <string>
#  - procedure_typed <matcher> <string>
#  - compilation_unit <matcher> <string>
#  - language <matcher> <string>
#
#  and <matcher> is one of:
#  - : (substring match, case-insensitive)
#  - = (exact match, case-insensitive)
#  - =~ (regular expression match against a Boost 'POSIX Extended
#    Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html])
#
# Behavior
#  Depends on the <action>:
#  - discard : metrics matching the rules will be discarded instead
#    of being submitted to the hub, and whenever possible will not
#    be computed.
#  - allow : metrics matching the rules will be submitted to the
#    hub, even if they matched a previous "discard"
#
# Notes
#  If there are two or more <rule>s in a pattern, the pattern
#  <action> will be applied to metrics that match ALL of the rules.
#
#  procedure rules match against the cs_pdg_friendly_name()
#  [doc/html/API/CAPI/cs__pdg_8h.html#func_cs_pdg_friendly_name];
#  procedure_typed rules match against the cs_pdg_procedure_name()
#  [doc/html/API/CAPI/cs__pdg_8h.html#func_cs_pdg_procedure_name].
#
#  If you want to compute any of the Halstead metrics (n1, N1, n2,
#  N2, D, I, T, E, N, L, V), set
#    BUILD_OPTIONS += -retain-unnormalized-c-ast yes
#
#  Metrics of an individual granularity can be allowed/discarded if
#  the string pattern is of the form "tag[granularity]". For
#  example, to discard the "Total Lines" (TL) metric only for file
#  granularity (not the analysis or procedure granularity metrics
#  with the same tag), the following rule will work:
#    METRIC_FILTER += discard metric="TL[FILE]"
#
#  The following metrics are enabled by default. To discard a
#  particular metric class, use the corresponding "discard" rule.
#    METRIC_FILTER += discard metric="LCodeOnly"
#    METRIC_FILTER += discard metric="LCode"
#    METRIC_FILTER += discard metric="LMCC"
#    METRIC_FILTER += discard metric="LComOnly"
#    METRIC_FILTER += discard metric="LB"
#    METRIC_FILTER += discard metric="TL"
#    METRIC_FILTER += discard metric="LCom"
#    METRIC_FILTER += discard metric="vG"
#    METRIC_FILTER += discard metric="mvG"
#    METRIC_FILTER += discard metric="Modules"
#    METRIC_FILTER += discard metric="TopLF"
#    METRIC_FILTER += discard metric="InclF"
#    METRIC_FILTER += discard metric="TaintSource"
#    METRIC_FILTER += discard metric="TaintProp"
#    METRIC_FILTER += discard metric="TaintSink"
#
#  The following metrics are disabled by default. To enable a
#  particular metric class, use the corresponding "allow" rule.
#    METRIC_FILTER += allow metric="n1"
#    METRIC_FILTER += allow metric="N1"
#    METRIC_FILTER += allow metric="n2"
#    METRIC_FILTER += allow metric="N2"
#    METRIC_FILTER += allow metric="D"
#    METRIC_FILTER += allow metric="I"
#    METRIC_FILTER += allow metric="T"
#    METRIC_FILTER += allow metric="E"
#    METRIC_FILTER += allow metric="N"
#    METRIC_FILTER += allow metric="L"
#    METRIC_FILTER += allow metric="V"
#    METRIC_FILTER += allow metric="evG"
#    METRIC_FILTER += allow metric="ivG"
#    METRIC_FILTER += allow metric="S1"


# Parameter METRIC_DERIVED_DEF
#
# Purpose
#  Creates new derived metrics [doc/html/Metrics/Metrics.html],
#  which are computed by mathematically manipulating values of
#  already existing metrics.
#
# Tags
#  - METRIC: metric-related
#
# Type
#  A string of the form <metric tag>, <metric description>,
#  <granularity>, <expression>
#
#  where:
#
#  <metric tag> is the quoted tag for the new metric. Metric tags
#  are case-sensitive; the metrics [doc/html/Metrics/Metrics.html]
#  page has a table showing the tags for all built-in metrics. The
#  <metric tag> must:
#  - start with characters matching: [a-zA-Z]
#  - only contain characters matching: [a-zA-Z][0-9] _-
#  - have string length <= 15 characters
#  - be unique, in combination with <granularity>. (This allows you
#    to use the same tag for a conceptually similar metric across
#    multiple granularities, while preventing duplicate tags within
#    a single granularity.)
#  - not match any function name in the expression grammar
#
#  <metric description> is the quoted description for the new
#  metric, and must:
#  - only contain characters matching: [a-zA-Z][0-9] _-
#  - have string length <= 35 characters
#
#  <granularity> is the granularity of the new metric, and is one of
#  {ANALYSIS, COMPUNIT, DIRECTORY, FILE, PROCEDURE}
#
#  <expression> is an expression containing mathematical operators,
#  functions, constant (floating point) values, and references to
#  other metrics.
#
#  Expression grammar:
#    S        -> expr
#    expr     -> expr + expr | expr - expr | expr * expr | expr / expr |
#    const | metric | function(expr, ...)
#    function -> cos | sin | tan | acos | asin | atan | atan2 | cosh | sinh |
#    tanh | exp | ldexp | log | log10 | pow | sqrt |
#    ceil | fabs | floor | fmod | sum | prod | avg | min | max
#    metric   -> "[a-zA-Z0-9]+\[granularity\]"
#    granularity -> ANALYSIS | COMPUNIT | FILE | PROCEDURE
#
#  - All metric values must match an existing metric; metric tags
#    are case-sensitive.
#  - All functions return a single floating point value.
#  - All math operations are floating point.
#  - Functions sum, prod, avg, min, and max are summarizing
#    functions they only take metrics as arguments, and only work
#    when the derived metric has granularity greater than the
#    referenced metric. See table below (sum is used as example).
#
#    +---------------------+-------------------+-----------------------------+
#    | derived metric gran | expression        | description                 |
#    +---------------------+-------------------+-----------------------------+
#    | FILE                | sum(PROCEDURE)    | Sums over all procedures in |
#    |                     |                   | the file.                   |
#    |                     |                   |                             |
#    | COMPUNIT            | sum(PROCEDURE)    | Sums over all procedures in |
#    |                     |                   | the compilation unit.       |
#    |                     |                   |                             |
#    | ANALYSIS            | sum(PROCEDURE)    | Sums over all procedures in |
#    |                     |                   | the analyzed project.       |
#    |                     |                   |                             |
#    | COMPUNIT            | sum(FILE)         | Sums over all files in the  |
#    |                     |                   | compilation unit.           |
#    |                     |                   |                             |
#    | ... etc                                                               |
#    +-----------------------------------------------------------------------+
#
# Behavior
#  If a properly formed derived metric is specified, that metric
#  will be computed and displayed for the next analysis unless it is
#  discarded via METRIC_FILTER.
#
#  If there is an error in the specification of METRIC_DERIVED_DEF,
#  CodeSonar will issue an alert [doc/html/GUI/GUI_Alerts.html] that
#  specifies the nature of the problem.
#
# Notes
#  If a derived metric which is enabled refers to a metric which is
#  disabled, the derived metric will still be calculated. This will
#  cause the disabled metric to be calculated as well (though not
#  reported). In this scenario, the performance gains from having
#  the unreported metric disabled are lost.
#
#  All METRIC_DERIVED_DEF definitions are processed before any
#  METRIC_FILTER settings. A derived metric can therefore be
#  disabled by a METRIC_FILTER rule that appears before the metric
#  definition in the configuration file.
#
#  If you want to compute any of the Halstead metrics (n1, N1, n2,
#  N2, D, I, T, E, N, L, V), set
#    BUILD_OPTIONS += -retain-unnormalized-c-ast yes
#
#  Example 1: Divide LCode by 1000 to get a "kLOC" metric.
#    METRIC_DERIVED_DEF += "kLOC", "Lines With Code / 1000", PROCEDURE, "LCode[PROCEDURE]" / 1000)
#    METRIC_DERIVED_DEF += "kLOC", "Lines With Code / 1000", FILE, "LCode[FILE]" / 1000)
#
#  Example 2: Some slight variations on the basic McCabe metrics.
#    METRIC_DERIVED_DEF += "vG-code", "Cyclomatic Density", PROCEDURE, "[PROCEDURE]" / "LCode[PROCEDURE]"
#    METRIC_DERIVED_DEF += "ivG-vG", "Module Design Density", PROCEDURE, "ivG[PROCEDURE]" / "vG[PROCEDURE]"
#    METRIC_DERIVED_DEF += "evG-vG", "Essential Density", PROCEDURE, ("evG[PROCEDURE]" - 1) / "vG[PROCEDURE]"

#METRIC_DERIVED_DEF += "LCodeOnly", "Code Lines", DIRECTORY, sum("LCodeOnly[FILE]") + sum("LCodeOnly[DIRECTORY]")
#METRIC_DERIVED_DEF += "LMCC", "Mixed Lines", DIRECTORY, sum("LMCC[FILE]") + sum("LMCC[DIRECTORY]")
#METRIC_DERIVED_DEF += "LComOnly", "Comment Lines", DIRECTORY, sum("LComOnly[FILE]") + sum("LComOnly[DIRECTORY]")
#METRIC_DERIVED_DEF += "LB", "Blank Lines", DIRECTORY, sum("LB[FILE]") + sum("LB[DIRECTORY]")
#METRIC_DERIVED_DEF += "TL", "Total Lines", DIRECTORY, sum("TL[FILE]") + sum("TL[DIRECTORY]")
#METRIC_DERIVED_DEF += "LCode", "Lines with Code", DIRECTORY, sum("LCode[FILE]") + sum("LCode[DIRECTORY]")
#METRIC_DERIVED_DEF += "LCom", "Lines with Comments", DIRECTORY, sum("LCom[FILE]") + sum("LCom[DIRECTORY]")
#METRIC_DERIVED_DEF += "vG", "Cyclomatic Complexity", FILE, sum("vG[PROCEDURE]")
#METRIC_DERIVED_DEF += "mvG", "Modified Cyclomatic Complexity", FILE, sum("mvG[PROCEDURE]")
#METRIC_DERIVED_DEF += "ivG", "Module Design Complexity", FILE, sum("ivG[PROCEDURE]")
#METRIC_DERIVED_DEF += "evG", "Essential Complexity", FILE, sum("evG[PROCEDURE]")
#METRIC_DERIVED_DEF += "vG", "Cyclomatic Complexity", DIRECTORY, sum("vG[FILE]") + sum("vG[DIRECTORY]")
#METRIC_DERIVED_DEF += "mvG", "Modified Cyclomatic Complexity", DIRECTORY, sum("mvG[FILE]") + sum("mvG[DIRECTORY]")
#METRIC_DERIVED_DEF += "ivG", "Module Design Complexity", DIRECTORY, sum("ivG[FILE]") + sum("ivG[DIRECTORY]")
#METRIC_DERIVED_DEF += "evG", "Essential Complexity", DIRECTORY, sum("evG[FILE]") + sum("evG[DIRECTORY]")
#METRIC_DERIVED_DEF += "n1", "Distinct Operators", FILE, sum("n1[PROCEDURE]")
#METRIC_DERIVED_DEF += "N1", "Total Operators", FILE, sum("N1[PROCEDURE]")
#METRIC_DERIVED_DEF += "n2", "Distinct Operands", FILE, sum("n2[PROCEDURE]")
#METRIC_DERIVED_DEF += "N2", "Total Operands", FILE, sum("N2[PROCEDURE]")
#METRIC_DERIVED_DEF += "N", "Halstead Program Length", FILE, sum("N[PROCEDURE]")
#METRIC_DERIVED_DEF += "L", "Halstead Program Level", FILE, sum("L[PROCEDURE]")
#METRIC_DERIVED_DEF += "V", "Halstead Program Volume", FILE, sum("V[PROCEDURE]")
#METRIC_DERIVED_DEF += "D", "Halstead Program Difficulty", FILE, sum("D[PROCEDURE]")
#METRIC_DERIVED_DEF += "E", "Halstead Programming Effort", FILE, sum("E[PROCEDURE]")
#METRIC_DERIVED_DEF += "I", "Halstead Intelligent Content", FILE, sum("I[PROCEDURE]")
#METRIC_DERIVED_DEF += "T", "Halstead Programming Time", FILE, sum("T[PROCEDURE]")
#METRIC_DERIVED_DEF += "n1", "Distinct Operators", DIRECTORY, sum("n1[FILE]") + sum("n1[DIRECTORY]")
#METRIC_DERIVED_DEF += "N1", "Total Operators", DIRECTORY, sum("N1[FILE]") + sum("N1[DIRECTORY]")
#METRIC_DERIVED_DEF += "n2", "Distinct Operands", DIRECTORY, sum("n2[FILE]") + sum("n2[DIRECTORY]")
#METRIC_DERIVED_DEF += "N2", "Total Operands", DIRECTORY, sum("N2[FILE]") + sum("N2[DIRECTORY]")
#METRIC_DERIVED_DEF += "N", "Halstead Program Length", DIRECTORY, sum("N[FILE]") + sum("N[DIRECTORY]")
#METRIC_DERIVED_DEF += "L", "Halstead Program Level", DIRECTORY, sum("L[FILE]") + sum("L[DIRECTORY]")
#METRIC_DERIVED_DEF += "V", "Halstead Program Volume", DIRECTORY, sum("V[FILE]") + sum("V[DIRECTORY]")
#METRIC_DERIVED_DEF += "D", "Halstead Program Difficulty", DIRECTORY, sum("D[FILE]") + sum("D[DIRECTORY]")
#METRIC_DERIVED_DEF += "E", "Halstead Programming Effort", DIRECTORY, sum("E[FILE]") + sum("E[DIRECTORY]")
#METRIC_DERIVED_DEF += "I", "Halstead Intelligent Content", DIRECTORY, sum("I[FILE]") + sum("I[DIRECTORY]")
#METRIC_DERIVED_DEF += "T", "Halstead Programming Time", DIRECTORY, sum("T[FILE]") + sum("T[DIRECTORY]")
#METRIC_DERIVED_DEF += "TaintSource", "Taint Source Total", FILE, sum("TaintSource[PROCEDURE]")
#METRIC_DERIVED_DEF += "TaintProp", "Taint Propagator Total", FILE, sum("TaintProp[PROCEDURE]")
#METRIC_DERIVED_DEF += "TaintSink", "Taint Sink Total", FILE, sum("TaintSink[PROCEDURE]")
#METRIC_DERIVED_DEF += "TaintSource", "Taint Source Total", DIRECTORY, sum("TaintSource[FILE]") + sum("TaintSource[DIRECTORY]")
#METRIC_DERIVED_DEF += "TaintProp", "Taint Propagator Total", DIRECTORY, sum("TaintProp[FILE]") + sum("TaintProp[DIRECTORY]")
#METRIC_DERIVED_DEF += "TaintSink", "Taint Sink Total", DIRECTORY, sum("TaintSink[FILE]") + sum("TaintSink[DIRECTORY]")


# Parameter METHOD_INVOCATION_DEREFERENCE_BEHAVIOR
#
# Purpose
#  Specifies whether C++ method invocations should always be treated
#  as if they dereference this at the method invocation site.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  {All, Undefined, None}
#
# Behavior
#  The C++ method invocation p->m() will not actually dereference
#  the pointer p unless the body of m accesses a data member of p.
#  However, sometimes it is useful to treat method invocations as if
#  they always dereference their objects - either because the source
#  code implementing m() is unavailable or to reduce the complexity
#  of warnings.
#
#  - All : All method invocations are treated as if they dereference
#    their this pointer. Additionally, this is assumed to never have
#    a value below NULL_POINTER_THRESHOLD.
#  - Undefined : All invocations of undefined methods (methods for
#    which no source code is available) are treated as if they
#    dereference their this pointers, which are assumed to never
#    have a value below NULL_POINTER_THRESHOLD. No assumptions are
#    made about defined methods.
#  - None : No assumptions are made about any methods. In practice,
#    this means that invocations of undefined methods are never
#    considered to dereference this.
#
# Notes
#  With the All setting, method invocations on unconditionally null
#  pointers will result in unreachable code after the method
#  returns.
#
#METHOD_INVOCATION_DEREFERENCE_BEHAVIOR = None
#  METHOD_INVOCATION_DEREFERENCE_BEHAVIOR = Undefined
#  METHOD_INVOCATION_DEREFERENCE_BEHAVIOR = All


# Parameter METRIC_WARNING_CONDITION
# Parameter METRIC_WARNING_CLASS_NAME
# Parameter METRIC_WARNING_CATEGORIES
# Parameter METRIC_WARNING_BASE_RANK
# Parameter METRIC_WARNING_RANK
# Parameter METRIC_WARNING_SIGNIFICANCE
#
# Purpose
#  Specifies a warning condition for a metric; if that condition is
#  met, a warning is reported.
#
# Tags
#  - METRIC: metric-related
#
# Type
#  - METRIC_WARNING_CONDITION: metric <op> number where the metric
#    is specified by tag[granularity], and <op> is one of >, <, >=,
#    <=
#  - METRIC_WARNING_CLASS_NAME: string
#  - METRIC_WARNING_CATEGORIES: string
#  - METRIC_WARNING_BASE_RANK: number
#  - METRIC_WARNING_SIGNIFICANCE: { UNSPECIFIED, SECURITY,
#    RELIABILITY, REDUNDANCY, STYLE, DIAGNOSTIC }
#
# Behavior
#  These parameters are used together to specify conditions on
#  metric values, and warnings to issue when values meet those
#  conditions.
#
#  - METRIC_WARNING_CONDITION specifies a metric and a condition on
#    that metric. A warning will be issued if the metric's value
#    meets the condition. The metric must be enabled with a
#    METRIC_FILTER allow rule. Both built-in metrics and derived
#    metrics can be used.
#  - METRIC_WARNING_CLASS_NAME is the warning class name.
#  - METRIC_WARNING_CATEGORIES is the set of categories for the
#    warning, as a semicolon-separated list.
#  - METRIC_WARNING_BASE_RANK is the base rank
#    [doc/html/Elements/PROPERTIES_Warning.html#representative_def]
#    assigned to the warning, with default 25.0.
#  - METRIC_WARNING_SIGNIFICANCE is a string representing the
#    Significance [doc/html/WarningClasses/Significance.html]
#    classification for this warning class.
#
# Notes
#  Parameter METRIC_WARNING_RANK is deprecated in favor of
#  METRIC_WARNING_BASE_RANK; the two currently have identical
#  behavior.
#
#  The METRIC_WARNING_CATEGORIES, METRIC_WARNING_BASE_RANK, and
#  METRIC_WARNING_SIGNIFICANCE settings are optional, but
#  METRIC_WARNING_CONDITION and METRIC_WARNING_CLASS_NAME must be
#  fully specified. The METRIC_WARNING_CONDITION message must come
#  first, and the METRIC_WARNING_CLASS_NAME second.
#
#  If two or more sets of METRIC_WARNING_* rules have the same
#  METRIC_WARNING_CLASS_NAME value, the same warning class will be
#  used to cover all cases. Therefore, sets of rules with the same
#  METRIC_WARNING_CLASS_NAME should also have the same
#  METRIC_WARNING_CATEGORIES and METRIC_WARNING_BASE_RANK values
#  (that is, they should only differ in the METRIC_WARNING_CONDITION
#  setting).
#
#  Similarly, if a set of METRIC_WARNING_* rules has a
#  METRIC_WARNING_CLASS_NAME that is the same as the name of a
#  standard CodeSonar warning class, the category and rank settings
#  of the standard class will apply and any
#  METRIC_WARNING_CATEGORIES or METRIC_WARNING_BASE_RANK specified
#  in the set will not be used.
#
#  Examples:
#
#  Instruct CodeSonar to issue a warning of class "High Cyclomatic
#  Complexity" for any function with a cyclomatic complexity of 20
#  or more.
#    METRIC_WARNING_CONDITION = vG[PROCEDURE] >= 20
#    METRIC_WARNING_CLASS_NAME = High Cyclomatic Complexity
#    METRIC_WARNING_CATEGORIES = METRIC.VG
#    METRIC_WARNING_BASE_RANK = 5.0
#    METRIC_WARNING_SIGNIFICANCE = STYLE
#
#  Instruct CodeSonar to issue a warning of class "Large procedure"
#  for any function containing more than 100 lines with code:
#    METRIC_WARNING_CONDITION = LCode[PROCEDURE] > 100
#    METRIC_WARNING_CLASS_NAME = Large procedure
#    METRIC_WARNING_CATEGORIES = METRIC.LCODE
#    METRIC_WARNING_BASE_RANK = 1.0
#    METRIC_WARNING_SIGNIFICANCE = STYLE
#
#  Instruct CodeSonar to issue a warning of class "Too few comments"
#  for any insufficiently commented function (defined here as a
#  function containing fewer than 5 lines with comments).
#    METRIC_WARNING_CONDITION = LCom[PROCEDURE] < 5
#    METRIC_WARNING_CLASS_NAME = Too few comments
#    METRIC_WARNING_CATEGORIES = METRIC.LCOM
#    METRIC_WARNING_BASE_RANK = 2.0
#    METRIC_WARNING_SIGNIFICANCE = STYLE
#
#  Note that the categories in these examples are arbitrary text.
#


# Parameter WEB_CONSOLE
#
# Purpose
#  Specifies whether the Python Console and Scheme Console will be
#  made available for the analysis (provided the hub is running with
#  debug features enabled).
#
# Tags
#  - HUB_BEHAVIOR: Hub and Web GUI
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : the Python Console [doc/html/GUI/GUI_Python_Console.html]
#    and Scheme Console [doc/html/GUI/GUI_Scheme_Console.html] will
#    be available and functional for this analysis, provided the hub
#    is running with debug features enabled. Warning: this poses a
#    grave security risk. Anyone with access to the console can
#    execute arbitrary code in the analysis process.
#  - No : the API Consoles will not be available for this analysis.
#
# Notes
#  To enable debug features:
#  - Shut down the hub [doc/html/Workings/Hub_Shutting_Down.html].
#  - Edit <i>$CSONAR</i>/codesonar/py/hub/build_options.py to set
#    debug=True.
#  - Restart the hub [doc/html/Workings/Hub_Starting.html].
#
#  The Python and Scheme consoles can be useful for experimenting
#  with the analysis APIs. They can also be useful for debugging
#  analysis plug-ins.
#
#  Code will have full access to the program representations
#  generated by CodeSonar and will run with the credentials of
#  whoever started the analysis process. There is no sandboxing of
#  any kind.

#WEB_CONSOLE = No


# Parameter COLLAPSE_PROCEDURES
#
# Purpose
#  Specifies whether multiple instances of the same procedure should
#  be collapsed into a single instance for viewing purposes. This
#  primarily affects templated functions which are instantiated with
#  multiple template arguments, and also static inline functions.
#
# Tags
#  - INCREMENTAL_NOCHANGE: Do Not Change Between Incremental
#    Analyses
#  - HUB_BEHAVIOR: Hub and Web GUI
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", the hub will only display one procedure in cases
#  where multiple PDGs are instances of the same procedure.
#
# Notes
#  The choice of representative procedure instance is arbitrary.
#  Multiple procedures defined at the same source file/line may also
#  be collapsed. Do not change the setting of this parameter between
#  incremental builds.
#
#  For example, suppose foo<T>(void) has two instances:
#  foo<int>(void) and foo<float>(void).
#  - With COLLAPSE_PROCEDURES=Yes, foo will have only a single line
#    in tables of procedures and procedure-granularity metrics,
#    describing one of the two instances. Only this instance will be
#    shown in charts.
#  - With COLLAPSE_PROCEDURES=No, foo will have two lines in tables
#    of procedures and procedures-granularity metrics - one for each
#    instance. Both instances will be shown in charts.
#
#  Procedure and line counts are not affected by the setting of this
#  parameter. Metrics warnings on procedures are also not affected.
#
#COLLAPSE_PROCEDURES = Yes


# Parameter WARN_MORE_LOOP_LEAKS
#
# Purpose
#  Normally, leak warnings on paths that iterate around a loop
#  multiple times are suppressed. Setting to "Yes" will disable the
#  suppression.
#
# Tags
#  - WC_ALLOC.LEAK: Used by Leak
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", leaks will be reported on paths that iterate
#  around loops multiple times. These leaks are often false
#  positives.
#
# Notes
#  This is an experimental feature and more work is necessary on
#  GrammaTech's part to eliminate false positives in this area. The
#  natural language explanation of existing warnings may also
#  degrade as a consequence of enabling this setting.
#
#WARN_MORE_LOOP_LEAKS = No


# Parameter REFINE_LEAKS_THOROUGHLY
#
# Purpose
#  Setting to "No" will prevent CodeSonar from dismissing likely
#  leak false positives.
#
# Tags
#  - WC_ALLOC.LEAK: Used by Leak
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "No", leaks will be reported significantly more
#  frequently. Many of the resulting reports will be false
#  positives, but some may be true positives.
#
#REFINE_LEAKS_THOROUGHLY = Yes


# Parameter FILE_LISTING_UNDEF_PROCS
#
# Purpose
#  For Source Listing pages: specifies whether calls to undefined
#  functions should be specially marked.
#
# Tags
#  - HUB_BEHAVIOR: Hub and Web GUI
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Behavior
#  If set to "Yes", undefined functions will be marked with events
#  when viewing a file's contents from the hub.
#
# Notes
#  Turning this on could have a negative performance impact on the
#  file listing view in the hub.
#
#  This parameter does not affect Warning Report pages, which will
#  always show events for undefined function calls that occur on the
#  warning path.
#
#FILE_LISTING_UNDEF_PROCS = No


# Parameter XML_DUMP_MODE
#
# Purpose
#  Specifies whether analysis daemon should write the content of a
#  warning to an XML file when it sends the warning to the hub.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  {FULL, NO_LISTING, No}
#
# Behavior
#  - FULL: the full warning report will be written out for each
#    warning.
#  - NO_LISTING: the warning report for each warning will be written
#    out with the path listing omitted.
#  - No: no XML files are generated.
#
# Notes
#  Set this parameter to FULL or NO_LISTING if you want the analysis
#  to generate XML files for all warnings sent to the hub. There
#  will be one XML file per warning.
#
#  - XML files for warnings issued in source file <path>/<basename>
#    will be output at
#    <prjname>.xml/analysis_<analysis_id>/<basename><hash(path)>/.
#  - XML files for warnings not associated with a source file will
#    be output at
#    <prjname>.xml/analysis_<analysis_id>/NONAME_0000000>/.
#
#XML_DUMP_MODE = No


# Parameter NON_TERMINATING_LOOP_MARK
#
# Purpose
#  Specifies loops for which Potential Unbounded Loop warnings
#  should not be issued.
#
# Tags
#  - WC_LANG.STRUCT.LOOP.UB: Used by Potential Unbounded Loop
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  If the line containing the loop condition matches this regular
#  expression, a Potential Unbounded Loop warning will not be
#  issued.
#
# Notes
#  For example,
#    NON_TERMINATING_LOOP_MARK += /[*] @non-terminating@ [*]/
#  specifies that Potential Unbounded Loop warnings will not be
#  triggered by any loop whose condition line contains the comment
#  /* @non-terminating@ */.
#
#  Don't issue warnings for loops whose condition looks like for(;;)
#  :
#    NON_TERMINATING_LOOP_MARK += for *[(] *; *; *[)]
#
#  Don't issue warnings for loops whose condition looks like
#  while(1) :
#    NON_TERMINATING_LOOP_MARK += while *[(] *1 *[)]
#
#  Note that the Potential Unbounded Loop check is disabled by
#  default: use a WARNING_FILTER rule to enable it.

#  NON_TERMINATING_LOOP_MARK += for *[(] *; *; *[)]
#  NON_TERMINATING_LOOP_MARK += while *[(] *1 *[)]


# Parameter PROGRAM_ENTRY_POINTS
#
# Purpose
#  Specifies additional functions that should be considered as
#  program entry points. Currently only the Dynamic Allocation After
#  Initialization check uses this parameter.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_ALLOC.POSTINIT: Used by Dynamic Allocation After
#    Initialization
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  The Dynamic Allocation After Initialization check will trigger a
#  warning if there is a call chain from a program entry point to an
#  allocator call that does not go through a function specified with
#  DYN_INIT_FUNCTIONS.
#
# Notes
#  For example,
#    PROGRAM_ENTRY_POINTS += ^init$
#  specifies that the check should start at function(s) named init.
#
#  Note that the Dynamic Allocation After Initialization check is
#  disabled by default: use a WARNING_FILTER rule to enable it.

## #System_Initialization is the true 'main' procedure in a CodeSonar
## project.

#PROGRAM_ENTRY_POINTS += ^#System_Initialization$
#PROGRAM_ENTRY_POINTS += ^init$


# Parameter ALLOCATOR_FUNCTIONS
#
# Purpose
#  Specifies allocator functions. Currently only used by the Dynamic
#  Allocation After Initialization check.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_ALLOC.POSTINIT: Used by Dynamic Allocation After
#    Initialization
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  For the Dynamic Allocation After Initialization check, calls to
#  functions matching this regular expression are reported unless:
#  - they are directly or transitively called by a function
#    specified with DYN_INIT_FUNCTIONS, or
#  - they are not reachable from a program entry point (see
#    PROGRAM_ENTRY_POINTS).
#
# Notes
#  For example,
#    ALLOCATOR_FUNCTIONS += ^mmap$
#  specifies that mmap() should be considered an allocator
#
#  Note that the Dynamic Allocation After Initialization check is
#  disabled by default: use a WARNING_FILTER rule to enable it.

#ALLOCATOR_FUNCTIONS += ^(csonar_allocate_heap)$
#ALLOCATOR_FUNCTIONS += ^(malloc|alloca|realloc)$
#ALLOCATOR_FUNCTIONS += ^(sbrk|brk|mmap)$
#ALLOCATOR_FUNCTIONS += ^(_mmap)$


# Parameter DYN_INIT_FUNCTION
#
# Purpose
#  Specifies functions that may directly or transitively call
#  allocator functions without triggering a Dynamic Allocation After
#  Initialization warning.
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_ALLOC.POSTINIT: Used by Dynamic Allocation After
#    Initialization
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  No Dynamic Allocation After Initialization warnings are issued
#  for allocators (as specified by ALLOCATOR_FUNCTIONS) called
#  directly or transitively by a function whose name matches this
#  regular expression.
#
# Notes
#  For example,
#    DYN_INIT_FUNCTIONS += ^dyn_init$
#  specifies that function(s) dyn_init() can directly or
#  transitively call allocator functions without triggering a
#  warning.
#
#  Note that the Dynamic Allocation After Initialization check is
#  disabled by default: use a WARNING_FILTER rule to enable it.

#DYN_INIT_FUNCTIONS += ^dyn_init$


# Parameter ASSERT_FAIL_FUNCTIONS
#
# Purpose
#  Specifies functions that will be treated as assertions by the Not
#  Enough Assertions check
#
# Tags
#  - WARNING_SPECIAL_FUNCTIONS: Designates Specially-Treated
#    Functions
#  - WC_LANG.FUNCS.ASSERTS: Used by Not Enough Assertions
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  Calls to functions matching this regular expression are counted
#  as assertions.
#
# Notes
#  For example,
#    ASSERT_FAIL_FUNCTIONS += ^__assert_fail$
#  specifies that calls to __assert_fail() should be considered
#  assertions. Some systems implement the assert macro using
#  __assert_fail().
#
#  Note that the Not Enough Assertions check is disabled by default:
#  use a WARNING_FILTER rule to enable it.

#ASSERT_FAIL_FUNCTIONS += ^__assert_fail$
#ASSERT_FAIL_FUNCTIONS += ^__assert_func$
#ASSERT_FAIL_FUNCTIONS += ^__assert$
#ASSERT_FAIL_FUNCTIONS += ^_assert$
#ASSERT_FAIL_FUNCTIONS += ^assert$
#ASSERT_FAIL_FUNCTIONS += ^_wassert$


# Parameter SYSTEM_INCLUDE_PATHS
#
# Purpose
#  Specifies file system paths which contain system include headers.
#
# Tags
#  - ANALYSIS_FILTER: Analysis-Side Filtering
#
#  - WC_LANG.ID.NU.LIBFN: Used by Library Function Override
#
# Type
#  string
#
# Behavior
#  Any file matching any of these paths is excluded from computation
#  of metrics and checks for certain warning classes. Substring
#  match is used to match files to the specified system include
#  paths.
#
# Notes
#  Any line ending with a "\" is treated as a continuation - meaning
#  that the subsequent line will be concatenated with the current
#  line. To avoid this situation (e.g. for paths that actually end
#  in "\"), add whitespace after the "\" before the newline
#  character.
#
#  Checks for the following warning classes will always be excluded
#  from files matching any of these paths.
#
#  - Library Function Override
#
#  WARNING_FILTER discard rules can specify is_sysinclude to match
#  warnings whose Listing XML lies entirely within system include
#  files as designated by SYSTEM_INCLUDE_FILES.
#
#  For example, the factory settings for WARNING_FILTER include the
#  following rule: all warnings in C++ code whose Listing XML lies
#  entirely within system include files will be discarded. Note that
#  this rule does not affect warnings in C code.
#    WARNING_FILTER += discard language="C++" is_sysinclude

#SYSTEM_INCLUDE_PATHS += /codesonar/smel/
#SYSTEM_INCLUDE_PATHS += /codesonar/libmodels/
#SYSTEM_INCLUDE_PATHS += /csurf/csinclude/
#SYSTEM_INCLUDE_PATHS += /usr/include/
#SYSTEM_INCLUDE_PATHS += /usr/lib/
#SYSTEM_INCLUDE_PATHS += /usr/lib64/
#SYSTEM_INCLUDE_PATHS += /usr/local/include/
#SYSTEM_INCLUDE_PATHS += /usr/local/lib/
#SYSTEM_INCLUDE_PATHS += /usr/local/lib64/
#SYSTEM_INCLUDE_PATHS += /usr/sfw/include/
#SYSTEM_INCLUDE_PATHS += /usr/sfw/lib/
#SYSTEM_INCLUDE_PATHS += /opt/sfw/include/
#SYSTEM_INCLUDE_PATHS += /opt/sfw/lib/
#SYSTEM_INCLUDE_PATHS += /cygwin/lib/
#SYSTEM_INCLUDE_PATHS += /cygwin/local/lib/
#SYSTEM_INCLUDE_PATHS += /cygwin64/lib/
#SYSTEM_INCLUDE_PATHS += /cygwin64/local/lib/
#SYSTEM_INCLUDE_PATHS += :\Program Files\Microsoft
#SYSTEM_INCLUDE_PATHS += :\Program Files\Windows
#SYSTEM_INCLUDE_PATHS += :\Program Files\Freescale
#SYSTEM_INCLUDE_PATHS += :\Program Files\Metrowerks
#SYSTEM_INCLUDE_PATHS += :\Program Files\Intel
#SYSTEM_INCLUDE_PATHS += :\Program Files\ARM
#SYSTEM_INCLUDE_PATHS += :\Program Files\IAR
#SYSTEM_INCLUDE_PATHS += :\Program Files\Borland
#SYSTEM_INCLUDE_PATHS += :\Program Files\CodeGear
#SYSTEM_INCLUDE_PATHS += :\Program Files\Hi-Tech
#SYSTEM_INCLUDE_PATHS += :\CCStudio
#SYSTEM_INCLUDE_PATHS += :\WINCE
#SYSTEM_INCLUDE_PATHS += :\Keil
#SYSTEM_INCLUDE_PATHS += :\HEW
#SYSTEM_INCLUDE_PATHS += :\Borland
#SYSTEM_INCLUDE_PATHS += ARC\MetaWare
#SYSTEM_INCLUDE_PATHS += :\cygwin\usr\include\ 
#SYSTEM_INCLUDE_PATHS += :\cygwin\lib\ 
#SYSTEM_INCLUDE_PATHS += :\cygwin\local\lib\ 
#SYSTEM_INCLUDE_PATHS += :\cygwin64\usr\include\ 
#SYSTEM_INCLUDE_PATHS += :\cygwin64\lib\ 
#SYSTEM_INCLUDE_PATHS += :\cygwin64\local\lib\ 
#SYSTEM_INCLUDE_PATHS += \csurf\include\ 
#SYSTEM_INCLUDE_PATHS += \csurf\csinclude\ 
#SYSTEM_INCLUDE_PATHS += \codesonar\smel\ 
#SYSTEM_INCLUDE_PATHS += \codesonar\libmodels\ 
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\Microsoft
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\Windows
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\Freescale
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\Metrowerks
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\Intel
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\ARM
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\IAR
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\Borland
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\CodeGear
#SYSTEM_INCLUDE_PATHS += :\Program Files (x86)\Hi-Tech
#SYSTEM_INCLUDE_PATHS += /Developer/Headers/
#SYSTEM_INCLUDE_PATHS += /Developer/SDKs/
#SYSTEM_INCLUDE_PATHS += /Library/Frameworks/
#SYSTEM_INCLUDE_PATHS += /System/Library/
#SYSTEM_INCLUDE_PATHS += /opt/local/include/
#SYSTEM_INCLUDE_PATHS += /sw/include/
#SYSTEM_INCLUDE_PATHS += /usr/llvm-gcc-
#SYSTEM_INCLUDE_PATHS += codesonar_classfile_summaries
#SYSTEM_INCLUDE_PATHS += /qnx660/target/
#SYSTEM_INCLUDE_PATHS += /qnx660/host/
#SYSTEM_INCLUDE_PATHS += /qnx650/target/
#SYSTEM_INCLUDE_PATHS += /qnx650/host/


# Parameter ASSUME_UNDEFINED_PARAMETERS_MAYBE_FREED
# Parameter ASSUME_UNDEFINED_PARAMETERS_MAYBE_INITIALIZED
# Parameter ASSUME_UNDEFINED_PARAMETERS_MAYBE_MODIFIED
# Parameter ASSUME_FUNCPTR_PARAMETERS_MAYBE_FREED
# Parameter ASSUME_FUNCPTR_PARAMETERS_MAYBE_INITIALIZED
# Parameter ASSUME_FUNCPTR_PARAMETERS_MAYBE_MODIFIED
# Parameter ASSUME_VARARG_PARAMETERS_MAYBE_FREED
# Parameter ASSUME_VARARG_PARAMETERS_MAYBE_INITIALIZED
# Parameter ASSUME_VARARG_PARAMETERS_MAYBE_MODIFIED
# Parameter ASSUME_OTHER_PARAMETERS_MAYBE_FREED
# Parameter ASSUME_OTHER_PARAMETERS_MAYBE_INITIALIZED
# Parameter ASSUME_OTHER_PARAMETERS_MAYBE_MODIFIED
#
# Purpose
#  For cases where CodeSonar cannot determine this directly, these
#  parameters specify the effects that certain called functions may
#  be assumed to have on their parameters and memory locations that
#  are transitively reachable from those parameters (pointer
#  targets, structure fields, and so on).
#
# Type
#  { Yes, No }
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#  - WC_ALLOC.LEAK: Used by Leak
#  - WC_LANG.MEM.UVAR: Used by Uninitialized Variable
#
# Behavior
#  Each parameter specifies, for a single kind of function call,
#  whether CodeSonar can treat that call as if it may {free,
#  initialize, modify} one or more of its parameters {P} or the
#  memory locations transitively reachable from {P}.
#
#  The function call kinds are as follows.
#  - _UNDEFINED_ : a call to a function whose definition does not
#    appear in the analyzed project.
#  - _FUNCPTR_ : a call through a function pointer.
#  - _VARARG_ : a call to a variadic function. Note: the
#    ASSUME_VARARG_PARAMETERS_MAYBE_* rules control the treatment of
#    variadic arguments (those designated by '...' in the header)
#    only.
#  - _OTHER_ : other special cases. This designation includes
#    recursive calls and certain calls to functions whose analysis
#    was incomplete.
#
#  The effects are as follows, where {f} denotes all functions of
#  the kind under consideration and {T} denotes the set of arguments
#  to a function call along with all transitively reachable memory
#  locations.
#  - _MAYBE_FREED : if set to Yes, CodeSonar will treat all calls to
#    {f} as if they may free one or more of {T}. This can reduce the
#    incidence of Leak warnings. If set to No, CodeSonar will treat
#    all calls to {f} as if they do not free any of {T}.
#  - _MAYBE_INITIALIZED : if set to Yes, CodeSonar will treat all
#    calls to {f} as if they may initialize one or more of {T}. This
#    can reduce the incidence of Uninitialized Variable warnings. If
#    set to No, CodeSonar will treat all calls to {f} as if they do
#    not initialize any of {T}.
#  - _MAYBE_MODIFIED : if set to Yes, CodeSonar will treat all calls
#    to {f} as if they may modify one or more of {T}. This can
#    reduce the incidence of warnings from path-sensitive warning
#    classes such as Buffer Overrun, Division By Zero, and
#    Unreachable Code: 5 warning classes. If set to No, CodeSonar
#    will treat all calls to {f} as if they do not modify any of
#    {T}.
#
# Notes
#  For Yes settings, CodeSonar will make the associated assumptions
#  only when doing so allows it to avoid issuing a warning.
#
#  For example, suppose we have undefined function g() and are
#  analyzing the following code.
#    int funcA(){
#    char *p = malloc(5);
#    if (p) {g(p);}
#    return 1;
#    }
#    
#    int funcB(){
#    char *p = malloc(5);
#    if (p) {
#    g(p);
#    p++;
#    }
#    return 2;
#    }
#
#  With ASSUME_UNDEFINED_PARAMETERS_MAYBE_FREED=Yes, CodeSonar
#  assumes that...
#  - ...the call to g(p) in funcA frees p : no Leak warning,
#  - ...the call to g(p) in funcB does not free p : no Use After
#    Free warning (for example).
#
#  With ASSUME_UNDEFINED_PARAMETERS_MAYBE_FREED=No, CodeSonar must
#  treat both calls to g(p) as if they do not free p.
#  - funcA has a Leak warning,
#  - funcB does not have a Use After Free warning.
#
#  In general, Yes settings are likely to reduce the number of false
#  positive warnings, but may also cause true defects to be
#  overlooked.
#

#ASSUME_UNDEFINED_PARAMETERS_MAYBE_FREED = Yes
#ASSUME_UNDEFINED_PARAMETERS_MAYBE_INITIALIZED = Yes
#ASSUME_UNDEFINED_PARAMETERS_MAYBE_MODIFIED = Yes

#ASSUME_FUNCPTR_PARAMETERS_MAYBE_FREED = Yes
#ASSUME_FUNCPTR_PARAMETERS_MAYBE_INITIALIZED = Yes
#ASSUME_FUNCPTR_PARAMETERS_MAYBE_MODIFIED = Yes

#ASSUME_VARARG_PARAMETERS_MAYBE_FREED = Yes
#ASSUME_VARARG_PARAMETERS_MAYBE_INITIALIZED = Yes
#ASSUME_VARARG_PARAMETERS_MAYBE_MODIFIED = Yes

#ASSUME_OTHER_PARAMETERS_MAYBE_FREED = Yes
#ASSUME_OTHER_PARAMETERS_MAYBE_INITIALIZED = Yes
#ASSUME_OTHER_PARAMETERS_MAYBE_MODIFIED = Yes


# Parameter REACHABILITY_ROOTS
#
# Purpose
#  Specifies the procedures from which reachability information is
#  computed.
#
# Type
#  Procedure, as a string of the form "file:procedure" or
#  "file:linenum".
#
# Behavior
#  fname:XXXX is interpreted as follows.
#  - fname matches every file whose full path name has fname as a
#    suffix. Empty fname matches all files in the project.
#  - XXXX must be nonempty. If it is an integer, it is treated as a
#    line number and matches every procedure whose definition
#    includes line XXXX. If it is '*', it matches every procedure.
#    Otherwise, it matches every procedure whose
#    cs_pdg_friendly_name()
#    [doc/html/API/CAPI/cs__pdg_8h.html#func_cs_pdg_friendly_name]
#    is exactly XXXX.
#
#  If no REACHABILITY_ROOTS rules are specified (or some are
#  specified but the last one is "REACHABILITY_ROOTS= "), CodeSonar
#  treats all procedures as reachable.
#
# Notes
#
#  Reachability analysis results are used in the following contexts.
#  - WARNING_FILTER reachable rules
#  - the SKIP_ANALYSIS_OF UNREACHABLE_FUNCTIONS setting
#  - the procedures included in the GUI Explore Callers
#    [doc/html/GUI/GUI_Explore_Callers.html] display when "Show
#    Unreachable" is deselected
#  - C and C++ source coloring
#    [doc/html/GUI/SourceHyperlinking.html#c_col] in the CodeSonar
#    GUI
#  - [Binary analyses only] the SKIP_ANALYSIS_OF
#    UNREACHABLE_BINARY_FUNCTIONS setting.
#
#  CodeSonar will generate
#  - an alert [doc/html/GUI/GUI_Alerts.html] for each
#    REACHABILITY_ROOTS fname:XXXX rule that does not match at least
#    one procedure in the project.
#  - an alert [doc/html/GUI/GUI_Alerts.html] if there are one or
#    more WARNING_FILTER reachable rules, or SKIP_ANALYSIS_OF +=
#    UNREACHABLE_FUNCTIONS (or UNREACHABLE_BINARY_FUNCTIONS, for
#    binary analyses) is specified, but set REACHABLE_FROM_ROOTS
#    [#reachable_from_roots] is empty.
#  - an alert [doc/html/GUI/GUI_Alerts.html] if there are one or
#    more WARNING_FILTER reachable rules, or SKIP_ANALYSIS_OF +=
#    UNREACHABLE_FUNCTIONS is specified, but no procedures match the
#    specified REACHABILITY_ROOTS.
#  - an Analysis Log [doc/html/GUI/GUI_Log_Analysis.html] message
#    for each REACHABILITY_ROOTS fname:XXXX rule that matches more
#    than one procedure (these are permitted, but are logged in case
#    they were not intentional).
#
#  For a typical simple C program, we might be only interested in
#  reachability from main(), and consider any procedure that is not
#  [transitively] called by main() to be unreachable. For example:
#    REACHABILITY_ROOTS = main.c:main
#
#  Example 1: all of the following will match procedure main() in
#  file /home/me/myproject/src/main.c
#    REACHABILITY_ROOTS += :main
#    REACHABILITY_ROOTS += main.c:main
#    REACHABILITY_ROOTS += /main.c:main
#    REACHABILITY_ROOTS += myproject/src/main.c:main
#
#  Example 2: the following will match any procedure in every file
#  whose full path name has foo.c as a suffix.
#    REACHABILITY_ROOTS += foo.c:*
#
#  We define sets REACHABLE_FROM_ROOTS and
#  REACHABLE_FROM_ROOTS_EXTENDED.
#
#  [ANCHOR reachable_from_roots] REACHABLE_FROM_ROOTS is the set of
#  all procedures P such that:
#  - P matches a REACHABILITY_ROOTS rule, or
#  - P is called (directly or transitively) by a procedure that
#    matches a REACHABILITY_ROOTS rule.
#
#  If no REACHABILITY_ROOTS rules are specified (or some are
#  specified but the last one is "REACHABILITY_ROOTS= "), set
#  REACHABLE_FROM_ROOTS contains all procedures in the project.
#
#  In some cases, such as calls through function pointer variables,
#  CodeSonar may not correctly resolve all callees for a procedure.
#  This can result in procedures incorrectly being identified as
#  unreachable, which in turn can reduce the quality of CodeSonar
#  analysis results. The use of set REACHABLE_FROM_ROOTS_EXTENDED
#  represents a safeguard against such cases.
#
#  [ANCHOR reachable_from_roots_extended]
#  REACHABLE_FROM_ROOTS_EXTENDED is defined as follows. Let R be the
#  source procedure subset of REACHABLE_FROM_ROOTS, and let S be the
#  set of all source procedures in the analyzed project (for a
#  source-only analysis, all procedures are source procedures).
#  - If |R|/|S| is less than the value of parameter
#    SOURCE_MIN_REACHABLE_FROM_ROOTS, REACHABLE_FROM_ROOTS_EXTENDED
#    is the union of REACHABLE_FROM_ROOTS and S. CodeSonar will
#    issue an alert [doc/html/GUI/GUI_Alerts.html] to notify you
#    that it has made this determination.
#  - Otherwise, REACHABLE_FROM_ROOTS_EXTENDED is equal to
#    REACHABLE_FROM_ROOTS.
#
#  If one or more REACHABILITY_ROOTS rules are specified (and the
#  last one is NOT "REACHABILITY_ROOTS= "), and no procedure in the
#  project matches any REACHABILITY_ROOTS rule, set
#  REACHABLE_FROM_ROOTS will be empty and CodeSonar will issue
#  alerts as noted above.
#
#  If this occurs, you have several options.
#  - Adjust your REACHABILITY_ROOTS rules so that they match at
#    least one procedure in the project.
#  - Add a final rule "REACHABILITY_ROOTS= " so that all procedures
#    are treated as reachable.
#  - Remove any WARNING_FILTER reachable rules and SKIP_ANALYSIS_OF
#    UNREACHABLE_FUNCTIONS rules, if you no longer need them.


# Parameter HARDCODED_ARGS_REGEX
# Parameter HARDCODED_ARGS_LIST
# Parameter HARDCODED_ARGS_CLASS_NAME
# Parameter HARDCODED_ARGS_CATEGORIES
# Parameter HARDCODED_ARGS_BASE_RANK
# Parameter HARDCODED_ARGS_SIGNIFICANCE
#
# Purpose
#  Use the HARDCODED_ARGS_* family of parameters to define warning
#  classes that indicate the use of hardcoded arguments to functions
#  whose arguments should not be hardcoded.
#
# Type
#  - HARDCODED_ARGS_REGEX: Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#  - HARDCODED_ARGS_LIST: comma-separated list of numbers
#  - HARDCODED_ARGS_CLASS_NAME: string
#  - HARDCODED_ARGS_CATEGORIES: string
#  - HARDCODED_ARGS_BASE_RANK: number
#  - HARDCODED_ARGS_SIGNIFICANCE: { UNSPECIFIED, SECURITY,
#    RELIABILITY, REDUNDANCY, STYLE, DIAGNOSTIC }
#
# Behavior
#  These parameters are used together to specify functions with
#  arguments that should never be hardcoded, and warnings to issue
#  if hardcoded arguments are used.
#
#  - HARDCODED_ARGS_REGEX is a regular expression. Functions whose
#    name matches this expression will be included in the check.
#  - HARDCODED_ARGS_LIST are the positions (counting from 1) of the
#    arguments whose values should never be hardcoded.
#  - HARDCODED_ARGS_CLASS_NAME will be used as the warning class
#    name. If the message contains any characters that are special
#    to HTML, they must be HTML-encoded.
#  - HARDCODED_ARGS_CATEGORIES is the set of categories for the
#    warning, as a semicolon-separated list. This defaults to the
#    empty string.
#  - HARDCODED_ARGS_BASE_RANK is the base rank
#    [doc/html/Elements/PROPERTIES_Warning.html#base_rank] assigned
#    to the warning, with default 25.0.
#  - HARDCODED_ARGS_SIGNIFICANCE is a string representing the
#    Significance [doc/html/WarningClasses/Significance.html]
#    classification for this warning class.
#
# Notes
#  The HARDCODED_ARGS_CATEGORIES, HARDCODED_ARGS_BASE_RANK, and
#  HARDCODED_ARGS_SIGNIFICANCE settings are optional, but
#  HARDCODED_ARGS_REGEX and HARDCODED_ARGS_CLASS_NAME must be fully
#  specified. The HARDCODED_ARGS_REGEX message must come first, and
#  the HARDCODED_ARGS_CLASS_NAME second.
#
#  If two or more sets of HARDCODED_ARGS_* rules have the same
#  HARDCODED_ARGS_CLASS_NAME value, the same warning class will be
#  used to cover all cases. Therefore, sets of rules with the same
#  HARDCODED_ARGS_CLASS_NAME should also have the same
#  HARDCODED_ARGS_CATEGORIES and HARDCODED_ARGS_BASE_RANK values
#  (that is, they should only differ in the HARDCODED_ARGS_REGEX or
#  HARDCODED_ARGS_LIST settings).
#
#  Similarly, if a set of HARDCODED_ARGS_* rules has a
#  HARDCODED_ARGS_CLASS_NAME that is the same as the name of a
#  standard CodeSonar warning class, the category and rank settings
#  of the standard class will apply and any
#  HARDCODED_ARGS_CATEGORIES or HARDCODED_ARGS_BASE_RANK specified
#  in the set will not be used.
#
#  Example:
#    HARDCODED_ARGS_REGEX = ^crypt(_r)?$
#    HARDCODED_ARGS_LIST = 2
#    HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Salt
#    HARDCODED_ARGS_SIGNIFICANCE = SECURITY
#  specifies that the second argument to crypt() and crypt_r()
#  should not be hardcoded, and that warnings of class "Hardcoded
#  Crypto Salt" should be issued at locations where this constraint
#  is violated.
#

#HARDCODED_ARGS_REGEX = ^CreateProcessWithLogon(A|W)?$
#HARDCODED_ARGS_LIST = 1, 3
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^LogonUser(Ex|ExEx)?(A|W)?$
#HARDCODED_ARGS_LIST = 1, 3
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^CredUIPromptForCredentials(A|W)?$
#HARDCODED_ARGS_LIST = 5, 7
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^WNetAddConnection(A|W)?$
#HARDCODED_ARGS_LIST = 2
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^WNetAddConnection2?(A|W)?$
#HARDCODED_ARGS_LIST = 2, 3
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^WNetAddConnection3(A|W)?$
#HARDCODED_ARGS_LIST = 3, 4
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^ChangeAccountPassword(A|W)?$
#HARDCODED_ARGS_LIST = 3, 4, 5
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^SQLConnect(A|W|UNIX)?$
#HARDCODED_ARGS_LIST = 4, 6
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^WTSConnectSession(A|W)?$
#HARDCODED_ARGS_LIST = 3
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Authentication
#HARDCODED_ARGS_CATEGORIES = HARDCODED.AUTH;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^(ecb_|cbc_)?crypt(_r)?$
#HARDCODED_ARGS_LIST = 1
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^passwd2des$
#HARDCODED_ARGS_LIST = 1
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^x(en|de)crypt$
#HARDCODED_ARGS_LIST = 2
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^krb5_c_(en|de)crypt$
#HARDCODED_ARGS_LIST = 2
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^BF_set_key$
#HARDCODED_ARGS_LIST = 3
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^[dD][eE][sS]_set_key(_unchecked|_checked)?$
#HARDCODED_ARGS_LIST = 1
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^[dD][eE][sS]_string_to_key$
#HARDCODED_ARGS_LIST = 1
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^[dD][eE][sS]_string_to_2keys$
#HARDCODED_ARGS_LIST = 1
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^krb5_c_string_to_key$
#HARDCODED_ARGS_LIST = 3
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Key
#HARDCODED_ARGS_CATEGORIES = HARDCODED.KEY;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^[dD][eE][sS]_(f)?crypt$
#HARDCODED_ARGS_LIST = 2
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Salt
#HARDCODED_ARGS_CATEGORIES = HARDCODED.SALT;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^crypt(_r)?$
#HARDCODED_ARGS_LIST = 2
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Salt
#HARDCODED_ARGS_CATEGORIES = HARDCODED.SALT;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY

#HARDCODED_ARGS_REGEX = ^krb5_c_string_to_key$
#HARDCODED_ARGS_LIST = 4
#HARDCODED_ARGS_CLASS_NAME = Hardcoded Crypto Salt
#HARDCODED_ARGS_CATEGORIES = HARDCODED.SALT;CWE:547
#HARDCODED_ARGS_SIGNIFICANCE = SECURITY


# Parameter TAINT_HIGHLIGHTING
#
# Purpose
#  Enable taint highlighting
#  [doc/html/Elements/Taint.html#source_highlighting] in the hub
#  GUI.
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will perform taint propagation analysis, and
#    use the results of that analysis to highlight tainted values in
#    source code displayed in the hub GUI.
#
#  - No : CodeSonar will not perform taint propagation analysis, and
#    taint highlighting will not be available.
#
# Notes
#  Taint propagation analysis takes place in the pointer analysis
#  phase
#  [doc/html/Elements/PROPERTIES_Analysis.html#pointer_analysis].
#  Note that if TAINT_HIGHLIGHTING=No then taint propagation
#  analysis will not be performed even if pointer analysis passes
#  are being performed for the sake of resolving function pointers
#  (for FUNCTION_POINTER_RESOLUTION).
#
#  The extra information gained during taint propagation analysis
#  can also improve taint warnings in some cases.

#TAINT_HIGHLIGHTING = Yes


# Parameter FUNCTION_POINTER_RESOLUTION
#
# Purpose
#  Enable function pointer resolution.
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will perform function pointer resolution, with
#    the number of iterations bounded by
#    MAX_POINTER_ANALYSIS_PASSES.
#
#  - No : CodeSonar will not perform function pointer resolution.
#
# Notes
#  Function pointer resolution takes place in the pointer analysis
#  phase
#  [doc/html/Elements/PROPERTIES_Analysis.html#pointer_analysis].
#  Note that if FUNCTION_POINTER_RESOLUTION=No then function pointer
#  resolution will not be performed even if pointer analysis passes
#  are being performed for the sake of taint propagation analysis
#  (for TAINT_HIGHLIGHTING).
#
#  Setting this to Yes can improve CodeSonar results by permitting a
#  more precise analysis of behavior at function pointer call sites.

#FUNCTION_POINTER_RESOLUTION = Yes


# Parameter TAINT_TRIGGER_ON_GLOBALS
#
# Purpose
#  For the taint analysis, specifies whether global inputs to
#  procedures (as opposed to parameter inputs) should be checked for
#  taint, provided the procedure uses them in ways where they should
#  not be tainted.
#
# Type
#  { Yes, No }
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Behavior
#  - Yes : the taint analysis will check global inputs to prodedures
#    for taint.
#  - No : the taint analysis will not check global inputs to
#    prodedures for taint.
#
# Notes
#  Setting this to Yes can lead to scalability issues on large
#  projects.
#
#  This setting is analogous to MAX_GLOBAL_CHECK_AGE, but for taint,
#  and only has two possible settings (effectively 0 and unlimited).

#TAINT_TRIGGER_ON_GLOBALS = No


# Parameter TAINT_MAX_EXPRESSION_COMPLEXITY
#
# Purpose
#  For the taint analysis, a threshold for expression complexity.
#
# Type
#  integer
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Behavior
#  Information about expressions whose complexity exceeds this limit
#  is discarded.
#
# Notes
#  Expressions with more pointer dereferences and field/array
#  accesses have a higher complexity.
#
#  For the remainder of the analysis, expression complexity is
#  bounded instead by MAX_EXPRESSION_COMPLEXITY.
#

#TAINT_MAX_EXPRESSION_COMPLEXITY = 40


# Parameter TAINT_MAX_SET_CARDINALITY
#
# Purpose
#  For the taint analysis, specifies the maximum size of a points-to
#  set.
#
# Type
#  integer
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit

#TAINT_MAX_SET_CARDINALITY = 10


# Parameter TAINT_MAX_MODIFIED_VALUES
#
# Purpose
#  For the taint analysis, specifies a per-procedure bound on the
#  number of modified values (outputs and side effects) that
#  CodeSonar will keep track of in procedure summaries.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  If a procedure modifies more values than this maximum, CodeSonar
#  will select values to discard from the summaries for the
#  procedure to bring the total number of values tracked down to the
#  maximum. Increasing the value for this preference may allow more
#  precise analysis, at the cost of longer analysis time and higher
#  memory usage.
#
# Notes
#  The values modified by a procedure may include its return value,
#  parameters and values from its calling environment, and values
#  derived from these.
#
#  For the remainder of the analysis, the number of modified values
#  is bounded instead by MAX_MODIFIED_VALUES.
#

#TAINT_MAX_MODIFIED_VALUES = 100


# Parameter TAINT_MAX_CHECKED_INPUTS_PER_PROCEDURE
#
# Purpose
#  For the taint analysis, specifies how many inputs to a procedure
#  can be checked at call sites.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  A negative value indicates no limit. Lower (positive) values will
#  conserve disk space and time, but can cause false negatives.
#
# Notes
#  This bound may be useful for projects containing millions of
#  lines of code.
#
#  Checks for code nearer to the beginning of procedures receive
#  preferential treatment.
#
#  Both implicit and explicit inputs are counted. For example, both
#  the pointer passed to strlen() and the value pointed to by that
#  pointer are counted as inputs to strlen(). Global variables
#  transitively used by a procedure also qualify.
#
#  For the remainder of the analysis, the number of checked inputs
#  is bounded instead by MAX_CHECKED_INPUTS_PER_PROCEDURE.

#TAINT_MAX_CHECKED_INPUTS_PER_PROCEDURE = 100


# Parameter TAINT_MAX_CHECKED_LOCATIONS_PER_INPUT
#
# Purpose
#  For the taint analysis, specifies how many usages of a particular
#  input to a procedure can be checked at call sites.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  Lower values will conserve disk space and time, but can cause
#  false negatives.
#
# Notes
#  This bound may be useful for projects containing millions of
#  lines of code.

#TAINT_MAX_CHECKED_LOCATIONS_PER_INPUT = 50




# Parameter TAINT_MAX_CHECKED_TAINT_KINDS_PER_PROCEDURE
#
# Purpose
#  For the taint analysis, specifies the maximum number of taint
#  kinds for which there can be checks against a single procedure's
#  inputs.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  If a single procedure's inputs are checked against more than this
#  many individual taint kinds
#  [doc/html/C_Module/LibraryModels/TaintKinds.html] - either
#  directly in the procedure, or in its (transitive) callees -
#  CodeSonar will select taint sinks to discard in order to bring
#  the total number of taint kinds down to the specified limit.
#
#  Special values csonar_taint_source_any()
#  [doc/html/Extensions/Prototypes.html#csonar_taint_source_any] and
#  csonar_taint_source_any_no_kind()
#  [doc/html/Extensions/Prototypes.html#csonar_taint_source_any] are
#  each counted as one taint kind.
#
#  Setting TAINT_MAX_CHECKED_TAINT_KINDS_PER_PROCEDURE=0 will
#  discard all taint sinks, except for intraprocedural ones (which
#  do not typically exist).
#
# Notes
#  CodeSonar ships with 13 predefined taint kinds, plus special
#  values csonar_taint_source_any()
#  [doc/html/Extensions/Prototypes.html#csonar_taint_source_any] and
#  csonar_taint_source_any_no_kind()
#  [doc/html/Extensions/Prototypes.html#csonar_taint_source_any].
#  Any TAINT_MAX_CHECKED_TAINT_KINDS_PER_PROCEDURE setting higher
#  than 15 will therefore impose no restrictions on taint checking
#  (unless you have implemented additional custom taint kinds).

#TAINT_MAX_CHECKED_TAINT_KINDS_PER_PROCEDURE = 100


# Parameter TAINT_MAX_WARNING_PATH_LENGTH
#
# Purpose
#  For warnings implemented by taint analysis, specifies the maximum
#  number of program points along an execution path that will be
#  considered.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  Taint warnings traversing more than this many program points will
#  not be detected during refinement. Larger values may allow
#  warning refinement to use more time and detect longer warnings.

#TAINT_MAX_WARNING_PATH_LENGTH = 10000


# Parameter TAINT_MAX_SIMILAR_PATHS
#
# Purpose
#  Bounds the number of similar taint warnings that CodeSonar will
#  report. Only successfully refined warnings count against this
#  limit.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Notes
#  Most users will never need a setting higher than 1
#
#  This parameter can significantly affect performance.
#
#TAINT_MAX_SIMILAR_PATHS = 1


# Parameter TAINT_MAX_ATTEMPTED_SIMILAR_PATHS
#
# Purpose
#  Bounds the number of potentially similar taint warnings that
#  CodeSonar will attempt to refine. Both successfully refined
#  warnings and dismissed warnings count against this limit.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Notes
#  TAINT_MAX_SIMILAR_PATHS is similar to this except that it bounds
#  the number of reported taint warnings.
#  TAINT_MAX_ATTEMPTED_SIMILAR_PATHS should always be at least as
#  large as TAINT_MAX_SIMILAR_PATHS.
#
#TAINT_MAX_ATTEMPTED_SIMILAR_PATHS = 1


# Parameter DISABLED_TAINT_KINDS
#
# Purpose
#  Specifies a set of taint kinds that should be ignored by the
#  taint analysis.
#
# Type
#  string
#
# Tags
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Behavior
#  If the specified string matches the name of built in
#  [doc/html/C_Module/LibraryModels/TaintKinds.html] or user-defined
#  [doc/html/Extensions/Prototypes.html#CSONAR_DEFINE_TAINT_SOURCE]
#  taint kind, taint of that kind will be ignored by the analysis.
#
#  Certain warning classes rely on exactly one taint kind. For these
#  classes, CodeSonar enables or disables the relevant taint kind
#  automatically depending on whether or not the warning class is
#  enabled. Do not specify these taint kinds in DISABLED_TAINT_KINDS
#  rules: add_overflow, mult_overflow, sub_underflow,
#  truncation_overflow, lib_blacklist, proc_blacklist,
#  net_blacklist.
#
# Notes
#  Taint sinks can be enabled and disabled by using a WARNING_FILTER
#  rule, for example, to disable specific warning classes or
#  warnings reported at certain locations. DISABLED_TAINT_KINDS can
#  be used to control which taint sources are enabled, at a coarse
#  granularity.
#
#  This setting might be used to disable taint kinds that are
#  trusted in the context of the subject software. For example,
#  suppose we have this code:
#    system(getenv("FOO"));
#
#  CodeSonar would, by default, issue a Command Injection warning.
#  However, perhaps this warning is undesirable because, in this
#  context, the environment is trusted. You can disable environment
#  taint to suppress this and other similar warnings:
#    DISABLED_TAINT_KINDS += environment
#
#
#  The following taint kinds are enabled by default.
#    DISABLED_TAINT_KINDS += dns
#    DISABLED_TAINT_KINDS += environment
#    DISABLED_TAINT_KINDS += fd
#    DISABLED_TAINT_KINDS += file
#    DISABLED_TAINT_KINDS += file_metadata
#    DISABLED_TAINT_KINDS += network
#    DISABLED_TAINT_KINDS += registry

#DISABLED_TAINT_KINDS += time



# Parameter MAX_ALLOCATION_SIZE
#
# Purpose
#  Specifies the largest allocation size that can be successfully
#  satisfied on the target platform.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#
# Type
#  non-negative integer
#
# Behavior
#  The CodeSonar analysis will assume that no heap allocation
#  requests for more than this number of bytes can succeed.
#
#  Specifying 0, or values larger than 2^31-1, has no effect.
#
# Notes
#  An additional consequence of setting MAX_ALLOCATION_SIZE=X (for
#  some non-negative integer X) is that strlen() cannot return
#  values larger than X.
#
#  Setting MAX_ALLOCATION_SIZE to a suitable non-zero value can be
#  useful to suppress some warnings that might only be possible if
#  the program has already run out of memory.

#MAX_ALLOCATION_SIZE = 1073741824


# Parameter OVERFLOWN_SIZE_UPPER_BOUND
#
# Purpose
#  Specifies an upper bound on the allowed "size" in some integer
#  overflow warning classes. If the resulting "size" will always
#  exceed the upper bound, then the warning will be dropped.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#  - WC_ALLOC.SIZE.ADDOFLOW: Used by Addition Overflow of Allocation
#    Size
#  - WC_ALLOC.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Allocation Size
#  - WC_ALLOC.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Allocation Size
#  - WC_ALLOC.SIZE.TRUNC: Used by Truncation of Allocation Size
#  - WC_MISC.MEM.SIZE.ADDOFLOW: Used by Addition Overflow of Size
#  - WC_MISC.MEM.SIZE.MULOFLOW: Used by Multiplication Overflow of
#    Size
#  - WC_MISC.MEM.SIZE.SUBUFLOW: Used by Subtraction Underflow of
#    Size
#  - WC_MISC.MEM.SIZE.TRUNC: Used by Truncation of Size
#
# Type
#  non-negative integer
#
# Behavior
#  Can be useful if reviewers are not interested in overflow
#  warnings that would always result in very large (e.g.,
#  unsatisfiable) allocation requests, for example.
#
# Notes
#  Due to analysis engine limitations, values larger than 2^31-1
#  will be ignored. Furthermore, values less than (2^31-1)/8 are not
#  effective w.r.t. strlen and similar. These limitations may be
#  addressed in the future.
#
#  This check is always performed against the least significant 32
#  bits of the size using an unsigned interpretation. This
#  shortcoming may be fixed in the future, and probably means the
#  feature will only work well with 32-bit targets for now.
#
## OVERFLOWN_SIZE_UPPER_BOUND = 1073741824 # 1GB


# Parameter DIV_OVERFLOW_CRASHES
#
# Purpose
#  Specifies whether signed integer division overflow (e.g., -1 /
#  MIN_INT) should be treated as if it terminates execution, when
#  using 32-bit or wider division.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#
# Type
#  { Yes, No }
#
# Behavior
#  Setting this to Yes can allow CodeSonar to rule out certain
#  warnings that might only be possible in the presence of division
#  overflow. This setting rarely matters.
#
# Notes
#  The C language leaves behavior undefined. In practice, Intel
#  hardware raises an exception similar to a division by zero. sparc
#  hardware will silently evaluate to -1/MIN_INT to 0x80000001.
#  Other hardware may behave differently.
#
#DIV_OVERFLOW_CRASHES = Yes


# Parameter DIV_BY_ZERO_CRASHES
#
# Purpose
#  Specifies whether integer division by zero terminates execution
#  or merely results in an unknown value.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will treat division by zero as a crashing bug.
#    In particular, the analysis will deduce that if execution
#    continues after a division operation, the divisor cannot have
#    been zero. This can eliminate some false positives.
#  - No : CodeSonar will treat division by zero as an operation that
#    results in an unknown value.
#
# Notes
#  The vast majority of environments will terminate execution on
#  division by zero.

#DIV_BY_ZERO_CRASHES = Yes


# Parameter NULL_POINTER_DEREF_CRASHES
#
# Purpose
#  Specifies whether dereferences of addresses below the
#  NULL_POINTER_THRESHOLD will terminate execution.
#
# Tags
#  - WARNING_THRESHOLD: Warning-Class-Specific Settings
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will treat null pointer dereferences (defined
#    as dereferences of addresses below the NULL_POINTER_THRESHOLD)
#    as crashing bugs. In particular, the analysis will deduce that
#    if execution continues after a pointer dereference, the pointer
#    cannot have been NULL. This can eliminate some false positives.
#  - No : CodeSonar will not impose constraints on the pointer value
#    as a consequence of dereferencing it.
#
# Notes
#  Some embedded environments may allow dereferencing of NULL.
#
#  We do not recommend setting this to No as it may produce
#  confusing results or false positives, such as the following
#  division by zero:
#
#    p = unknown_value();
#    if( rand() ) {
#    *p = 42;
#    j = 0;
#    } else { j = 1; }
#    if( !p ) j = 1 / j;

#NULL_POINTER_DEREF_CRASHES = Yes


# Parameter JAVA_FLAGS_PREPEND
#
# Purpose
#  Modify the set of options being passed to the Java build/analysis
#  [doc/html/Java_Module/Building/Building.html].
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of Java build options
#  [doc/html/Java_Module/Building/JavaBuildOptions.html]
#
# Behavior
#  The specified options will be prepended to the set of options
#  passed to the Java build/analysis
#  [doc/html/Java_Module/Building/Building.html].
#
# Notes
#  The += operator will actually prepend to this preference (in all
#  cases except for other parameters with names of the form
#  *_PREPEND, the += operator appends). This means that if you
#  specify two JAVA_FLAGS_PREPEND+= settings, the options in the
#  second rule will be prepended to the options in the first
#  setting.

#JAVA_FLAGS_PREPEND +=


# Parameter JAVA_FLAGS_APPEND
#
# Purpose
#  Modify the set of options being passed to the Java build/analysis
#  [doc/html/Java_Module/Building/Building.html].
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of Java build options
#  [doc/html/Java_Module/Building/JavaBuildOptions.html]
#
# Behavior
#  The specified options will be appended to the set of options
#  passed to the Java build/analysis
#  [doc/html/Java_Module/Building/Building.html].

#JAVA_FLAGS_APPEND +=


# Parameter JAVA_ENABLE_FINDBUGS
#
# Purpose
#  Specifies whether or not FindBugs will be run by default during
#  Java analyses.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : FindBugs will be run during Java analyses, unless build
#    option -disable-findbugs is specified (through
#    JAVA_FLAGS_APPEND or JAVA_FLAGS_PREPEND).
#  - No : FindBugs will not be run during Java analyses.
#  - unspecified : FindBugs will not be run during Java analyses.

#JAVA_ENABLE_FINDBUGS = Yes


# Parameter JAVA_ENABLE_PMD
#
# Purpose
#  Specifies whether or not PMD will be run by default during Java
#  analyses.
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : PMD will be run during Java analyses, unless build option
#    -disable-pmd is specified (through JAVA_FLAGS_APPEND or
#    JAVA_FLAGS_PREPEND).
#  - No : PMD will not be run during Java analyses.
#  - unspecified : PMD will not be run during Java analyses.

#JAVA_ENABLE_PMD = Yes


# Parameter CSHARP_FLAGS_PREPEND
#
# Purpose
#  Modify the set of options being passed to the C# build/analysis
#  [doc/html/Csharp_Module/Building/Building.html].
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of C# build options
#  [doc/html/Csharp_Module/Building/CsharpBuildOptions.html]
#
# Behavior
#  The specified options will be prepended to the set of options
#  passed to the Java build/analysis
#  [doc/html/Java_Module/Building/Building.html].
#
# Notes
#  The += operator will actually prepend to this preference (in all
#  cases except for other parameters with names of the form
#  *_PREPEND, the += operator appends). This means that if you
#  specify two CSHARP_FLAGS_PREPEND+= settings, the options in the
#  second rule will be prepended to the options in the first
#  setting.

#CSHARP_FLAGS_PREPEND +=


# Parameter CSHARP_FLAGS_APPEND
#
# Purpose
#  Modify the set of options being passed to the C# build/analysis
#  [doc/html/Csharp_Module/Building/Building.html].
#
# Tags
#  - BUILD_BEHAVIOR: Governs the Build/Analysis
#
# Type
#  a list of C# build options
#  [doc/html/Csharp_Module/Building/CsharpBuildOptions.html]
#
# Behavior
#  The specified options will be appended to the set of options
#  passed to the C# build/analysis
#  [doc/html/Csharp_Module/Building/Building.html].

#CSHARP_FLAGS_APPEND +=


# Parameter MAX_POINTER_ANALYSIS_PASSES
#
# Purpose
#  Specifies an upper bound on the number of analysis passes that
#  will take place in the pointer analysis phase
#  [doc/html/Elements/PROPERTIES_Analysis.html#pointer_analysis].
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  positive integer
#
# Behavior
#  Depends on the settings of TAINT_HIGHLIGHTING and
#  FUNCTION_POINTER_RESOLUTION.
#  - If one or both are set to Yes : the pointer analysis phase will
#    stop after this many passes, or after pointer analysis results
#    converge - whichever occurs first.
#  - If both are set to No: the CodeSonar analysis will not include
#    a pointer analysis phase, regardless of the setting of
#    MAX_POINTER_ANALYSIS_PASSES.
#
# Notes
#  CodeSonar uses pointer analysis to obtain information about:
#  - function pointer resolution (including virtual function
#    dispatch), and
#  - taint propagation.
#
#  Pointer analysis can have high time cost, and there are generally
#  diminishing returns as the number of passes increases.
#  - Only one pass is required if the program does not use function
#    pointers: this single pass is sufficient for taint analysis.
#  - Two or three passes will be sufficient for most programs that
#    use function pointers.
#  - Very few programs will require more than 10 passes.

#MAX_POINTER_ANALYSIS_PASSES = 2


# Parameter TAINTED_BUF_TRIGGER_ON_UNKNOWN_BUFFERS
#
# Purpose
#  Specifies whether CodeSonar will issue Tainted Buffer Access
#  warnings when the accessed buffer cannot be identified (and so
#  its size cannot be determined).
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#  - WC_LANG.MEM.TBA: Used by Tainted Buffer Access
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will issue Tainted Buffer Access warnings if
#    the size of the accessed buffer cannot be determined and the
#    access location is tainted, or if the size of the accessed
#    buffer can be determined and the access location is tainted and
#    may lie outside the buffer.
#  - No : CodeSonar will only issue Tainted Buffer Access warnings
#    if the size of the accessed buffer can be determined and the
#    tainted access location may lie outside the buffer.
#
# Notes
#  For example, CodeSonar will only issue a Tainted Buffer Access
#  warning for the following code fragment if
#  TAINTED_BUF_TRIGGER_ON_UNKNOWN_BUFFERS=Yes.
#    p = undefined_function();
#    p[getchar()] = 42;
#  Setting TAINTED_BUF_TRIGGER_ON_UNKNOWN_BUFFERS=Yes will
#  potentially generate a large number of false positive Tainted
#  Buffer Access warnings.

#TAINTED_BUF_TRIGGER_ON_UNKNOWN_BUFFERS = No


# Parameter GLOBAL_TAINT_MODE
#
# Purpose
#  Specifies how taint propagates through global variables.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  {None, Context_Insensitive, Context_Sensitive}
#
# Behavior
#  - None : the analysis will not propagate taint through globals
#    from callers to callees.
#  - Context_Sensitive : the analysis will propagate taint through
#    globals from callers to callees, but will likely drop taint if
#    is propagated down too many calls.
#  - Context_Insensitive : the analysis will propagate more taint
#    through globals from callers to callees than it will for the
#    Context_Sensitive setting, but the propagation may be
#    imprecise. This setting tends to produce many false positives
#    in programs with tainted globals.
#
# Notes
#  None and Context_Sensitive are essentially equivalent for the
#  purposes of reporting taint warnings. The primary advantage of
#  Context_Sensitive over None will be more taint marking
#  [doc/html/GUI/SourceHyperlinking.html#tainted] in the GUI.
#
#  Setting TAINT_TRIGGER_ON_GLOBALS to Yes will cause more taint
#  warnings to be emitted against global variables when
#  GLOBAL_TAINT_MODE=None or GLOBAL_TAINT_MODE=Context_Sensitive.

#GLOBAL_TAINT_MODE = None


# Parameter GLOBAL_FUNCTION_POINTER_MODE
#
# Purpose
#  Specifies whether and how the CodeSonar analysis will propagate
#  function pointers through global variables.
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  {None, Context_Insensitive, Context_Sensitive}
#
# Behavior
#  - None : the analysis will not propagate function pointers
#    through globals from callers to callees.
#  - Context_Sensitive : the analysis will propagate function
#    pointers through globals from callers to callees, but will
#    likely drop points-to facts if they are propagated down too
#    many calls.
#  - Context_Insensitive : the analysis will propagate more function
#    pointers through globals from callers to callees than it will
#    for the Context_Sensitive setting, but the propagation may be
#    imprecise.

#GLOBAL_FUNCTION_POINTER_MODE = Context_Insensitive


# Parameter RELAXED_TOPDOWN_FUNCPTR_RESOLUTION
#
# Purpose
#  Specifies whether or not CodeSonar can immediately exploit
#  knowledge of function pointer resolvents that might not be known
#  when using other possible parallel analysis schedules.
#
#
# Tags
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will take advantage of function pointer
#    resolvents as soon as they are discovered.
#  - No : CodeSonar will ignore this information until the next
#    pointer analysis pass.
#
# Notes
#  This setting is a trade off between determinism and analysis
#  accuracy. A setting of Yes will produce fewer false negatives but
#  can introduce nondeterminism into parallel analyses.
#
#  A setting of Yes allows CodeSonar to learn more about the program
#  in fewer pointer analysis passes. However, a setting of Yes may
#  also cause non-deterministic behavior for parallel analyses. A
#  higher setting for MAX_POINTER_ANALYSIS_PASSES may be required to
#  get equivalent results when
#  RELAXED_TOPDOWN_FUNCPTR_RESOLUTION=No.

#RELAXED_TOPDOWN_FUNCPTR_RESOLUTION = Yes


# Parameter TAINT_RANK_BONUS
#
# Purpose
#  Specifies whether to adjust the rank
#  [doc/html/Elements/PROPERTIES_Warning.html#rank] of a warning if
#  values relevant to the warning are tainted.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : if one or more values relevant to a warning are tainted,
#    the warning rank computation will be adjusted to a smaller
#    value (that is, one that indicates that the warning should be
#    reviewed earlier). The magnitude of the adjustment is
#    proportional to the number of relevant values that are tainted.
#  - No : The warning rank will not be affected by the presence or
#    absence of taint.
#
# Notes
#  This parameter has no effect unless the taint propagation
#  analysis is enabled with TAINT_HIGHLIGHTING=Yes. The cost can be
#  as much as 20 percent of overall analysis time.

#TAINT_RANK_BONUS = No


# Parameter TAINT_SEARCH_BOUND
#
# Purpose
#  Bound for searching paths during taint refinement.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  When the number is larger, more paths are searched, but more time
#  is used.
#
# Notes
#  This preference represents a trade-off between time and
#  thoroughness.

#TAINT_SEARCH_BOUND = 100


# Parameter TAINT_CALLSITE_EXPANSION_EFFORT
#
# Purpose
#  Bound effort for expanding callsites during taint refinement.
#
# Tags
#  - ANALYSIS_BOUND: Analysis resource/effort limit
#
# Type
#  integer
#
# Behavior
#  When the number is larger, more paths are searched, but more time
#  is used.
#
# Notes
#  This preference represents a trade-off between time and
#  thoroughness.

#TAINT_CALLSITE_EXPANSION_EFFORT = 1000


# Parameter BOOL_TYPES
#
# Purpose
#  Specifies a set of types and values that are to be considered as
#  Boolean for the purpose of the Misra C checks.
#
# Tags
#
# Type
#  A whitespace separated list of triples of the form
#    <typename>,<truename>,<falsename>
#  where:
#  - <typename> is the name of the Boolean type
#  - <truename> is the name of the true value for type <typename>
#  - <falsename> is the name of the false value for type <typename>
#
# Notes
#  For example, if your program has the following:
#    typedef unsigned char bool;
#    const bool true = 1;
#    const bool false = 0;
#  you would use
#    BOOL_TYPES += bool,true,false
#
#  The += operator can be used to specify multiple triples.
#
## BOOL_TYPES += bool,true,false
## BOOL_TYPES += bool_t,true,false

#BOOL_TYPES =


# Parameter UNIT_OF_WORK_ISOLATION
#
# Purpose
#  Specifies whether or not each analysis slave should only perform
#  one unit of work.
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : An analysis slave will always exit once it has performed
#    one unit of work.
#  - No : There is no upper bound on the number of units of work
#    that a slave may perform.
#
#  In either case an analysis slave will also exit if
#  ANALYSIS_SLAVE_TIMEOUT is reached, the analysis phase ends, or
#  the slave is manually shut down.
#
# Notes
#  This is useful for debugging CodeSonar in some cases or CodeSonar
#  plugins.

#UNIT_OF_WORK_ISOLATION = No


# Parameter UNINITIALIZED_GLOBALS
#
# Purpose
#  Specifies whether global variables without explicit
#  initialization should be treated as uninitialized and therefore
#  subject to Uninitialized Variable warnings.
#
# Tags
#  - WC_LANG.MEM.UVAR: Used by Uninitialized Variable
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : Uninitialized Variable warnings can be issued on global
#    variables that are used before being explicitly initialized.
#  - No : Global and static variables without explicit
#    initialization are assumed to be implicitly zero-initialized.
#
# Notes
#  All C and C++ language standards stipulate that global and static
#  variables without explicit initialization should be implicitly
#  zero initialized. However, if your codebase strives to never rely
#  on this, or you are in an environment that does not initialize
#  such variables, then setting UNINITIALIZED_GLOBALS=Yes might be
#  useful.
#
#  If this parameter is set to Yes, you will need to adjust several
#  other parameters to accommodate the additional checking. This
#  will incur significant cost. On large programs, the analysis
#  might not run in a reasonable amount of time anymore, depending
#  on how high these settings are raised.
#  - Increase MAX_MODIFIED_VALUES so that it is more than double the
#    number of global variables in your program.
#  - Increase MAX_CHECKED_INPUTS_PER_PROCEDURE so that it is more
#    than double the number of global variables in your program.
#  - You may also wish to increase MAX_GLOBAL_CHECK_AGE: uses of
#    uninitialized variables at call stack depths deeper than
#    MAX_GLOBAL_CHECK_AGE will not be detected.

#UNINITIALIZED_GLOBALS = No


# Parameter ASSIGN_COND_MODE
#
# Purpose
#  Determines the scenarios under which Assignment in Conditional
#  warnings are generated.
#
# Tags
#  - WC_LANG.STRUCT.CONDASSIG: Used by Assignment in Conditional
#  - ANALYSIS_PROPERTY: Analysis Properties
#
# Type
#  {All, Var_and_const, Const_only}
#
# Behavior
#  - All : Assignment in Conditional warnings are reported for any
#    assignment inside a conditional statement, including assigning
#    the result of a function call.
#  - Var_and_const : Warnings are reported only for assignments
#    where the right hand side is either a variable or a constant
#    value.
#  - Const_only : Warnings are reported only for assignments where
#    the right hand side is a constant value.
#

#ASSIGN_COND_MODE = Const_only


# Parameter MAX_PERCENT_F_CHARACTERS
#
# Purpose
#  Maximum number of characters that %f in printf-family functions
#  will expand to, not including the decimal point or the minus
#  sign.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  integer
#
# Behavior
#  When the number is larger, it will be assumed that uses of %f in
#  sprintf-like functions might print up to this many characters.
#
# Notes
#  The factory setting has been experimentally verified as the
#  largest number of digits common printf implementations will
#  render for a 64-bit double.
#
#  Some potential Buffer Overrun warnings can depend on this
#  setting.

#MAX_PERCENT_F_CHARACTERS = 309


# Parameter MAX_PERCENT_LF_CHARACTERS
#
# Purpose
#  Maximum number of characters that %lf in printf-family functions
#  will expand to, not including the decimal point or the minus
#  sign.
#
# Tags
#  - LANGUAGE_TREATMENT: Treatment of Language Constructs
#
# Type
#  integer
#
# Behavior
#  When the number is larger, it will be assumed that uses of %lf in
#  sprintf-like functions might print up to this many characters.
#
# Notes
#  The factory setting has been experimentally verified as the
#  largest number of digits common printf implementations will
#  render for an 80-bit double.
#
#  Some potential Buffer Overrun warnings can depend on this
#  setting.

#MAX_PERCENT_LF_CHARACTERS = 4933


# Parameter SIGNIFICANCE_LEN_EXTERN
#
# Purpose
#  Specifies the number of characters in which global identifiers
#  should be considered to be significant.
#
# Tags
#  - WC_LANG.ID.ND.EXT: Used by Non-distinct Identifiers: External
#    Names
#
# Type
#  integer
#
# Behavior
#  - 0 : All characters must differ for the identifiers to be
#    considered distinct.
#  - N (for N>0) : Identifiers must differ in the first N characters
#    to be considered distinct.
#  - -1 : The value is determined based on which version of the C or
#    C++ standard is being used to parse the file.
#
# Notes
#  If unspecified, or if the value is -1, the analysis will attempt
#  to determine which version of the C or C++ standard is explicitly
#  used, and the values are set based on that:
#  - C90 or C94: 6
#  - C99: 31
#  - C++: 2047
#  - all other cases: 31
#
#  See also SIGNIFICANCE_LEN_MACRO, SIGNIFICANCE_LEN_OTHER.

## SIGNIFICANCE_LEN_EXTERN = -1


# Parameter SIGNIFICANCE_LEN_MACRO
#
# Purpose
#  Specifies the number of characters in which macros should be
#  considered to be significant.
#
# Tags
#  - WC_LANG.ID.ND.MM: Used by Non-distinct Identifiers: Macro/Macro
#  - WC_LANG.ID.ND.MO: Used by Non-distinct Identifiers: Macro/Other
#
# Type
#  integer
#
# Behavior
#  - 0 : All characters must differ for the identifiers to be
#    considered distinct.
#  - N (for N>0) : Identifiers must differ in the first N characters
#    to be considered distinct.
#  - -1 : The value is determined based on which version of the C or
#    C++ standard is being used to parse the file.
#
# Notes
#  If unspecified, or if the value is -1, the analysis will attempt
#  to determine which version of the C or C++ standard is explicitly
#  used, and the values are set based on that:
#  - C90 or C94: 31
#  - C99: 63
#  - C++: 2047
#  - all other cases: 31
#
#  See also SIGNIFICANCE_LEN_EXTERN, SIGNIFICANCE_LEN_OTHER.

## SIGNIFICANCE_LEN_MACRO = -1


# Parameter SIGNIFICANCE_LEN_OTHER
#
# Purpose
#  Specifies the number of characters in which identifiers other
#  than globals or macros should be considered to be significant.
#
# Tags
#  - WC_LANG.ID.ND.NEST: Used by Non-distinct Identifiers: Nested
#    Scope
#  - WC_LANG.ID.ND.SS: Used by Non-distinct Identifiers: Same Scope
#
# Type
#  integer
#
# Behavior
#  - 0 : All characters must differ for the identifiers to be
#    considered distinct.
#  - N (for N>0) : Identifiers must differ in the first N characters
#    to be considered distinct.
#  - -1 : The value is determined based on which version of the C or
#    C++ standard is being used to parse the file.
#
# Notes
#  If unspecified, or if the value is -1, the analysis will attempt
#  to determine which version of the C or C++ standard is explicitly
#  used, and the values are set based on that:
#  - C90 or C94: 31
#  - C99: 63
#  - C++: 2047
#  - all other cases: 31
#
#  See also SIGNIFICANCE_LEN_EXTERN, SIGNIFICANCE_LEN_MACRO.

## SIGNIFICANCE_LEN_OTHER = -1


# Parameter UNFINISHED_CODE_TAGS
#
# Tags
#  - WC_LANG.COMM.TODO: Used by Comment Suggests Code Unfinished
#
# Purpose
#  Specifies tags that are considered indicators that the code is
#  incomplete.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  If any line of a comment contains text that matches any of these
#  regular expressions, a Comment Suggests Code Unfinished warning
#  will be issued. The pattern matches are attempted in order of
#  occurrence and only the first successful match is reported.
#
# Notes
#  For example, Comment Suggests Code Unfinished warnings will be
#  reported on lines 1 and 4 of the following code fragment.
#
#    /* 1 */  /* TODO: complete before release */
#    /* 2 */  void incomplete(void)
#    /* 3 */  {
#    /* 4 */    // FIXME: to be implemented later
#    /* 5 */  }

#UNFINISHED_CODE_TAGS += FIXME
#UNFINISHED_CODE_TAGS += TODO
#UNFINISHED_CODE_TAGS += \\todo
#UNFINISHED_CODE_TAGS += @todo
#UNFINISHED_CODE_TAGS += \\bug
#UNFINISHED_CODE_TAGS += @bug
#UNFINISHED_CODE_TAGS += XXX

# Parameter BAD_MACRO_CLASS
# Parameter BAD_MACRO_NAME
# Parameter BAD_MACRO_FILENAME
# Parameter BAD_MACRO_CATEGORIES
# Parameter BAD_MACRO_BASE_RANK
# Parameter BAD_MACRO_INFO
# Parameter BAD_MACRO_LINK
# Parameter BAD_MACRO_SIGNIFICANCE
#
# Purpose
#  Use the BAD_MACRO_* family of parameters to define warning
#  classes that indicate the use of specific (prohibited) macros.
#
# Tags
#  - WARNING_SPECIAL_MACROS: Designates Specially-Treated Macros
#
# Type
#  - BAD_MACRO_CLASS: string
#  - BAD_MACRO_NAME: Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#  - BAD_MACRO_FILENAME: Boost 'POSIX Extended Regular Expression'
#    [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#  - BAD_MACRO_CATEGORIES: string
#  - BAD_MACRO_BASE_RANK: number
#  - BAD_MACRO_INFO: string
#  - BAD_MACRO_LINK: string representing a URL
#  - BAD_MACRO_SIGNIFICANCE: { UNSPECIFIED, SECURITY, RELIABILITY,
#    REDUNDANCY, STYLE, DIAGNOSTIC }
#
# Behavior
#  These parameters are used together to specify bad macros to check
#  for and warnings to issue when those macros occur.
#  - BAD_MACRO_CLASS will be used as the warning class name. If the
#    message contains any characters that are special to HTML, they
#    must be HTML-encoded.
#  - BAD_MACRO_NAME is a regular expression. If a macro that matches
#    this is used, then the warning may be issued. If unspecified,
#    any macro name will match. At least one of BAD_MACRO_NAME and
#    BAD_MACRO_FILENAME must be specified.
#  - BAD_MACRO_FILENAME is a regular expression. If the macro is
#    defined in a file whose name matches this expression, then the
#    warning may be issued. If unspecified, any file name will
#    match. At least one of BAD_MACRO_NAME and BAD_MACRO_FILENAME
#    must be specified.
#  - BAD_MACRO_CATEGORIES is the set of categories for the warning,
#    as a semicolon-separated list. This defaults to the empty
#    string.
#  - BAD_MACRO_BASE_RANK is the base rank
#    [doc/html/Elements/PROPERTIES_Warning.html#base_rank] assigned
#    to the warning, with default 15.0.
#  - BAD_MACRO_INFO will be used in the warning description box
#    [doc/html/GUI/GUI_Warning_Report_Annotations.html#endbox]
#    sentence, where occurrences of <macroname/> are replaced by the
#    name of the macro, and <filename/> is replaced by the name of
#    the file in which the macro was defined. The default value is
#    "'Use of macro <macroname/> is not recommended because it is
#    correlated with security or safety defects." Use
#    <paragraph></paragraph> to delimit paragraphs. Use <link
#    url="linkURL">linktext</link> to link "linktext" to linkURL.
#  - BAD_MACRO_LINK specifies a URL for further information. Values
#    beginning with "#' are interpreted relative to the CodeSonar
#    manual root. If a value is specified, CodeSonar will append
#    'See <a href="...">here</a> for more information.' to the text
#    in the warning description box
#    [doc/html/GUI/GUI_Warning_Report_Annotations.html#endbox]. If
#    no value is specified, and BAD_MACRO_INFO is also not
#    specified, CodeSonar will look for a category beginning with
#    "BADMACRO" in the BAD_MACRO_CATEGORIES list. If there is such a
#    category, CodeSonar will add the "See here..." sentence with a
#    link to the corresponding warning class page.
#  - BAD_MACRO_SIGNIFICANCE is a string representing the
#    Significance [doc/html/WarningClasses/Significance.html]
#    classification for this warning class.
#
# Notes
#
#  If two or more sets of BAD_MACRO_* rules have the same
#  BAD_MACRO_CLASS value, the same warning class will be used to
#  cover all cases. Therefore, sets of rules with the same
#  BAD_MACRO_CLASS should also have the same BAD_MACRO_CATEGORIES,
#  BAD_MACRO_INFO, and BAD_MACRO_BASE_RANK values (that is, they
#  should only differ in the BAD_MACRO_NAME and BAD_MACRO_FILENAME
#  setting).
#
#  Similarly, if a set of BAD_MACRO_* rules has a BAD_MACRO_CLASS
#  that is the same as the name of a standard CodeSonar warning
#  class, the category and base rank settings of the standard class
#  will apply and any BAD_MACRO_CATEGORIES or BAD_MACRO_BASE_RANK
#  specified in the set will not be used.
#
#  Examples:
#    BAD_MACRO_CLASS = Use of Forbidden Macro
#    BAD_MACRO_NAME = ^MAX$
#    BAD_MACRO_INFO = MAX is bad
#    BAD_MACRO_NAME = ^MIN$
#    BAD_MACRO_INFO = MIN is bad
#    BAD_MACRO_BASE_RANK = 1.0
#    BAD_MACRO_SIGNIFICANCE = RELIABILITY
#
#  specifies a single warning class that will trigger if a macro
#  named either MAX or MIN defined in any file are used.
#

#BAD_MACRO_CLASS = Use of offsetof
#BAD_MACRO_NAME = ^(offsetof)$
#BAD_MACRO_INFO = <code>offsetof</code> is disallowed because it has portability problems
#BAD_MACRO_FILENAME = stddef.h$
#BAD_MACRO_CATEGORIES = BADMACRO.OFFSETOFF;Misra2004:20.6;MisraC++2008:18-2-1
#BAD_MACRO_BASE_RANK = 12.0
#BAD_MACRO_SIGNIFICANCE = RELIABILITY


#BAD_MACRO_CLASS = Use of <stdarg.h> Feature
#BAD_MACRO_NAME = ^(va_arg|va_start|va_end|va_copy)$
#BAD_MACRO_INFO = <macroname/> is used. Violation of Misra C 2012:17.1: The features of <code>&lt;stdarg.h&gt;</code> shall not be used
#BAD_MACRO_FILENAME = stdarg.h$
#BAD_MACRO_CATEGORIES = BADMACRO.STDARG_H;Misra2012:17.1
#BAD_MACRO_BASE_RANK = 10.0
#BAD_MACRO_SIGNIFICANCE = RELIABILITY

#BAD_MACRO_CLASS = Use of <stdio.h> Input/Output Macro
#BAD_MACRO_NAME = ^(clearerr|ctermid|cuserid|fclose|fdopen|feof|ferror|fflush|fgetc|fgetpos|fgets|fileno|flockfile|fopen|fprintf|fputc|fputs|fread|freopen|fscanf|fseek|fseeko|fsetpos|ftell|ftello|ftrylockfile|funlockfile|fwrite|getc|getchar|getc_unlocked|getchar_unlocked|getopt|gets|getw|pclose|perror|popen|printf|putc|putchar|putc_unlocked|putchar_unlocked|puts|putw|remove|rename|rewind|scanf|setbuf|setvbuf|snprintf|sprintf|sscanf|tempnam|tmpfile|tmpnam|ungetc|vfprintf|vprintf|vsnprintf|vsprintf)$
#BAD_MACRO_FILENAME = stdio.h$
#BAD_MACRO_CATEGORIES = BADMACRO.STDIO_H;Misra2012:21.6;CWE:758;CWE:676
#BAD_MACRO_BASE_RANK = 10.0
#BAD_MACRO_SIGNIFICANCE = STYLE

#BAD_MACRO_CLASS = Use of <wchar.h> Input/Output Macro
#BAD_MACRO_NAME = ^(btowc|fwprintf|fwscanf|iswalnum|iswalpha|iswcntrl|iswdigit|iswgraph|iswlower|iswprint|iswpunct|iswspace|iswupper|iswxdigit|iswctype|fgetwc|fgetws|fputwc|fputws|fwide|getwc|getwchar|mbsinit|mbrlen|mbrtowc|mbsrtowcs|putwc|putwchar|swprintf|swscanf|towlower|towupper|ungetwc|vfwprintf|vwprintf|vswprintf|wcrtomb|wcscat|wcschr|wcscmp|wcscoll|wcscpy|wcscspn|wcsftime|wcslen|wcsncat|wcsncmp|wcsncpy|wcspbrk|wcsrchr|wcsrtombs|wcsspn|wcsstr|wcstod|wcstok|wcstol|wcstoul|wcswcs|wcswidth|wcsxfrm|wctob|wctype|wcwidth|wmemchr|wmemcmp|wmemcpy|wmemmove|wmemset|wprintf|wscanf)$
#BAD_MACRO_FILENAME = wchar.h$
#BAD_MACRO_CATEGORIES = BADMACRO.WCHAR_H;Misra2012:21.6;CWE:758;CWE:676
#BAD_MACRO_BASE_RANK = 10
#BAD_MACRO_SIGNIFICANCE = STYLE


# Parameter SIDE_EFFECT_FREE_FUNCTIONS
#
# Purpose
#  Specifies functions whose calls are to be considered side effect
#  free.
#
# Tags
#  - WC_LANG.STRUCT.SE.DEC: Used by Side Effects in Expression with
#    Decrement
#  - WC_LANG.STRUCT.SE.INC: Used by Side Effects in Expression with
#    Increment
#  - WC_LANG.STRUCT.SE.INIT: Used by Side Effects in Initializer
#    List
#  - WC_LANG.STRUCT.SE.LOGIC: Used by Side Effects in Logical
#    Operand
#  - WC_LANG.STRUCT.SE.SIZEOF: Used by Side Effects in sizeof
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Behavior
#  In checks for the following warning classes,CodeSonar treats all
#  function calls as having side effects UNLESS the function name
#  matches a SIDE_EFFECT_FREE_FUNCTIONS regular expression.
#  - Side Effects in Expression with Decrement
#  - Side Effects in Expression with Increment
#  - Side Effects in Initializer List
#  - Side Effects in Logical Operand
#  - Side Effects in sizeof
#
# Notes
#  It is impossible to know precisely which functions have side
#  effects in general, so this parameter allows the specification of
#  functions that are considered side effect free.

#SIDE_EFFECT_FREE_FUNCTIONS += ^(strlen|strnlen_s|strcmp|strncmp|strcoll|strchr|strrchr|strspn|strcspn|memchr)$
#SIDE_EFFECT_FREE_FUNCTIONS += ^(isalnum|isalpha|islower|isupper|isdigit|isxdigit|iscntrl|isgraph|isspace|isblank|isprint|ispunct|tolower|toupper)$
#SIDE_EFFECT_FREE_FUNCTIONS += ^(iswalnum|iswalpha|iswlower|iswdigit|iswxdigit|iswcntrl|iswgraph|iswspace|iswblank|iswprint|iswpunct|wctype|towlower|towupper|towctrans|wctrans)$


# Parameter UNTRUSTED_PROC_BLACKLIST
#
# Purpose
#  Specify process names that will trigger Untrusted Process
#  Creation warnings.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.PROC: Used by Untrusted Process Creation
#
# Behavior
#  An UNTRUSTED_PROC_BLACKLIST rule is "applicable" if and only if
#  - there is no subsequent UNTRUSTED_PROC_WHITELIST rule (which
#    would take precedence), AND
#  - there is no subsequent UNTRUSTED_PROC_BLACKLIST= rule (which
#    would reset the blacklist). All other UNTRUSTED_PROC_BLACKLIST
#    rules are ignored.
#
#  If there are one or more applicable UNTRUSTED_PROC_BLACKLIST
#  rules, calls to triggering functions for Untrusted Process
#  Creation are handled as follows.
#  - If the process name argument matches the regular expression in
#    one or more of the applicable UNTRUSTED_PROC_BLACKLIST rules, a
#    warning is issued.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the process name argument may have been
#    obfuscated (where obfuscation thresholds are specified by
#    MIN_B64_SCORE and MIN_ENC_SCORE).
#
#  If there are no applicable UNTRUSTED_PROC_BLACKLIST rules, calls
#  to triggering functions for Untrusted Process Creation are
#  handled as follows
#  - If any UNTRUSTED_PROC_WHITELIST rules are applicable, they are
#    applied as described in the documentation for
#    UNTRUSTED_PROC_WHITELIST.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the process name argument may have been
#    obfuscated.
#
# Notes
#  With factory settings, all Linux and Windows shells are
#  blacklisted.
#
#  The applicability rules for UNTRUSTED_PROC_BLACKLIST and
#  UNTRUSTED_PROC_WHITELIST are such that process name whitelists
#  and blacklists cannot be used in combination: rules of at most
#  one of the two types will be applicable. If both
#  UNTRUSTED_PROC_BLACKLIST and UNTRUSTED_PROC_WHITELIST rules are
#  specified, an alert will be generated in the hub.


## Linux/Unix command shells: sh, bash, csh, scsh, tcsh, ksh, pdksh, zsh, ash
#UNTRUSTED_PROC_BLACKLIST += ^\s*(.*[/\\])?(a|ba|c|k|pdk|sc|tc|z)?sh(\s+.*)*$
## Windows command shells: cmd.exe, command.com
#UNTRUSTED_PROC_BLACKLIST += ^\s*(.*[/\\])?cmd(.exe)?(\s+.*)*$
#UNTRUSTED_PROC_BLACKLIST += ^\s*(.*[/\\])?command(.com)?(\s+.*)*$
## Interpreters: python, ruby, perl, java
## (these are more generic - anything starting with python, e.g. python-2.4,
##  will match)
#UNTRUSTED_PROC_BLACKLIST += ^\s*(.*[/\\])?(java|perl|python|ruby)


# Parameter UNTRUSTED_PROC_WHITELIST
#
# Purpose
#  Specify process names that will not trigger a Untrusted Process
#  Creation warning.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.PROC: Used by Untrusted Process Creation
#
# Behavior
#  An UNTRUSTED_PROC_WHITELIST rule is "applicable" if and only if
#  - there is no subsequent UNTRUSTED_PROC_BLACKLIST rule (which
#    would take precedence), AND
#  - there is no subsequent UNTRUSTED_PROC_WHITELIST= rule (which
#    would reset the whitelist). All other UNTRUSTED_PROC_WHITELIST
#    rules are ignored.
#
#  If there are one or more applicable UNTRUSTED_PROC_WHITELIST
#  rules, calls to triggering functions for Untrusted Process
#  Creation are handled as follows.
#  - If the process name argument matches the regular expression in
#    one or more of the applicable UNTRUSTED_PROC_WHITELIST rules, a
#    warning is NOT issued.
#  - Otherwise, a warning is issued. This includes the case where
#    CodeSonar cannot determine the value of the process name
#    argument.
#
#  If there are no applicable UNTRUSTED_PROC_WHITELIST rules, calls
#  to triggering functions for Untrusted Process Creation are
#  handled as follows
#  - If any UNTRUSTED_PROC_BLACKLIST rules are applicable, they are
#    applied as described in the documentation for
#    UNTRUSTED_PROC_BLACKLIST.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the process name argument may have been
#    obfuscated (where obfuscation thresholds are specified by
#    MIN_B64_SCORE and MIN_ENC_SCORE).
#
# Notes
#  The applicability rules for UNTRUSTED_PROC_WHITELIST and
#  UNTRUSTED_PROC_BLACKLIST are such that process name whitelists
#  and blacklists cannot be used in combination: rules of at most
#  one of the two types will be applicable. If both
#  UNTRUSTED_PROC_WHITELIST and UNTRUSTED_PROC_BLACKLIST rules are
#  specified, an alert will be generated in the hub.
#
#  The whitelist represents a much more aggressive approach than the
#  blacklist, and will result in more false positives. For example,
#  if CodeSonar cannot determine the name of the process being
#  created, a warning will be generated for whitelists but not
#  blacklists.
#


# Parameter UNTRUSTED_LIB_BLACKLIST
#
# Purpose
#  Specify dynamic library names that will trigger Untrusted Library
#  Load warnings.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.LIB: Used by Untrusted Library Load
#
# Behavior
#  An UNTRUSTED_LIB_BLACKLIST rule is "applicable" if and only if
#  - there is no subsequent UNTRUSTED_LIB_WHITELIST rule (which
#    would take precedence), AND
#  - there is no subsequent UNTRUSTED_LIB_BLACKLIST= rule (which
#    would reset the blacklist). All other UNTRUSTED_LIB_BLACKLIST
#    rules are ignored.
#
#  If there are one or more applicable UNTRUSTED_LIB_BLACKLIST
#  rules, calls to triggering functions for Untrusted Library Load
#  are handled as follows.
#  - If the library name argument matches the regular expression in
#    one or more of the applicable UNTRUSTED_LIB_BLACKLIST rules, a
#    warning is issued.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the library name argument may have been
#    obfuscated (where obfuscation thresholds are specified by
#    MIN_B64_SCORE and MIN_ENC_SCORE).
#
#  If there are no applicable UNTRUSTED_LIB_BLACKLIST rules, calls
#  to triggering functions for Untrusted Library Load are handled as
#  follows
#  - If any UNTRUSTED_LIB_WHITELIST rules are applicable, they are
#    applied as described in the documentation for
#    UNTRUSTED_LIB_WHITELIST.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the library name argument may have been
#    obfuscated.
#
# Notes
#  With factory settings, no dynamic libraries are blacklisted.
#
#  The applicability rules for UNTRUSTED_LIB_BLACKLIST and
#  UNTRUSTED_LIB_WHITELIST are such that library name whitelists and
#  blacklists cannot be used in combination: rules of at most one of
#  the two types will be applicable. If both UNTRUSTED_LIB_WHITELIST
#  and UNTRUSTED_LIB_BLACKLIST rules are specified, an alert will be
#  generated in the hub.


# Parameter UNTRUSTED_LIB_WHITELIST
#
# Purpose
#  Specify dynamic library names that will not trigger a Untrusted
#  Library Load warning.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.LIB: Used by Untrusted Library Load
#
# Behavior
#  An UNTRUSTED_LIB_WHITELIST rule is "applicable" if and only if
#  - there is no subsequent UNTRUSTED_LIB_BLACKLIST rule (which
#    would take precedence), AND
#  - there is no subsequent UNTRUSTED_LIB_WHITELIST= rule (which
#    would reset the whitelist). All other UNTRUSTED_LIB_WHITELIST
#    rules are ignored.
#
#  If there are one or more applicable UNTRUSTED_LIB_WHITELIST
#  rules, calls to triggering functions for Untrusted Library Load
#  are handled as follows.
#  - If the library name argument matches the regular expression in
#    one or more of the applicable UNTRUSTED_LIB_WHITELIST rules, a
#    warning is NOT issued.
#  - Otherwise, a warning is issued. This includes the case where
#    CodeSonar cannot determine the value of the library name
#    argument.
#
#  If there are no applicable UNTRUSTED_LIB_WHITELIST rules, calls
#  to triggering functions for Untrusted Library Load are handled as
#  follows
#  - If any UNTRUSTED_LIB_BLACKLIST rules are applicable, they are
#    applied as described in the documentation for
#    UNTRUSTED_LIB_BLACKLIST.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the library name argument may have been
#    obfuscated (where obfuscation thresholds are specified by
#    MIN_B64_SCORE and MIN_ENC_SCORE).
#
# Notes
#  The applicability rules for UNTRUSTED_LIB_WHITELIST and
#  UNTRUSTED_LIB_BLACKLIST are such that library name whitelists and
#  blacklists cannot be used in combination: rules of at most one of
#  the two types will be applicable. If both UNTRUSTED_LIB_WHITELIST
#  and UNTRUSTED_LIB_BLACKLIST rules are specified, an alert will be
#  generated in the hub.
#
#  The whitelist represents a much more aggressive approach than the
#  blacklist, and will result in more false positives. For example,
#  if CodeSonar cannot determine the name of the dynamic library
#  being loaded, a warning will be generated for whitelists but not
#  blacklists.
#


# Parameter NETWORK_HOST_BLACKLIST
#
# Purpose
#  Specifies network hosts that will trigger a Untrusted Network
#  Host warning.
#
# Type
#  - <re>
#  - allow <re>
#
#  where <re> is a Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.HOST: Used by Untrusted Network Host
#
# Behavior
#  A NETWORK_HOST_BLACKLIST rule is "applicable" if and only if
#  - there is no subsequent NETWORK_HOST_WHITELIST rule (which would
#    take precedence), AND
#  - there is no subsequent NETWORK_HOST_BLACKLIST= rule (which
#    would reset the blacklist). All other NETWORK_HOST_BLACKLIST
#    rules are ignored.
#
#  If there are one or more applicable NETWORK_HOST_BLACKLIST rules,
#  calls to triggering functions for Untrusted Network Host are
#  handled as follows.
#  - If the network host argument matches an 'allow' regular
#    expression in one or more of the applicable
#    NETWORK_HOST_BLACKLIST rules, a warning is not issued.
#  - Otherwise, if the network host argument matches the regular
#    expression in one or more of the applicable (non-'allow')
#    NETWORK_HOST_BLACKLIST rules, a warning is issued.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the network host argument may have been
#    obfuscated (where obfuscation thresholds are specified by
#    MIN_B64_SCORE and MIN_ENC_SCORE).
#
#  If there are no applicable NETWORK_HOST_BLACKLIST rules, calls to
#  triggering functions for Untrusted Network Host are handled as
#  follows
#  - If any NETWORK_HOST_WHITELIST rules are applicable, they are
#    applied as described in the documentation for
#    NETWORK_HOST_WHITELIST.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the network host argument may have been
#    obfuscated.
#
# Notes
#  With factory settings, all hardcoded IPv4, IPv6, and DNS
#  addresses are blacklisted.
#
#  The applicability rules for NETWORK_HOST_BLACKLIST and
#  NETWORK_HOST_WHITELIST are such that network host whitelists and
#  blacklists cannot be used in combination: rules of at most one of
#  the two types will be applicable. If both NETWORK_HOST_WHITELIST
#  and NETWORK_HOST_BLACKLIST rules are specified, an alert will be
#  generated in the hub.
#
#  The 'allow' rules are provided so that blacklist exceptions can
#  be specified without resorting to overcomplicated blacklist
#  regular expressions.

## IPv4
#NETWORK_HOST_BLACKLIST += allow ^127.0.0.1$
#NETWORK_HOST_BLACKLIST += allow ^0.[0-9]+\.[0-9]+\.[0-9]+$
#NETWORK_HOST_BLACKLIST += [0-9]+\.[0-9]+\.[0-9]+\.[0-9]+

## IPv6
#NETWORK_HOST_BLACKLIST += allow ^0:0:0:0:0:0:0:1$
#NETWORK_HOST_BLACKLIST += allow ^::1$
#NETWORK_HOST_BLACKLIST += allow ^0:0:0:0:0:0:0:0$
#NETWORK_HOST_BLACKLIST += allow ^::$
#NETWORK_HOST_BLACKLIST += ([a-zA-Z0-9])+:([a-zA-Z0-9])+:([a-zA-Z0-9])+:([a-zA-Z0-9])


## There is a full list of possible domain name suffixes, but we just
## assume that any alphabetic between 2 and 6 characters could be a
## domain
#NETWORK_HOST_BLACKLIST += .+\.[a-zA-Z]{2,6}($|\s+|\\|/|:)


# Parameter NETWORK_HOST_WHITELIST
#
# Purpose
#  Specifies network hosts that will not trigger a Untrusted Network
#  Host warning.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.HOST: Used by Untrusted Network Host
#
# Behavior
#  A NETWORK_HOST_WHITELIST rule is "applicable" if and only if
#  - there is no subsequent NETWORK_HOST_BLACKLIST rule (which would
#    take precedence), AND
#  - there is no subsequent NETWORK_HOST_WHITELIST= rule (which
#    would reset the whitelist). All other NETWORK_HOST_WHITELIST
#    rules are ignored.
#
#  If there are one or more applicable NETWORK_HOST_WHITELIST rules,
#  calls to triggering functions for Untrusted Network Host are
#  handled as follows.
#  - If the network host argument matches the regular expression in
#    one or more of the applicable NETWORK_HOST_WHITELIST rules, a
#    warning is NOT issued.
#  - Otherwise, a warning is issued. This includes the case where
#    CodeSonar cannot determine the value of the library name
#    argument.
#
#  If there are no applicable NETWORK_HOST_WHITELIST rules, calls to
#  triggering functions for Untrusted Network Host are handled as
#  follows
#  - If any NETWORK_HOST_BLACKLIST rules are applicable, they are
#    applied as described in the documentation for
#    NETWORK_HOST_BLACKLIST.
#  - Otherwise, a warning is issued if and only if CodeSonar
#    determines that the network host argument may have been
#    obfuscated (where obfuscation thresholds are specified by
#    MIN_B64_SCORE and MIN_ENC_SCORE).
#
# Notes
#  The applicability rules for NETWORK_HOST_WHITELIST and
#  NETWORK_HOST_BLACKLIST are such that network host whitelists and
#  blacklists cannot be used in combination: rules of at most one of
#  the two types will be applicable. If both NETWORK_HOST_WHITELIST
#  and NETWORK_HOST_BLACKLIST rules are specified, an alert will be
#  generated in the hub.
#
#  Using the whitelist is a much more aggressive approach than using
#  the blacklist, and will result in more false positives. For
#  example, if CodeSonar cannot determine the target host name, a
#  warning will be generated for whitelists but not blacklists.


# Parameter NETWORK_PORT_BLACKLIST
#
# Purpose
#  Specifies network ports that will trigger a Untrusted Network
#  Port warning.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.PORT: Used by Untrusted Network Port
#
# Behavior
#  A NETWORK_PORT_BLACKLIST rule is "applicable" if and only if
#  - there is no subsequent NETWORK_PORT_WHITELIST rule (which would
#    take precedence), AND
#  - there is no subsequent NETWORK_PORT_BLACKLIST= rule (which
#    would reset the blacklist). All other NETWORK_PORT_BLACKLIST
#    rules are ignored.
#
#  If there are one or more applicable NETWORK_PORT_BLACKLIST rules,
#  calls to triggering functions for Untrusted Network Port are
#  handled as follows.
#  - If the network port argument matches the regular expression in
#    one or more of the applicable NETWORK_PORT_BLACKLIST rules, a
#    warning is issued.
#  - Otherwise, no warning is issued.
#
#  If there are no applicable NETWORK_PORT_BLACKLIST rules, calls to
#  triggering functions for Untrusted Network Port are handled as
#  follows
#  - If any NETWORK_PORT_WHITELIST rules are applicable, they are
#    applied as described in the documentation for
#    NETWORK_HOST_WHITELIST.
#  - Otherwise, no warning is issued.
#
# Notes
#  The applicability rules for NETWORK_PORT_BLACKLIST and
#  NETWORK_PORT_WHITELIST are such that network port whitelists and
#  blacklists cannot be used in combination: rules of at most one of
#  the two types will be applicable. If both NETWORK_PORT_WHITELIST
#  and NETWORK_PORT_BLACKLIST rules are specified, an alert will be
#  generated in the hub.
#
#  For example, to warn about any hardcoded port, put the following
#  after all other NETWORK_PORT_BLACKLIST and NETWORK_PORT_WHITELIST
#  rules.
#    NETWORK_PORT_BLACKLIST = .*



# Parameter NETWORK_PORT_WHITELIST
#
# Purpose
#  Specifies network ports that will not trigger a Untrusted Network
#  Port warning.
#
# Type
#  Boost 'POSIX Extended Regular Expression'
#  [http://www.boost.org/doc/libs/1_63_0/libs/regex/doc/html/boost_regex/syntax/basic_extended.html]
#
# Tags
#  - WC_IO.UT.PORT: Used by Untrusted Network Port
#
# Behavior
#  A NETWORK_PORT_WHITELIST rule is "applicable" if and only if
#  - there is no subsequent NETWORK_PORT_BLACKLIST rule (which would
#    take precedence), AND
#  - there is no subsequent NETWORK_PORT_WHITELIST= rule (which
#    would reset the whitelist). All other _WHITELIST rules are
#    ignored.
#
#  If there are one or more applicable NETWORK_PORT_WHITELIST rules,
#  calls to triggering functions for Untrusted Network Port are
#  handled as follows.
#  - If the network host argument matches the regular expression in
#    one or more of the applicable NETWORK_PORT_WHITELIST rules, a
#    warning is NOT issued.
#  - Otherwise, a warning is issued. This includes the case where
#    CodeSonar cannot determine the value of the library name
#    argument.
#
#  If there are no applicable NETWORK_PORT_WHITELIST rules, calls to
#  triggering functions for Untrusted Network Port are handled as
#  follows
#  - If any NETWORK_PORT_BLACKLIST rules are applicable, they are
#    applied as described in the documentation for
#    NETWORK_PORT_BLACKLIST.
#  - Otherwise, a warning not is issued.
#
# Notes
#  With factory settings, the following are allowed: Email, SSH,
#  SMTP, HTTP, FTP, SSH.
#
#  The applicability rules for NETWORK_PORT_WHITELIST and
#  NETWORK_PORT_BLACKLIST are such that network port whitelists and
#  blacklists cannot be used in combination: rules of at most one of
#  the two types will be applicable. If both NETWORK_PORT_WHITELIST
#  and NETWORK_PORT_BLACKLIST rules are specified, an alert will be
#  generated in the hub.
#
#  Using the whitelist is a much more aggressive approach than using
#  the blacklist, and will result in more false positives. For
#  example, if CodeSonar cannot determine the value of the network
#  port argument, a warning will be generated for whitelists but not
#  blacklists.

## FTP
#NETWORK_PORT_WHITELIST += ^20$
## FTP
#NETWORK_PORT_WHITELIST += ^21$
## SSH
#NETWORK_PORT_WHITELIST += ^22$
## SMTP
#NETWORK_PORT_WHITELIST += ^25$
## HTTP
#NETWORK_PORT_WHITELIST += ^80$
## NTP
#NETWORK_PORT_WHITELIST += ^123$
## IMAP
#NETWORK_PORT_WHITELIST += ^143$


# Parameter TIMEBOMB_IGNORE_ZERO
#
# Purpose
#  Specify whether the Potential Timebomb check should ignore
#  comparisons against zero.
#
# Type
#  { Yes, No }
#
# Tags
#  - WC_MISC.TIMEBOMB: Used by Potential Timebomb
#
# Behavior
#  - Yes : Potential Timebomb checks will ignore comparisons against
#    zero, which is a common error return value for time functions.
#  - No : Potential Timebomb checks will not ignore comparisons
#    against zero. This is likely to result in more false positive
#    warnings.
#
#TIMEBOMB_IGNORE_ZERO = Yes


# Parameter MAX_CHROOT_CHDIR_DIST
#
# Purpose
#  Specifies the number of lines of code after a call to chroot()
#  within which a subsequent call to chdir() must occur to avoid
#  issuing a chroot without chdir warning.
#
# Type
#  integer
#
# Tags
#  - WC_MISC.CHROOT.NOCHDIR: Used by chroot without chdir
#
# Behavior
#  Sets a bound N. A chroot without chdir warning is issued at a
#  call to chroot() if either of the following are true.
#  - N lines of code can be executed after the call to chroot()
#    without encountering a call to chdir().
#  - The function in which chroot() was called returns before
#    reaching a call to chdir().

#MAX_CHROOT_CHDIR_DIST = 20


# Parameter MIN_B64_SCORE
#
# Purpose
#  Specifies a threshold beyond which constant strings are
#  identified as Base64-encoded for warning classes Untrusted
#  Network Host, Untrusted Library Load, and Untrusted Process
#  Creation.
#
# Type
#  integer
#
# Tags
#  - WC_IO.UT.HOST: Used by Untrusted Network Host
#  - WC_IO.UT.LIB: Used by Untrusted Library Load
#  - WC_IO.UT.PROC: Used by Untrusted Process Creation
#
# Behavior
#  When a constant string argument is passed to a triggering
#  function for any of these warning classes, CodeSonar computes a
#  metric from that string to determine heuristically whether it
#  represents Base64-encoded content. If the value of the computed
#  metric is above MIN_B64_SCORE, a warning of the corresponding
#  class is issued.
#
#  Note The factors considered by the metric include the following.
#  - Does the string consist entirely of alphanumeric characters and
#    '+', '/', or '='?
#  - Is the length of the string an integer multiple of 4?
#  - Does the string end with '=' characters?
#  - Are the alphabetic characters in the string consistently upper
#    or consistently lower case?
#  - Does the string include many of the available Base64 encoding
#    characters?

#MIN_B64_SCORE = 50


# Parameter MIN_ENC_SCORE
#
# Purpose
#  Specifies a threshold beyond which constant strings are
#  identified as encrypted for warning classes Untrusted Network
#  Host, Untrusted Library Load, and Untrusted Process Creation.
#
# Type
#  integer
#
# Tags
#  - WC_IO.UT.HOST: Used by Untrusted Network Host
#  - WC_IO.UT.LIB: Used by Untrusted Library Load
#  - WC_IO.UT.PORT: Used by Untrusted Network Port
#
# Behavior
#  When a constant string argument is passed to a triggering
#  function for any of these warning classes, CodeSonar computes a
#  metric from that string to determine heuristically whether it
#  represents encrypted content. If the value of the computed metric
#  is above MIN_ENC_SCORE, a warning of the corresponding class is
#  issued.
#
#  Note Factors considered include:
#  - Does the string consist entirely of alphanumeric characters or
#    other common text characters? (If so, it is unlikely to be
#    encrypted.)
#  - Does the string exhibit high entropy?

#MIN_ENC_SCORE = 90


# Parameter POINTED_TO_CAPACITY_DEFAULTS_TO_TYPE_BOUNDARY
#
# Purpose
#  When the address of a portion of an aggregate is taken, and
#  CodeSonar is not intraprocedurally aware of the size of the
#  underlying allocation, should the "2$Buffer Overrun" warning
#  class checker treat the pointer's capacity as the capacity of the
#  portion (as opposed to the capacity of the underlying
#  allocation)?
#
# Tags
#  - WC_LANG.MEM.BO: Used by Buffer Overrun
#  - WARNING_TUNING: Fine Tuning for Warnings
#
# Type
#  { Yes, No }
#
# Behavior
#  - Yes : CodeSonar will determine the pointer capacity using the
#    type boundary of the entity whose address was taken.
#  - No : CodeSonar will determine the pointer capacity using the
#    capacity of the underlying allocation.
#
# Notes
#  When the address of some sub-object like a field in a structure
#  or a row of a multi-dimensional array is taken, CodeSonar will
#  record how far the resulting address is from the end of the
#  allocation, for the purpose of detecting buffer overruns.
#
#  For statements such as:
#    q = &p->f;
#
#  CodeSonar will generally pick the minimum of the distance between
#  the size of f and the distance to the end of the underlying
#  allocation from the beginning of f. However, there will be times
#  when CodeSonar must make this decision without knowing these two
#  values. This preference determines which of the two behaviors is
#  used in this case.
#
#  Setting POINTED_TO_CAPACITY_DEFAULTS_TO_TYPE_BOUNDARY=Yes permits
#  CodeSonar to detect the buffer overrun in the following code.
#    struct { int f; } *p = unknown_value();
#    int *q = &p->f;
#    q[5] = 42;
#
#  Setting POINTED_TO_CAPACITY_DEFAULTS_TO_TYPE_BOUNDARY=No permits
#  CodeSonar to detect the buffer overrun in the following code.

#    void f(int x){
#    int A[10][10];
#    int *q = &A[x][0];
#    q[5] = 42;
#    }
#    
#    void g(){ f(11); }
#
#  Note that the "2$Buffer Overrun" warning class is one of several
#  detectors for buffer overruns, and unlike the others is disabled
#  by default. You can enable it with a WARNING_FILTER rule.
#
#POINTED_TO_CAPACITY_DEFAULTS_TO_TYPE_BOUNDARY = Yes

#--start changes by hubconfig.py--#
#ANALYSIS_SLAVES = Auto
#HUB_ADDRESS = 142.150.237.27:7340
#REQUEST_REMOTE_ANALYSIS_SLAVES = YES
#DAEMON_SLAVES = Auto
#--end changes by hubconfig.py--#

#--start changes by hubconfig.py--#
#ANALYSIS_SLAVES = Auto
#HUB_ADDRESS = 10.99.0.10:7340
#REQUEST_REMOTE_ANALYSIS_SLAVES = YES
#DAEMON_SLAVES = Auto
#--end changes by hubconfig.py--#

#--start changes by hubconfig.py--#
#ANALYSIS_SLAVES = Auto
#HUB_ADDRESS = 10.99.0.10:7340
#REQUEST_REMOTE_ANALYSIS_SLAVES = YES
#DAEMON_SLAVES = Auto
#--end changes by hubconfig.py--#
